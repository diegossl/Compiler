List of tokens

1			IDE		import
1			DEL		{
1			IDE		SapDriver
1			DEL		}
1			IDE		from
1			CAD		"../driver/sap/SapDriver"
1			DEL		;
2			IDE		import
2			DEL		{
2			IDE		RawSqlResultsToEntityTransformer
2			DEL		}
2			IDE		from
2			CAD		"./transformer/RawSqlResultsToEntityTransformer"
2			DEL		;
3			IDE		import
3			DEL		{
3			IDE		ObjectLiteral
3			DEL		}
3			IDE		from
3			CAD		"../common/ObjectLiteral"
3			DEL		;
4			IDE		import
4			DEL		{
4			IDE		SqlServerDriver
4			DEL		}
4			IDE		from
4			CAD		"../driver/sqlserver/SqlServerDriver"
4			DEL		;
5			IDE		import
5			DEL		{
5			IDE		PessimisticLockTransactionRequiredError
5			DEL		}
5			IDE		from
5			CAD		"../error/PessimisticLockTransactionRequiredError"
5			DEL		;
6			IDE		import
6			DEL		{
6			IDE		NoVersionOrUpdateDateColumnError
6			DEL		}
6			IDE		from
6			CAD		"../error/NoVersionOrUpdateDateColumnError"
6			DEL		;
7			IDE		import
7			DEL		{
7			IDE		OptimisticLockVersionMismatchError
7			DEL		}
7			IDE		from
7			CAD		"../error/OptimisticLockVersionMismatchError"
7			DEL		;
8			IDE		import
8			DEL		{
8			IDE		OptimisticLockCanNotBeUsedError
8			DEL		}
8			IDE		from
8			CAD		"../error/OptimisticLockCanNotBeUsedError"
8			DEL		;
9			IDE		import
9			DEL		{
9			IDE		JoinAttribute
9			DEL		}
9			IDE		from
9			CAD		"./JoinAttribute"
9			DEL		;
10		IDE		import
10		DEL		{
10		IDE		RelationIdAttribute
10		DEL		}
10		IDE		from
10		CAD		"./relation-id/RelationIdAttribute"
10		DEL		;
11		IDE		import
11		DEL		{
11		IDE		RelationCountAttribute
11		DEL		}
11		IDE		from
11		CAD		"./relation-count/RelationCountAttribute"
11		DEL		;
12		IDE		import
12		DEL		{
12		IDE		RelationIdLoader
12		DEL		}
12		IDE		from
12		CAD		"./relation-id/RelationIdLoader"
12		DEL		;
13		IDE		import
13		DEL		{
13		IDE		RelationIdMetadataToAttributeTransformer
13		DEL		}
13		IDE		from
13		CAD		"./relation-id/RelationIdMetadataToAttributeTransformer"
13		DEL		;
14		IDE		import
14		DEL		{
14		IDE		RelationCountLoader
14		DEL		}
14		IDE		from
14		CAD		"./relation-count/RelationCountLoader"
14		DEL		;
15		IDE		import
15		DEL		{
15		IDE		RelationCountMetadataToAttributeTransformer
15		DEL		}
15		IDE		from
15		CAD		"./relation-count/RelationCountMetadataToAttributeTransformer"
15		DEL		;
16		IDE		import
16		DEL		{
16		IDE		QueryBuilder
16		DEL		}
16		IDE		from
16		CAD		"./QueryBuilder"
16		DEL		;
17		IDE		import
17		DEL		{
17		IDE		ReadStream
17		DEL		}
17		IDE		from
17		CAD		"../platform/PlatformTools"
17		DEL		;
18		IDE		import
18		DEL		{
18		IDE		LockNotSupportedOnGivenDriverError
18		DEL		}
18		IDE		from
18		CAD		"../error/LockNotSupportedOnGivenDriverError"
18		DEL		;
19		IDE		import
19		DEL		{
19		IDE		MysqlDriver
19		DEL		}
19		IDE		from
19		CAD		"../driver/mysql/MysqlDriver"
19		DEL		;
20		IDE		import
20		DEL		{
20		IDE		PostgresDriver
20		DEL		}
20		IDE		from
20		CAD		"../driver/postgres/PostgresDriver"
20		DEL		;
21		IDE		import
21		DEL		{
21		IDE		OracleDriver
21		DEL		}
21		IDE		from
21		CAD		"../driver/oracle/OracleDriver"
21		DEL		;
22		IDE		import
22		DEL		{
22		IDE		SelectQuery
22		DEL		}
22		IDE		from
22		CAD		"./SelectQuery"
22		DEL		;
23		IDE		import
23		DEL		{
23		IDE		EntityMetadata
23		DEL		}
23		IDE		from
23		CAD		"../metadata/EntityMetadata"
23		DEL		;
24		IDE		import
24		DEL		{
24		IDE		ColumnMetadata
24		DEL		}
24		IDE		from
24		CAD		"../metadata/ColumnMetadata"
24		DEL		;
25		IDE		import
25		DEL		{
25		IDE		OrderByCondition
25		DEL		}
25		IDE		from
25		CAD		"../find-options/OrderByCondition"
25		DEL		;
26		IDE		import
26		DEL		{
26		IDE		QueryExpressionMap
26		DEL		}
26		IDE		from
26		CAD		"./QueryExpressionMap"
26		DEL		;
27		IDE		import
27		DEL		{
27		IDE		EntityTarget
27		DEL		}
27		IDE		from
27		CAD		"../common/EntityTarget"
27		DEL		;
28		IDE		import
28		DEL		{
28		IDE		QueryRunner
28		DEL		}
28		IDE		from
28		CAD		"../query-runner/QueryRunner"
28		DEL		;
29		IDE		import
29		DEL		{
29		IDE		WhereExpression
29		DEL		}
29		IDE		from
29		CAD		"./WhereExpression"
29		DEL		;
30		IDE		import
30		DEL		{
30		IDE		Brackets
30		DEL		}
30		IDE		from
30		CAD		"./Brackets"
30		DEL		;
31		IDE		import
31		DEL		{
31		IDE		AbstractSqliteDriver
31		DEL		}
31		IDE		from
31		CAD		"../driver/sqlite-abstract/AbstractSqliteDriver"
31		DEL		;
32		IDE		import
32		DEL		{
32		IDE		QueryResultCacheOptions
32		DEL		}
32		IDE		from
32		CAD		"../cache/QueryResultCacheOptions"
32		DEL		;
33		IDE		import
33		DEL		{
33		IDE		OffsetWithoutLimitNotSupportedError
33		DEL		}
33		IDE		from
33		CAD		"../error/OffsetWithoutLimitNotSupportedError"
33		DEL		;
34		IDE		import
34		DEL		{
34		IDE		BroadcasterResult
34		DEL		}
34		IDE		from
34		CAD		"../subscriber/BroadcasterResult"
34		DEL		;
35		IDE		import
35		DEL		{
35		IDE		SelectQueryBuilderOption
35		DEL		}
35		IDE		from
35		CAD		"./SelectQueryBuilderOption"
35		DEL		;
36		IDE		import
36		DEL		{
36		IDE		ObjectUtils
36		DEL		}
36		IDE		from
36		CAD		"../util/ObjectUtils"
36		DEL		;
37		IDE		import
37		DEL		{
37		IDE		DriverUtils
37		DEL		}
37		IDE		from
37		CAD		"../driver/DriverUtils"
37		DEL		;
38		IDE		import
38		DEL		{
38		IDE		AuroraDataApiDriver
38		DEL		}
38		IDE		from
38		CAD		"../driver/aurora-data-api/AuroraDataApiDriver"
38		DEL		;
39		IDE		import
39		DEL		{
39		IDE		CockroachDriver
39		DEL		}
39		IDE		from
39		CAD		"../driver/cockroachdb/CockroachDriver"
39		DEL		;
40		IDE		import
40		DEL		{
40		IDE		EntityNotFoundError
40		DEL		}
40		IDE		from
40		CAD		"../error/EntityNotFoundError"
40		DEL		;
45		IDE		export
45		IDE		class
45		IDE		SelectQueryBuilder
45		REL		<
45		IDE		Entity
45		REL		>
45		PRE		extends
45		IDE		QueryBuilder
45		REL		<
45		IDE		Entity
45		REL		>
45		IDE		implements
45		IDE		WhereExpression
45		DEL		{
54		IDE		getQuery
54		DEL		(
54		DEL		)
54		PRE		string
54		DEL		{
55		IDE		let
55		IDE		sql
55		REL		=
55		IDE		this
55		DEL		.
55		IDE		createComment
55		DEL		(
55		DEL		)
55		DEL		;
56		IDE		sql
56		ART		+
56		REL		=
56		IDE		this
56		DEL		.
56		IDE		createSelectExpression
56		DEL		(
56		DEL		)
56		DEL		;
57		IDE		sql
57		ART		+
57		REL		=
57		IDE		this
57		DEL		.
57		IDE		createJoinExpression
57		DEL		(
57		DEL		)
57		DEL		;
58		IDE		sql
58		ART		+
58		REL		=
58		IDE		this
58		DEL		.
58		IDE		createWhereExpression
58		DEL		(
58		DEL		)
58		DEL		;
59		IDE		sql
59		ART		+
59		REL		=
59		IDE		this
59		DEL		.
59		IDE		createGroupByExpression
59		DEL		(
59		DEL		)
59		DEL		;
60		IDE		sql
60		ART		+
60		REL		=
60		IDE		this
60		DEL		.
60		IDE		createHavingExpression
60		DEL		(
60		DEL		)
60		DEL		;
61		IDE		sql
61		ART		+
61		REL		=
61		IDE		this
61		DEL		.
61		IDE		createOrderByExpression
61		DEL		(
61		DEL		)
61		DEL		;
62		IDE		sql
62		ART		+
62		REL		=
62		IDE		this
62		DEL		.
62		IDE		createLimitOffsetExpression
62		DEL		(
62		DEL		)
62		DEL		;
63		IDE		sql
63		ART		+
63		REL		=
63		IDE		this
63		DEL		.
63		IDE		createLockExpression
63		DEL		(
63		DEL		)
63		DEL		;
64		IDE		sql
64		REL		=
64		IDE		sql
64		DEL		.
64		IDE		trim
64		DEL		(
64		DEL		)
64		DEL		;
65		PRE		if
65		DEL		(
65		IDE		this
65		DEL		.
65		IDE		expressionMap
65		DEL		.
65		IDE		subQuery
65		DEL		)
66		IDE		sql
66		REL		=
66		CAD		"("
66		ART		+
66		IDE		sql
66		ART		+
66		CAD		")"
66		DEL		;
67		PRE		return
67		IDE		sql
67		DEL		;
68		DEL		}
77		IDE		subQuery
77		DEL		(
77		DEL		)
77		IDE		SelectQueryBuilder
77		REL		<
77		IDE		any
77		REL		>
77		DEL		{
78		PRE		const
78		IDE		qb
78		REL		=
78		IDE		this
78		DEL		.
78		IDE		createQueryBuilder
78		DEL		(
78		DEL		)
78		DEL		;
79		IDE		qb
79		DEL		.
79		IDE		expressionMap
79		DEL		.
79		IDE		subQuery
79		REL		=
79		PRE		true
79		DEL		;
80		IDE		qb
80		DEL		.
80		IDE		expressionMap
80		DEL		.
80		IDE		parentQueryBuilder
80		REL		=
80		IDE		this
80		DEL		;
81		PRE		return
81		IDE		qb
81		DEL		;
82		DEL		}
88		IDE		select
88		DEL		(
88		DEL		)
88		IDE		this
88		DEL		;
94		IDE		select
94		DEL		(
94		IDE		selection
94		DEL		(
94		IDE		qb
94		IDE		SelectQueryBuilder
94		REL		<
94		IDE		any
94		REL		>
94		DEL		)
94		REL		=
94		REL		>
94		IDE		SelectQueryBuilder
94		REL		<
94		IDE		any
94		REL		>
94		DEL		,
94		IDE		selectionAliasName
94		PRE		string
94		DEL		)
94		IDE		this
94		DEL		;
100		IDE		select
100		DEL		(
100		IDE		selection
100		PRE		string
100		DEL		,
100		IDE		selectionAliasName
100		PRE		string
100		DEL		)
100		IDE		this
100		DEL		;
106		IDE		select
106		DEL		(
106		IDE		selection
106		PRE		string
106		DEL		[
106		DEL		]
106		DEL		)
106		IDE		this
106		DEL		;
112		IDE		select
112		DEL		(
112		IDE		selection
112		IDE		stringstring
112		DEL		[
112		DEL		]
112		DEL		(
112		DEL		(
112		IDE		qb
112		IDE		SelectQueryBuilder
112		REL		<
112		IDE		any
112		REL		>
112		DEL		)
112		REL		=
112		REL		>
112		IDE		SelectQueryBuilder
112		REL		<
112		IDE		any
112		REL		>
112		DEL		)
112		DEL		,
112		IDE		selectionAliasName
112		PRE		string
112		DEL		)
112		IDE		SelectQueryBuilder
112		REL		<
112		IDE		Entity
112		REL		>
112		DEL		{
113		IDE		this
113		DEL		.
113		IDE		expressionMap
113		DEL		.
113		IDE		queryType
113		REL		=
113		CAD		"select"
113		DEL		;
114		PRE		if
114		DEL		(
114		IDE		Array
114		DEL		.
114		IDE		isArray
114		DEL		(
114		IDE		selection
114		DEL		)
114		DEL		)
114		DEL		{
115		IDE		this
115		DEL		.
115		IDE		expressionMap
115		DEL		.
115		IDE		selects
115		REL		=
115		IDE		selection
115		DEL		.
115		IDE		map
115		DEL		(
115		IDE		selection
115		REL		=
115		REL		>
115		DEL		(
115		DEL		{
115		IDE		selection
115		IDE		selection
115		DEL		}
115		DEL		)
115		DEL		)
115		DEL		;
117		DEL		}
117		PRE		else
117		PRE		if
117		DEL		(
117		IDE		selection
117		IDE		instanceof
117		IDE		Function
117		DEL		)
117		DEL		{
118		PRE		const
118		IDE		subQueryBuilder
118		REL		=
118		IDE		selection
118		DEL		(
118		IDE		this
118		DEL		.
118		IDE		subQuery
118		DEL		(
118		DEL		)
118		DEL		)
118		DEL		;
119		IDE		this
119		DEL		.
119		IDE		setParameters
119		DEL		(
119		IDE		subQueryBuilder
119		DEL		.
119		IDE		getParameters
119		DEL		(
119		DEL		)
119		DEL		)
119		DEL		;
120		IDE		this
120		DEL		.
120		IDE		expressionMap
120		DEL		.
120		IDE		selects
120		DEL		.
120		IDE		push
120		DEL		(
120		DEL		{
120		IDE		selection
120		IDE		subQueryBuilder
120		DEL		.
120		IDE		getQuery
120		DEL		(
120		DEL		)
120		DEL		,
120		IDE		aliasName
120		IDE		selectionAliasName
120		DEL		}
120		DEL		)
120		DEL		;
122		DEL		}
122		PRE		else
122		PRE		if
122		DEL		(
122		IDE		selection
122		DEL		)
122		DEL		{
123		IDE		this
123		DEL		.
123		IDE		expressionMap
123		DEL		.
123		IDE		selects
123		REL		=
123		DEL		[
123		DEL		{
123		IDE		selection
123		IDE		selection
123		DEL		,
123		IDE		aliasName
123		IDE		selectionAliasName
123		DEL		}
123		DEL		]
123		DEL		;
124		DEL		}
126		PRE		return
126		IDE		this
126		DEL		;
127		DEL		}
132		IDE		addSelect
132		DEL		(
132		IDE		selection
132		DEL		(
132		IDE		qb
132		IDE		SelectQueryBuilder
132		REL		<
132		IDE		any
132		REL		>
132		DEL		)
132		REL		=
132		REL		>
132		IDE		SelectQueryBuilder
132		REL		<
132		IDE		any
132		REL		>
132		DEL		,
132		IDE		selectionAliasName
132		PRE		string
132		DEL		)
132		IDE		this
132		DEL		;
137		IDE		addSelect
137		DEL		(
137		IDE		selection
137		PRE		string
137		DEL		,
137		IDE		selectionAliasName
137		PRE		string
137		DEL		)
137		IDE		this
137		DEL		;
142		IDE		addSelect
142		DEL		(
142		IDE		selection
142		PRE		string
142		DEL		[
142		DEL		]
142		DEL		)
142		IDE		this
142		DEL		;
147		IDE		addSelect
147		DEL		(
147		IDE		selection
147		IDE		stringstring
147		DEL		[
147		DEL		]
147		DEL		(
147		DEL		(
147		IDE		qb
147		IDE		SelectQueryBuilder
147		REL		<
147		IDE		any
147		REL		>
147		DEL		)
147		REL		=
147		REL		>
147		IDE		SelectQueryBuilder
147		REL		<
147		IDE		any
147		REL		>
147		DEL		)
147		DEL		,
147		IDE		selectionAliasName
147		PRE		string
147		DEL		)
147		IDE		this
147		DEL		{
148		PRE		if
148		DEL		(
148		LOG		!
148		IDE		selection
148		DEL		)
149		PRE		return
149		IDE		this
149		DEL		;
151		PRE		if
151		DEL		(
151		IDE		Array
151		DEL		.
151		IDE		isArray
151		DEL		(
151		IDE		selection
151		DEL		)
151		DEL		)
151		DEL		{
152		IDE		this
152		DEL		.
152		IDE		expressionMap
152		DEL		.
152		IDE		selects
152		REL		=
152		IDE		this
152		DEL		.
152		IDE		expressionMap
152		DEL		.
152		IDE		selects
152		DEL		.
152		IDE		concat
152		DEL		(
152		IDE		selection
152		DEL		.
152		IDE		map
152		DEL		(
152		IDE		selection
152		REL		=
152		REL		>
152		DEL		(
152		DEL		{
152		IDE		selection
152		IDE		selection
152		DEL		}
152		DEL		)
152		DEL		)
152		DEL		)
152		DEL		;
154		DEL		}
154		PRE		else
154		PRE		if
154		DEL		(
154		IDE		selection
154		IDE		instanceof
154		IDE		Function
154		DEL		)
154		DEL		{
155		PRE		const
155		IDE		subQueryBuilder
155		REL		=
155		IDE		selection
155		DEL		(
155		IDE		this
155		DEL		.
155		IDE		subQuery
155		DEL		(
155		DEL		)
155		DEL		)
155		DEL		;
156		IDE		this
156		DEL		.
156		IDE		setParameters
156		DEL		(
156		IDE		subQueryBuilder
156		DEL		.
156		IDE		getParameters
156		DEL		(
156		DEL		)
156		DEL		)
156		DEL		;
157		IDE		this
157		DEL		.
157		IDE		expressionMap
157		DEL		.
157		IDE		selects
157		DEL		.
157		IDE		push
157		DEL		(
157		DEL		{
157		IDE		selection
157		IDE		subQueryBuilder
157		DEL		.
157		IDE		getQuery
157		DEL		(
157		DEL		)
157		DEL		,
157		IDE		aliasName
157		IDE		selectionAliasName
157		DEL		}
157		DEL		)
157		DEL		;
159		DEL		}
159		PRE		else
159		PRE		if
159		DEL		(
159		IDE		selection
159		DEL		)
159		DEL		{
160		IDE		this
160		DEL		.
160		IDE		expressionMap
160		DEL		.
160		IDE		selects
160		DEL		.
160		IDE		push
160		DEL		(
160		DEL		{
160		IDE		selection
160		IDE		selection
160		DEL		,
160		IDE		aliasName
160		IDE		selectionAliasName
160		DEL		}
160		DEL		)
160		DEL		;
161		DEL		}
163		PRE		return
163		IDE		this
163		DEL		;
164		DEL		}
169		IDE		distinct
169		DEL		(
169		IDE		distinct
169		PRE		boolean
169		REL		=
169		PRE		true
169		DEL		)
169		IDE		this
169		DEL		{
170		IDE		this
170		DEL		.
170		IDE		expressionMap
170		DEL		.
170		IDE		selectDistinct
170		REL		=
170		IDE		distinct
170		DEL		;
171		PRE		return
171		IDE		this
171		DEL		;
172		DEL		}
177		IDE		distinctOn
177		DEL		(
177		IDE		distinctOn
177		PRE		string
177		DEL		[
177		DEL		]
177		DEL		)
177		IDE		this
177		DEL		{
178		IDE		this
178		DEL		.
178		IDE		expressionMap
178		DEL		.
178		IDE		selectDistinctOn
178		REL		=
178		IDE		distinctOn
178		DEL		;
179		PRE		return
179		IDE		this
179		DEL		;
180		DEL		}
187		IDE		from
187		REL		<
187		IDE		T
187		REL		>
187		DEL		(
187		IDE		entityTarget
187		DEL		(
187		IDE		qb
187		IDE		SelectQueryBuilder
187		REL		<
187		IDE		any
187		REL		>
187		DEL		)
187		REL		=
187		REL		>
187		IDE		SelectQueryBuilder
187		REL		<
187		IDE		any
187		REL		>
187		DEL		,
187		IDE		aliasName
187		PRE		string
187		DEL		)
187		IDE		SelectQueryBuilder
187		REL		<
187		IDE		T
187		REL		>
187		DEL		;
194		IDE		from
194		REL		<
194		IDE		T
194		REL		>
194		DEL		(
194		IDE		entityTarget
194		IDE		EntityTarget
194		REL		<
194		IDE		T
194		REL		>
194		DEL		,
194		IDE		aliasName
194		PRE		string
194		DEL		)
194		IDE		SelectQueryBuilder
194		REL		<
194		IDE		T
194		REL		>
194		DEL		;
201		IDE		from
201		REL		<
201		IDE		T
201		REL		>
201		DEL		(
201		IDE		entityTarget
201		IDE		EntityTarget
201		REL		<
201		IDE		T
201		REL		>
201		DEL		(
201		DEL		(
201		IDE		qb
201		IDE		SelectQueryBuilder
201		REL		<
201		IDE		any
201		REL		>
201		DEL		)
201		REL		=
201		REL		>
201		IDE		SelectQueryBuilder
201		REL		<
201		IDE		any
201		REL		>
201		DEL		)
201		DEL		,
201		IDE		aliasName
201		PRE		string
201		DEL		)
201		IDE		SelectQueryBuilder
201		REL		<
201		IDE		T
201		REL		>
201		DEL		{
202		PRE		const
202		IDE		mainAlias
202		REL		=
202		IDE		this
202		DEL		.
202		IDE		createFromAlias
202		DEL		(
202		IDE		entityTarget
202		DEL		,
202		IDE		aliasName
202		DEL		)
202		DEL		;
203		IDE		this
203		DEL		.
203		IDE		expressionMap
203		DEL		.
203		IDE		setMainAlias
203		DEL		(
203		IDE		mainAlias
203		DEL		)
203		DEL		;
204		PRE		return
204		DEL		(
204		IDE		this
204		IDE		as
204		IDE		any
204		DEL		)
204		IDE		as
204		IDE		SelectQueryBuilder
204		REL		<
204		IDE		T
204		REL		>
204		DEL		;
205		DEL		}
211		IDE		addFrom
211		REL		<
211		IDE		T
211		REL		>
211		DEL		(
211		IDE		entityTarget
211		DEL		(
211		IDE		qb
211		IDE		SelectQueryBuilder
211		REL		<
211		IDE		any
211		REL		>
211		DEL		)
211		REL		=
211		REL		>
211		IDE		SelectQueryBuilder
211		REL		<
211		IDE		any
211		REL		>
211		DEL		,
211		IDE		aliasName
211		PRE		string
211		DEL		)
211		IDE		SelectQueryBuilder
211		REL		<
211		IDE		T
211		REL		>
211		DEL		;
217		IDE		addFrom
217		REL		<
217		IDE		T
217		REL		>
217		DEL		(
217		IDE		entityTarget
217		IDE		EntityTarget
217		REL		<
217		IDE		T
217		REL		>
217		DEL		,
217		IDE		aliasName
217		PRE		string
217		DEL		)
217		IDE		SelectQueryBuilder
217		REL		<
217		IDE		T
217		REL		>
217		DEL		;
223		IDE		addFrom
223		REL		<
223		IDE		T
223		REL		>
223		DEL		(
223		IDE		entityTarget
223		IDE		EntityTarget
223		REL		<
223		IDE		T
223		REL		>
223		DEL		(
223		DEL		(
223		IDE		qb
223		IDE		SelectQueryBuilder
223		REL		<
223		IDE		any
223		REL		>
223		DEL		)
223		REL		=
223		REL		>
223		IDE		SelectQueryBuilder
223		REL		<
223		IDE		any
223		REL		>
223		DEL		)
223		DEL		,
223		IDE		aliasName
223		PRE		string
223		DEL		)
223		IDE		SelectQueryBuilder
223		REL		<
223		IDE		T
223		REL		>
223		DEL		{
224		PRE		const
224		IDE		alias
224		REL		=
224		IDE		this
224		DEL		.
224		IDE		createFromAlias
224		DEL		(
224		IDE		entityTarget
224		DEL		,
224		IDE		aliasName
224		DEL		)
224		DEL		;
225		PRE		if
225		DEL		(
225		LOG		!
225		IDE		this
225		DEL		.
225		IDE		expressionMap
225		DEL		.
225		IDE		mainAlias
225		DEL		)
226		IDE		this
226		DEL		.
226		IDE		expressionMap
226		DEL		.
226		IDE		setMainAlias
226		DEL		(
226		IDE		alias
226		DEL		)
226		DEL		;
228		PRE		return
228		DEL		(
228		IDE		this
228		IDE		as
228		IDE		any
228		DEL		)
228		IDE		as
228		IDE		SelectQueryBuilder
228		REL		<
228		IDE		T
228		REL		>
228		DEL		;
229		DEL		}
236		IDE		innerJoin
236		DEL		(
236		IDE		subQueryFactory
236		DEL		(
236		IDE		qb
236		IDE		SelectQueryBuilder
236		REL		<
236		IDE		any
236		REL		>
236		DEL		)
236		REL		=
236		REL		>
236		IDE		SelectQueryBuilder
236		REL		<
236		IDE		any
236		REL		>
236		DEL		,
236		IDE		alias
236		PRE		string
236		DEL		,
236		IDE		condition
236		PRE		string
236		DEL		,
236		IDE		parameters
236		IDE		ObjectLiteral
236		DEL		)
236		IDE		this
236		DEL		;
244		IDE		innerJoin
244		DEL		(
244		IDE		property
244		PRE		string
244		DEL		,
244		IDE		alias
244		PRE		string
244		DEL		,
244		IDE		condition
244		PRE		string
244		DEL		,
244		IDE		parameters
244		IDE		ObjectLiteral
244		DEL		)
244		IDE		this
244		DEL		;
251		IDE		innerJoin
251		DEL		(
251		IDE		entity
251		IDE		Functionstring
251		DEL		,
251		IDE		alias
251		PRE		string
251		DEL		,
251		IDE		condition
251		PRE		string
251		DEL		,
251		IDE		parameters
251		IDE		ObjectLiteral
251		DEL		)
251		IDE		this
251		DEL		;
258		IDE		innerJoin
258		DEL		(
258		IDE		tableName
258		PRE		string
258		DEL		,
258		IDE		alias
258		PRE		string
258		DEL		,
258		IDE		condition
258		PRE		string
258		DEL		,
258		IDE		parameters
258		IDE		ObjectLiteral
258		DEL		)
258		IDE		this
258		DEL		;
265		IDE		innerJoin
265		DEL		(
265		IDE		entityOrProperty
265		IDE		Functionstring
265		DEL		(
265		DEL		(
265		IDE		qb
265		IDE		SelectQueryBuilder
265		REL		<
265		IDE		any
265		REL		>
265		DEL		)
265		REL		=
265		REL		>
265		IDE		SelectQueryBuilder
265		REL		<
265		IDE		any
265		REL		>
265		DEL		)
265		DEL		,
265		IDE		alias
265		PRE		string
265		DEL		,
265		IDE		condition
265		PRE		string
265		REL		=
265		CAD		""
265		DEL		,
265		IDE		parameters
265		IDE		ObjectLiteral
265		DEL		)
265		IDE		this
265		DEL		{
266		IDE		this
266		DEL		.
266		IDE		join
266		DEL		(
266		CAD		"INNER"
266		DEL		,
266		IDE		entityOrProperty
266		DEL		,
266		IDE		alias
266		DEL		,
266		IDE		condition
266		DEL		,
266		IDE		parameters
266		DEL		)
266		DEL		;
267		PRE		return
267		IDE		this
267		DEL		;
268		DEL		}
275		IDE		leftJoin
275		DEL		(
275		IDE		subQueryFactory
275		DEL		(
275		IDE		qb
275		IDE		SelectQueryBuilder
275		REL		<
275		IDE		any
275		REL		>
275		DEL		)
275		REL		=
275		REL		>
275		IDE		SelectQueryBuilder
275		REL		<
275		IDE		any
275		REL		>
275		DEL		,
275		IDE		alias
275		PRE		string
275		DEL		,
275		IDE		condition
275		PRE		string
275		DEL		,
275		IDE		parameters
275		IDE		ObjectLiteral
275		DEL		)
275		IDE		this
275		DEL		;
283		IDE		leftJoin
283		DEL		(
283		IDE		property
283		PRE		string
283		DEL		,
283		IDE		alias
283		PRE		string
283		DEL		,
283		IDE		condition
283		PRE		string
283		DEL		,
283		IDE		parameters
283		IDE		ObjectLiteral
283		DEL		)
283		IDE		this
283		DEL		;
290		IDE		leftJoin
290		DEL		(
290		IDE		entity
290		IDE		Functionstring
290		DEL		,
290		IDE		alias
290		PRE		string
290		DEL		,
290		IDE		condition
290		PRE		string
290		DEL		,
290		IDE		parameters
290		IDE		ObjectLiteral
290		DEL		)
290		IDE		this
290		DEL		;
297		IDE		leftJoin
297		DEL		(
297		IDE		tableName
297		PRE		string
297		DEL		,
297		IDE		alias
297		PRE		string
297		DEL		,
297		IDE		condition
297		PRE		string
297		DEL		,
297		IDE		parameters
297		IDE		ObjectLiteral
297		DEL		)
297		IDE		this
297		DEL		;
304		IDE		leftJoin
304		DEL		(
304		IDE		entityOrProperty
304		IDE		Functionstring
304		DEL		(
304		DEL		(
304		IDE		qb
304		IDE		SelectQueryBuilder
304		REL		<
304		IDE		any
304		REL		>
304		DEL		)
304		REL		=
304		REL		>
304		IDE		SelectQueryBuilder
304		REL		<
304		IDE		any
304		REL		>
304		DEL		)
304		DEL		,
304		IDE		alias
304		PRE		string
304		DEL		,
304		IDE		condition
304		PRE		string
304		REL		=
304		CAD		""
304		DEL		,
304		IDE		parameters
304		IDE		ObjectLiteral
304		DEL		)
304		IDE		this
304		DEL		{
305		IDE		this
305		DEL		.
305		IDE		join
305		DEL		(
305		CAD		"LEFT"
305		DEL		,
305		IDE		entityOrProperty
305		DEL		,
305		IDE		alias
305		DEL		,
305		IDE		condition
305		DEL		,
305		IDE		parameters
305		DEL		)
305		DEL		;
306		PRE		return
306		IDE		this
306		DEL		;
307		DEL		}
314		IDE		innerJoinAndSelect
314		DEL		(
314		IDE		subQueryFactory
314		DEL		(
314		IDE		qb
314		IDE		SelectQueryBuilder
314		REL		<
314		IDE		any
314		REL		>
314		DEL		)
314		REL		=
314		REL		>
314		IDE		SelectQueryBuilder
314		REL		<
314		IDE		any
314		REL		>
314		DEL		,
314		IDE		alias
314		PRE		string
314		DEL		,
314		IDE		condition
314		PRE		string
314		DEL		,
314		IDE		parameters
314		IDE		ObjectLiteral
314		DEL		)
314		IDE		this
314		DEL		;
322		IDE		innerJoinAndSelect
322		DEL		(
322		IDE		property
322		PRE		string
322		DEL		,
322		IDE		alias
322		PRE		string
322		DEL		,
322		IDE		condition
322		PRE		string
322		DEL		,
322		IDE		parameters
322		IDE		ObjectLiteral
322		DEL		)
322		IDE		this
322		DEL		;
329		IDE		innerJoinAndSelect
329		DEL		(
329		IDE		entity
329		IDE		Functionstring
329		DEL		,
329		IDE		alias
329		PRE		string
329		DEL		,
329		IDE		condition
329		PRE		string
329		DEL		,
329		IDE		parameters
329		IDE		ObjectLiteral
329		DEL		)
329		IDE		this
329		DEL		;
336		IDE		innerJoinAndSelect
336		DEL		(
336		IDE		tableName
336		PRE		string
336		DEL		,
336		IDE		alias
336		PRE		string
336		DEL		,
336		IDE		condition
336		PRE		string
336		DEL		,
336		IDE		parameters
336		IDE		ObjectLiteral
336		DEL		)
336		IDE		this
336		DEL		;
343		IDE		innerJoinAndSelect
343		DEL		(
343		IDE		entityOrProperty
343		IDE		Functionstring
343		DEL		(
343		DEL		(
343		IDE		qb
343		IDE		SelectQueryBuilder
343		REL		<
343		IDE		any
343		REL		>
343		DEL		)
343		REL		=
343		REL		>
343		IDE		SelectQueryBuilder
343		REL		<
343		IDE		any
343		REL		>
343		DEL		)
343		DEL		,
343		IDE		alias
343		PRE		string
343		DEL		,
343		IDE		condition
343		PRE		string
343		REL		=
343		CAD		""
343		DEL		,
343		IDE		parameters
343		IDE		ObjectLiteral
343		DEL		)
343		IDE		this
343		DEL		{
344		IDE		this
344		DEL		.
344		IDE		addSelect
344		DEL		(
344		IDE		alias
344		DEL		)
344		DEL		;
345		IDE		this
345		DEL		.
345		IDE		innerJoin
345		DEL		(
345		IDE		entityOrProperty
345		DEL		,
345		IDE		alias
345		DEL		,
345		IDE		condition
345		DEL		,
345		IDE		parameters
345		DEL		)
345		DEL		;
346		PRE		return
346		IDE		this
346		DEL		;
347		DEL		}
354		IDE		leftJoinAndSelect
354		DEL		(
354		IDE		subQueryFactory
354		DEL		(
354		IDE		qb
354		IDE		SelectQueryBuilder
354		REL		<
354		IDE		any
354		REL		>
354		DEL		)
354		REL		=
354		REL		>
354		IDE		SelectQueryBuilder
354		REL		<
354		IDE		any
354		REL		>
354		DEL		,
354		IDE		alias
354		PRE		string
354		DEL		,
354		IDE		condition
354		PRE		string
354		DEL		,
354		IDE		parameters
354		IDE		ObjectLiteral
354		DEL		)
354		IDE		this
354		DEL		;
362		IDE		leftJoinAndSelect
362		DEL		(
362		IDE		property
362		PRE		string
362		DEL		,
362		IDE		alias
362		PRE		string
362		DEL		,
362		IDE		condition
362		PRE		string
362		DEL		,
362		IDE		parameters
362		IDE		ObjectLiteral
362		DEL		)
362		IDE		this
362		DEL		;
369		IDE		leftJoinAndSelect
369		DEL		(
369		IDE		entity
369		IDE		Functionstring
369		DEL		,
369		IDE		alias
369		PRE		string
369		DEL		,
369		IDE		condition
369		PRE		string
369		DEL		,
369		IDE		parameters
369		IDE		ObjectLiteral
369		DEL		)
369		IDE		this
369		DEL		;
376		IDE		leftJoinAndSelect
376		DEL		(
376		IDE		tableName
376		PRE		string
376		DEL		,
376		IDE		alias
376		PRE		string
376		DEL		,
376		IDE		condition
376		PRE		string
376		DEL		,
376		IDE		parameters
376		IDE		ObjectLiteral
376		DEL		)
376		IDE		this
376		DEL		;
383		IDE		leftJoinAndSelect
383		DEL		(
383		IDE		entityOrProperty
383		IDE		Functionstring
383		DEL		(
383		DEL		(
383		IDE		qb
383		IDE		SelectQueryBuilder
383		REL		<
383		IDE		any
383		REL		>
383		DEL		)
383		REL		=
383		REL		>
383		IDE		SelectQueryBuilder
383		REL		<
383		IDE		any
383		REL		>
383		DEL		)
383		DEL		,
383		IDE		alias
383		PRE		string
383		DEL		,
383		IDE		condition
383		PRE		string
383		REL		=
383		CAD		""
383		DEL		,
383		IDE		parameters
383		IDE		ObjectLiteral
383		DEL		)
383		IDE		this
383		DEL		{
384		IDE		this
384		DEL		.
384		IDE		addSelect
384		DEL		(
384		IDE		alias
384		DEL		)
384		DEL		;
385		IDE		this
385		DEL		.
385		IDE		leftJoin
385		DEL		(
385		IDE		entityOrProperty
385		DEL		,
385		IDE		alias
385		DEL		,
385		IDE		condition
385		DEL		,
385		IDE		parameters
385		DEL		)
385		DEL		;
386		PRE		return
386		IDE		this
386		DEL		;
387		DEL		}
397		IDE		innerJoinAndMapMany
397		DEL		(
397		IDE		mapToProperty
397		PRE		string
397		DEL		,
397		IDE		subQueryFactory
397		DEL		(
397		IDE		qb
397		IDE		SelectQueryBuilder
397		REL		<
397		IDE		any
397		REL		>
397		DEL		)
397		REL		=
397		REL		>
397		IDE		SelectQueryBuilder
397		REL		<
397		IDE		any
397		REL		>
397		DEL		,
397		IDE		alias
397		PRE		string
397		DEL		,
397		IDE		condition
397		PRE		string
397		DEL		,
397		IDE		parameters
397		IDE		ObjectLiteral
397		DEL		)
397		IDE		this
397		DEL		;
407		IDE		innerJoinAndMapMany
407		DEL		(
407		IDE		mapToProperty
407		PRE		string
407		DEL		,
407		IDE		property
407		PRE		string
407		DEL		,
407		IDE		alias
407		PRE		string
407		DEL		,
407		IDE		condition
407		PRE		string
407		DEL		,
407		IDE		parameters
407		IDE		ObjectLiteral
407		DEL		)
407		IDE		this
407		DEL		;
416		IDE		innerJoinAndMapMany
416		DEL		(
416		IDE		mapToProperty
416		PRE		string
416		DEL		,
416		IDE		entity
416		IDE		Functionstring
416		DEL		,
416		IDE		alias
416		PRE		string
416		DEL		,
416		IDE		condition
416		PRE		string
416		DEL		,
416		IDE		parameters
416		IDE		ObjectLiteral
416		DEL		)
416		IDE		this
416		DEL		;
425		IDE		innerJoinAndMapMany
425		DEL		(
425		IDE		mapToProperty
425		PRE		string
425		DEL		,
425		IDE		tableName
425		PRE		string
425		DEL		,
425		IDE		alias
425		PRE		string
425		DEL		,
425		IDE		condition
425		PRE		string
425		DEL		,
425		IDE		parameters
425		IDE		ObjectLiteral
425		DEL		)
425		IDE		this
425		DEL		;
434		IDE		innerJoinAndMapMany
434		DEL		(
434		IDE		mapToProperty
434		PRE		string
434		DEL		,
434		IDE		entityOrProperty
434		IDE		Functionstring
434		DEL		(
434		DEL		(
434		IDE		qb
434		IDE		SelectQueryBuilder
434		REL		<
434		IDE		any
434		REL		>
434		DEL		)
434		REL		=
434		REL		>
434		IDE		SelectQueryBuilder
434		REL		<
434		IDE		any
434		REL		>
434		DEL		)
434		DEL		,
434		IDE		alias
434		PRE		string
434		DEL		,
434		IDE		condition
434		PRE		string
434		REL		=
434		CAD		""
434		DEL		,
434		IDE		parameters
434		IDE		ObjectLiteral
434		DEL		)
434		IDE		this
434		DEL		{
435		IDE		this
435		DEL		.
435		IDE		addSelect
435		DEL		(
435		IDE		alias
435		DEL		)
435		DEL		;
436		IDE		this
436		DEL		.
436		IDE		join
436		DEL		(
436		CAD		"INNER"
436		DEL		,
436		IDE		entityOrProperty
436		DEL		,
436		IDE		alias
436		DEL		,
436		IDE		condition
436		DEL		,
436		IDE		parameters
436		DEL		,
436		IDE		mapToProperty
436		DEL		,
436		PRE		true
436		DEL		)
436		DEL		;
437		PRE		return
437		IDE		this
437		DEL		;
438		DEL		}
448		IDE		innerJoinAndMapOne
448		DEL		(
448		IDE		mapToProperty
448		PRE		string
448		DEL		,
448		IDE		subQueryFactory
448		DEL		(
448		IDE		qb
448		IDE		SelectQueryBuilder
448		REL		<
448		IDE		any
448		REL		>
448		DEL		)
448		REL		=
448		REL		>
448		IDE		SelectQueryBuilder
448		REL		<
448		IDE		any
448		REL		>
448		DEL		,
448		IDE		alias
448		PRE		string
448		DEL		,
448		IDE		condition
448		PRE		string
448		DEL		,
448		IDE		parameters
448		IDE		ObjectLiteral
448		DEL		)
448		IDE		this
448		DEL		;
458		IDE		innerJoinAndMapOne
458		DEL		(
458		IDE		mapToProperty
458		PRE		string
458		DEL		,
458		IDE		property
458		PRE		string
458		DEL		,
458		IDE		alias
458		PRE		string
458		DEL		,
458		IDE		condition
458		PRE		string
458		DEL		,
458		IDE		parameters
458		IDE		ObjectLiteral
458		DEL		)
458		IDE		this
458		DEL		;
467		IDE		innerJoinAndMapOne
467		DEL		(
467		IDE		mapToProperty
467		PRE		string
467		DEL		,
467		IDE		entity
467		IDE		Functionstring
467		DEL		,
467		IDE		alias
467		PRE		string
467		DEL		,
467		IDE		condition
467		PRE		string
467		DEL		,
467		IDE		parameters
467		IDE		ObjectLiteral
467		DEL		)
467		IDE		this
467		DEL		;
476		IDE		innerJoinAndMapOne
476		DEL		(
476		IDE		mapToProperty
476		PRE		string
476		DEL		,
476		IDE		tableName
476		PRE		string
476		DEL		,
476		IDE		alias
476		PRE		string
476		DEL		,
476		IDE		condition
476		PRE		string
476		DEL		,
476		IDE		parameters
476		IDE		ObjectLiteral
476		DEL		)
476		IDE		this
476		DEL		;
485		IDE		innerJoinAndMapOne
485		DEL		(
485		IDE		mapToProperty
485		PRE		string
485		DEL		,
485		IDE		entityOrProperty
485		IDE		Functionstring
485		DEL		(
485		DEL		(
485		IDE		qb
485		IDE		SelectQueryBuilder
485		REL		<
485		IDE		any
485		REL		>
485		DEL		)
485		REL		=
485		REL		>
485		IDE		SelectQueryBuilder
485		REL		<
485		IDE		any
485		REL		>
485		DEL		)
485		DEL		,
485		IDE		alias
485		PRE		string
485		DEL		,
485		IDE		condition
485		PRE		string
485		REL		=
485		CAD		""
485		DEL		,
485		IDE		parameters
485		IDE		ObjectLiteral
485		DEL		)
485		IDE		this
485		DEL		{
486		IDE		this
486		DEL		.
486		IDE		addSelect
486		DEL		(
486		IDE		alias
486		DEL		)
486		DEL		;
487		IDE		this
487		DEL		.
487		IDE		join
487		DEL		(
487		CAD		"INNER"
487		DEL		,
487		IDE		entityOrProperty
487		DEL		,
487		IDE		alias
487		DEL		,
487		IDE		condition
487		DEL		,
487		IDE		parameters
487		DEL		,
487		IDE		mapToProperty
487		DEL		,
487		PRE		false
487		DEL		)
487		DEL		;
488		PRE		return
488		IDE		this
488		DEL		;
489		DEL		}
499		IDE		leftJoinAndMapMany
499		DEL		(
499		IDE		mapToProperty
499		PRE		string
499		DEL		,
499		IDE		subQueryFactory
499		DEL		(
499		IDE		qb
499		IDE		SelectQueryBuilder
499		REL		<
499		IDE		any
499		REL		>
499		DEL		)
499		REL		=
499		REL		>
499		IDE		SelectQueryBuilder
499		REL		<
499		IDE		any
499		REL		>
499		DEL		,
499		IDE		alias
499		PRE		string
499		DEL		,
499		IDE		condition
499		PRE		string
499		DEL		,
499		IDE		parameters
499		IDE		ObjectLiteral
499		DEL		)
499		IDE		this
499		DEL		;
509		IDE		leftJoinAndMapMany
509		DEL		(
509		IDE		mapToProperty
509		PRE		string
509		DEL		,
509		IDE		property
509		PRE		string
509		DEL		,
509		IDE		alias
509		PRE		string
509		DEL		,
509		IDE		condition
509		PRE		string
509		DEL		,
509		IDE		parameters
509		IDE		ObjectLiteral
509		DEL		)
509		IDE		this
509		DEL		;
518		IDE		leftJoinAndMapMany
518		DEL		(
518		IDE		mapToProperty
518		PRE		string
518		DEL		,
518		IDE		entity
518		IDE		Functionstring
518		DEL		,
518		IDE		alias
518		PRE		string
518		DEL		,
518		IDE		condition
518		PRE		string
518		DEL		,
518		IDE		parameters
518		IDE		ObjectLiteral
518		DEL		)
518		IDE		this
518		DEL		;
527		IDE		leftJoinAndMapMany
527		DEL		(
527		IDE		mapToProperty
527		PRE		string
527		DEL		,
527		IDE		tableName
527		PRE		string
527		DEL		,
527		IDE		alias
527		PRE		string
527		DEL		,
527		IDE		condition
527		PRE		string
527		DEL		,
527		IDE		parameters
527		IDE		ObjectLiteral
527		DEL		)
527		IDE		this
527		DEL		;
536		IDE		leftJoinAndMapMany
536		DEL		(
536		IDE		mapToProperty
536		PRE		string
536		DEL		,
536		IDE		entityOrProperty
536		IDE		Functionstring
536		DEL		(
536		DEL		(
536		IDE		qb
536		IDE		SelectQueryBuilder
536		REL		<
536		IDE		any
536		REL		>
536		DEL		)
536		REL		=
536		REL		>
536		IDE		SelectQueryBuilder
536		REL		<
536		IDE		any
536		REL		>
536		DEL		)
536		DEL		,
536		IDE		alias
536		PRE		string
536		DEL		,
536		IDE		condition
536		PRE		string
536		REL		=
536		CAD		""
536		DEL		,
536		IDE		parameters
536		IDE		ObjectLiteral
536		DEL		)
536		IDE		this
536		DEL		{
537		IDE		this
537		DEL		.
537		IDE		addSelect
537		DEL		(
537		IDE		alias
537		DEL		)
537		DEL		;
538		IDE		this
538		DEL		.
538		IDE		join
538		DEL		(
538		CAD		"LEFT"
538		DEL		,
538		IDE		entityOrProperty
538		DEL		,
538		IDE		alias
538		DEL		,
538		IDE		condition
538		DEL		,
538		IDE		parameters
538		DEL		,
538		IDE		mapToProperty
538		DEL		,
538		PRE		true
538		DEL		)
538		DEL		;
539		PRE		return
539		IDE		this
539		DEL		;
540		DEL		}
550		IDE		leftJoinAndMapOne
550		DEL		(
550		IDE		mapToProperty
550		PRE		string
550		DEL		,
550		IDE		subQueryFactory
550		DEL		(
550		IDE		qb
550		IDE		SelectQueryBuilder
550		REL		<
550		IDE		any
550		REL		>
550		DEL		)
550		REL		=
550		REL		>
550		IDE		SelectQueryBuilder
550		REL		<
550		IDE		any
550		REL		>
550		DEL		,
550		IDE		alias
550		PRE		string
550		DEL		,
550		IDE		condition
550		PRE		string
550		DEL		,
550		IDE		parameters
550		IDE		ObjectLiteral
550		DEL		)
550		IDE		this
550		DEL		;
560		IDE		leftJoinAndMapOne
560		DEL		(
560		IDE		mapToProperty
560		PRE		string
560		DEL		,
560		IDE		property
560		PRE		string
560		DEL		,
560		IDE		alias
560		PRE		string
560		DEL		,
560		IDE		condition
560		PRE		string
560		DEL		,
560		IDE		parameters
560		IDE		ObjectLiteral
560		DEL		)
560		IDE		this
560		DEL		;
569		IDE		leftJoinAndMapOne
569		DEL		(
569		IDE		mapToProperty
569		PRE		string
569		DEL		,
569		IDE		entity
569		IDE		Functionstring
569		DEL		,
569		IDE		alias
569		PRE		string
569		DEL		,
569		IDE		condition
569		PRE		string
569		DEL		,
569		IDE		parameters
569		IDE		ObjectLiteral
569		DEL		)
569		IDE		this
569		DEL		;
578		IDE		leftJoinAndMapOne
578		DEL		(
578		IDE		mapToProperty
578		PRE		string
578		DEL		,
578		IDE		tableName
578		PRE		string
578		DEL		,
578		IDE		alias
578		PRE		string
578		DEL		,
578		IDE		condition
578		PRE		string
578		DEL		,
578		IDE		parameters
578		IDE		ObjectLiteral
578		DEL		)
578		IDE		this
578		DEL		;
587		IDE		leftJoinAndMapOne
587		DEL		(
587		IDE		mapToProperty
587		PRE		string
587		DEL		,
587		IDE		entityOrProperty
587		IDE		Functionstring
587		DEL		(
587		DEL		(
587		IDE		qb
587		IDE		SelectQueryBuilder
587		REL		<
587		IDE		any
587		REL		>
587		DEL		)
587		REL		=
587		REL		>
587		IDE		SelectQueryBuilder
587		REL		<
587		IDE		any
587		REL		>
587		DEL		)
587		DEL		,
587		IDE		alias
587		PRE		string
587		DEL		,
587		IDE		condition
587		PRE		string
587		REL		=
587		CAD		""
587		DEL		,
587		IDE		parameters
587		IDE		ObjectLiteral
587		DEL		)
587		IDE		this
587		DEL		{
588		IDE		this
588		DEL		.
588		IDE		addSelect
588		DEL		(
588		IDE		alias
588		DEL		)
588		DEL		;
589		IDE		this
589		DEL		.
589		IDE		join
589		DEL		(
589		CAD		"LEFT"
589		DEL		,
589		IDE		entityOrProperty
589		DEL		,
589		IDE		alias
589		DEL		,
589		IDE		condition
589		DEL		,
589		IDE		parameters
589		DEL		,
589		IDE		mapToProperty
589		DEL		,
589		PRE		false
589		DEL		)
589		DEL		;
590		PRE		return
590		IDE		this
590		DEL		;
591		DEL		}
620		IDE		loadRelationIdAndMap
620		DEL		(
620		IDE		mapToProperty
620		PRE		string
620		DEL		,
620		IDE		relationName
620		PRE		string
620		DEL		,
620		IDE		options
620		DEL		{
620		IDE		disableMixedMap
620		PRE		boolean
620		DEL		}
620		DEL		)
620		IDE		this
620		DEL		;
626		IDE		loadRelationIdAndMap
626		DEL		(
626		IDE		mapToProperty
626		PRE		string
626		DEL		,
626		IDE		relationName
626		PRE		string
626		DEL		,
626		IDE		alias
626		PRE		string
626		DEL		,
626		IDE		queryBuilderFactory
626		DEL		(
626		IDE		qb
626		IDE		SelectQueryBuilder
626		REL		<
626		IDE		any
626		REL		>
626		DEL		)
626		REL		=
626		REL		>
626		IDE		SelectQueryBuilder
626		REL		<
626		IDE		any
626		REL		>
626		DEL		)
626		IDE		this
626		DEL		;
632		IDE		loadRelationIdAndMap
632		DEL		(
632		IDE		mapToProperty
632		PRE		string
632		DEL		,
633		IDE		relationName
633		PRE		string
633		DEL		,
634		IDE		aliasNameOrOptions
634		PRE		string
634		DEL		{
634		IDE		disableMixedMap
634		PRE		boolean
634		DEL		}
634		DEL		,
635		IDE		queryBuilderFactory
635		DEL		(
635		IDE		qb
635		IDE		SelectQueryBuilder
635		REL		<
635		IDE		any
635		REL		>
635		DEL		)
635		REL		=
635		REL		>
635		IDE		SelectQueryBuilder
635		REL		<
635		IDE		any
635		REL		>
635		DEL		)
635		IDE		this
635		DEL		{
637		PRE		const
637		IDE		relationIdAttribute
637		REL		=
637		IDE		new
637		IDE		RelationIdAttribute
637		DEL		(
637		IDE		this
637		DEL		.
637		IDE		expressionMap
637		DEL		)
637		DEL		;
638		IDE		relationIdAttribute
638		DEL		.
638		IDE		mapToProperty
638		REL		=
638		IDE		mapToProperty
638		DEL		;
639		IDE		relationIdAttribute
639		DEL		.
639		IDE		relationName
639		REL		=
639		IDE		relationName
639		DEL		;
640		PRE		if
640		DEL		(
640		IDE		typeof
640		IDE		aliasNameOrOptions
640		REL		==
640		REL		=
640		CAD		"string"
640		DEL		)
641		IDE		relationIdAttribute
641		DEL		.
641		IDE		alias
641		REL		=
641		IDE		aliasNameOrOptions
641		DEL		;
642		PRE		if
642		DEL		(
642		IDE		aliasNameOrOptions
642		IDE		instanceof
642		IDE		Object
642		LOG		&&
642		DEL		(
642		IDE		aliasNameOrOptions
642		IDE		as
642		IDE		any
642		DEL		)
642		DEL		.
642		IDE		disableMixedMap
642		DEL		)
643		IDE		relationIdAttribute
643		DEL		.
643		IDE		disableMixedMap
643		REL		=
643		PRE		true
643		DEL		;
645		IDE		relationIdAttribute
645		DEL		.
645		IDE		queryBuilderFactory
645		REL		=
645		IDE		queryBuilderFactory
645		DEL		;
646		IDE		this
646		DEL		.
646		IDE		expressionMap
646		DEL		.
646		IDE		relationIdAttributes
646		DEL		.
646		IDE		push
646		DEL		(
646		IDE		relationIdAttribute
646		DEL		)
646		DEL		;
648		PRE		if
648		DEL		(
648		IDE		relationIdAttribute
648		DEL		.
648		IDE		relation
648		DEL		.
648		IDE		junctionEntityMetadata
648		DEL		)
648		DEL		{
649		IDE		this
649		DEL		.
649		IDE		expressionMap
649		DEL		.
649		IDE		createAlias
649		DEL		(
649		DEL		{
650		IDE		type
650		CAD		"other"
650		DEL		,
651		IDE		name
651		IDE		relationIdAttribute
651		DEL		.
651		IDE		junctionAlias
651		DEL		,
652		IDE		metadata
652		IDE		relationIdAttribute
652		DEL		.
652		IDE		relation
652		DEL		.
652		IDE		junctionEntityMetadata
653		DEL		}
653		DEL		)
653		DEL		;
654		DEL		}
655		PRE		return
655		IDE		this
655		DEL		;
656		DEL		}
662		IDE		loadRelationCountAndMap
662		DEL		(
662		IDE		mapToProperty
662		PRE		string
662		DEL		,
662		IDE		relationName
662		PRE		string
662		DEL		,
662		IDE		aliasName
662		PRE		string
662		DEL		,
662		IDE		queryBuilderFactory
662		DEL		(
662		IDE		qb
662		IDE		SelectQueryBuilder
662		REL		<
662		IDE		any
662		REL		>
662		DEL		)
662		REL		=
662		REL		>
662		IDE		SelectQueryBuilder
662		REL		<
662		IDE		any
662		REL		>
662		DEL		)
662		IDE		this
662		DEL		{
663		PRE		const
663		IDE		relationCountAttribute
663		REL		=
663		IDE		new
663		IDE		RelationCountAttribute
663		DEL		(
663		IDE		this
663		DEL		.
663		IDE		expressionMap
663		DEL		)
663		DEL		;
664		IDE		relationCountAttribute
664		DEL		.
664		IDE		mapToProperty
664		REL		=
664		IDE		mapToProperty
664		DEL		;
665		IDE		relationCountAttribute
665		DEL		.
665		IDE		relationName
665		REL		=
665		IDE		relationName
665		DEL		;
666		IDE		relationCountAttribute
666		DEL		.
666		IDE		alias
666		REL		=
666		IDE		aliasName
666		DEL		;
667		IDE		relationCountAttribute
667		DEL		.
667		IDE		queryBuilderFactory
667		REL		=
667		IDE		queryBuilderFactory
667		DEL		;
668		IDE		this
668		DEL		.
668		IDE		expressionMap
668		DEL		.
668		IDE		relationCountAttributes
668		DEL		.
668		IDE		push
668		DEL		(
668		IDE		relationCountAttribute
668		DEL		)
668		DEL		;
670		IDE		this
670		DEL		.
670		IDE		expressionMap
670		DEL		.
670		IDE		createAlias
670		DEL		(
670		DEL		{
671		IDE		type
671		CAD		"other"
671		DEL		,
672		IDE		name
672		IDE		relationCountAttribute
672		DEL		.
672		IDE		junctionAlias
673		DEL		}
673		DEL		)
673		DEL		;
674		PRE		if
674		DEL		(
674		IDE		relationCountAttribute
674		DEL		.
674		IDE		relation
674		DEL		.
674		IDE		junctionEntityMetadata
674		DEL		)
674		DEL		{
675		IDE		this
675		DEL		.
675		IDE		expressionMap
675		DEL		.
675		IDE		createAlias
675		DEL		(
675		DEL		{
676		IDE		type
676		CAD		"other"
676		DEL		,
677		IDE		name
677		IDE		relationCountAttribute
677		DEL		.
677		IDE		junctionAlias
677		DEL		,
678		IDE		metadata
678		IDE		relationCountAttribute
678		DEL		.
678		IDE		relation
678		DEL		.
678		IDE		junctionEntityMetadata
679		DEL		}
679		DEL		)
679		DEL		;
680		DEL		}
681		PRE		return
681		IDE		this
681		DEL		;
682		DEL		}
689		IDE		loadAllRelationIds
689		DEL		(
689		IDE		options
689		DEL		{
689		IDE		relations
689		PRE		string
689		DEL		[
689		DEL		]
689		DEL		,
689		IDE		disableMixedMap
689		PRE		boolean
689		DEL		}
689		DEL		)
689		IDE		this
689		DEL		{
690		IDE		this
690		DEL		.
690		IDE		expressionMap
690		DEL		.
690		IDE		mainAlias
690		LOG		!
690		DEL		.
690		IDE		metadata
690		DEL		.
690		IDE		relations
690		DEL		.
690		IDE		forEach
690		DEL		(
690		IDE		relation
690		REL		=
690		REL		>
690		DEL		{
691		PRE		if
691		DEL		(
691		IDE		options
691		REL		!=
691		REL		=
691		IDE		undefined
691		LOG		&&
691		IDE		options
691		DEL		.
691		IDE		relations
691		REL		!=
691		REL		=
691		IDE		undefined
691		LOG		&&
691		IDE		options
691		DEL		.
691		IDE		relations
691		DEL		.
691		IDE		indexOf
691		DEL		(
691		IDE		relation
691		DEL		.
691		IDE		propertyPath
691		DEL		)
691		REL		==
691		REL		=
691		ART		-
691		NRO		1
691		DEL		)
692		PRE		return
692		DEL		;
694		IDE		this
694		DEL		.
694		IDE		loadRelationIdAndMap
694		DEL		(
695		IDE		this
695		DEL		.
695		IDE		expressionMap
695		DEL		.
695		IDE		mainAlias
695		LOG		!
695		DEL		.
695		IDE		name
695		ART		+
695		CAD		"."
695		ART		+
695		IDE		relation
695		DEL		.
695		IDE		propertyPath
695		DEL		,
696		IDE		this
696		DEL		.
696		IDE		expressionMap
696		DEL		.
696		IDE		mainAlias
696		LOG		!
696		DEL		.
696		IDE		name
696		ART		+
696		CAD		"."
696		ART		+
696		IDE		relation
696		DEL		.
696		IDE		propertyPath
696		DEL		,
697		IDE		options
698		DEL		)
698		DEL		;
699		DEL		}
699		DEL		)
699		DEL		;
700		PRE		return
700		IDE		this
700		DEL		;
701		DEL		}
709		IDE		where
709		DEL		(
709		IDE		where
709		IDE		Bracketsstring
709		DEL		(
709		DEL		(
709		IDE		qb
709		IDE		this
709		DEL		)
709		REL		=
709		REL		>
709		PRE		string
709		DEL		)
709		IDE		ObjectLiteralObjectLiteral
709		DEL		[
709		DEL		]
709		DEL		,
709		IDE		parameters
709		IDE		ObjectLiteral
709		DEL		)
709		IDE		this
709		DEL		{
710		IDE		this
710		DEL		.
710		IDE		expressionMap
710		DEL		.
710		IDE		wheres
710		REL		=
710		DEL		[
710		DEL		]
710		DEL		;
711		PRE		const
711		IDE		condition
711		REL		=
711		IDE		this
711		DEL		.
711		IDE		computeWhereParameter
711		DEL		(
711		IDE		where
711		DEL		)
711		DEL		;
712		PRE		if
712		DEL		(
712		IDE		condition
712		DEL		)
713		IDE		this
713		DEL		.
713		IDE		expressionMap
713		DEL		.
713		IDE		wheres
713		REL		=
713		DEL		[
713		DEL		{
713		IDE		type
713		CAD		"simple"
713		DEL		,
713		IDE		condition
713		IDE		condition
713		DEL		}
713		DEL		]
713		DEL		;
714		PRE		if
714		DEL		(
714		IDE		parameters
714		DEL		)
715		IDE		this
715		DEL		.
715		IDE		setParameters
715		DEL		(
715		IDE		parameters
715		DEL		)
715		DEL		;
716		PRE		return
716		IDE		this
716		DEL		;
717		DEL		}
723		IDE		andWhere
723		DEL		(
723		IDE		where
723		IDE		stringBrackets
723		DEL		(
723		DEL		(
723		IDE		qb
723		IDE		this
723		DEL		)
723		REL		=
723		REL		>
723		PRE		string
723		DEL		)
723		DEL		,
723		IDE		parameters
723		IDE		ObjectLiteral
723		DEL		)
723		IDE		this
723		DEL		{
724		IDE		this
724		DEL		.
724		IDE		expressionMap
724		DEL		.
724		IDE		wheres
724		DEL		.
724		IDE		push
724		DEL		(
724		DEL		{
724		IDE		type
724		CAD		"and"
724		DEL		,
724		IDE		condition
724		IDE		this
724		DEL		.
724		IDE		computeWhereParameter
724		DEL		(
724		IDE		where
724		DEL		)
724		DEL		}
724		DEL		)
724		DEL		;
725		PRE		if
725		DEL		(
725		IDE		parameters
725		DEL		)
725		IDE		this
725		DEL		.
725		IDE		setParameters
725		DEL		(
725		IDE		parameters
725		DEL		)
725		DEL		;
726		PRE		return
726		IDE		this
726		DEL		;
727		DEL		}
733		IDE		orWhere
733		DEL		(
733		IDE		where
733		IDE		Bracketsstring
733		DEL		(
733		DEL		(
733		IDE		qb
733		IDE		this
733		DEL		)
733		REL		=
733		REL		>
733		PRE		string
733		DEL		)
733		DEL		,
733		IDE		parameters
733		IDE		ObjectLiteral
733		DEL		)
733		IDE		this
733		DEL		{
734		IDE		this
734		DEL		.
734		IDE		expressionMap
734		DEL		.
734		IDE		wheres
734		DEL		.
734		IDE		push
734		DEL		(
734		DEL		{
734		IDE		type
734		CAD		"or"
734		DEL		,
734		IDE		condition
734		IDE		this
734		DEL		.
734		IDE		computeWhereParameter
734		DEL		(
734		IDE		where
734		DEL		)
734		DEL		}
734		DEL		)
734		DEL		;
735		PRE		if
735		DEL		(
735		IDE		parameters
735		DEL		)
735		IDE		this
735		DEL		.
735		IDE		setParameters
735		DEL		(
735		IDE		parameters
735		DEL		)
735		DEL		;
736		PRE		return
736		IDE		this
736		DEL		;
737		DEL		}
747		IDE		whereInIds
747		DEL		(
747		IDE		ids
747		IDE		anyany
747		DEL		[
747		DEL		]
747		DEL		)
747		IDE		this
747		DEL		{
748		PRE		return
748		IDE		this
748		DEL		.
748		IDE		where
748		DEL		(
748		IDE		this
748		DEL		.
748		IDE		createWhereIdsExpression
748		DEL		(
748		IDE		ids
748		DEL		)
748		DEL		)
748		DEL		;
749		DEL		}
759		IDE		andWhereInIds
759		DEL		(
759		IDE		ids
759		IDE		anyany
759		DEL		[
759		DEL		]
759		DEL		)
759		IDE		this
759		DEL		{
760		PRE		return
760		IDE		this
760		DEL		.
760		IDE		andWhere
760		DEL		(
760		IDE		this
760		DEL		.
760		IDE		createWhereIdsExpression
760		DEL		(
760		IDE		ids
760		DEL		)
760		DEL		)
760		DEL		;
761		DEL		}
771		IDE		orWhereInIds
771		DEL		(
771		IDE		ids
771		IDE		anyany
771		DEL		[
771		DEL		]
771		DEL		)
771		IDE		this
771		DEL		{
772		PRE		return
772		IDE		this
772		DEL		.
772		IDE		orWhere
772		DEL		(
772		IDE		this
772		DEL		.
772		IDE		createWhereIdsExpression
772		DEL		(
772		IDE		ids
772		DEL		)
772		DEL		)
772		DEL		;
773		DEL		}
781		IDE		having
781		DEL		(
781		IDE		having
781		PRE		string
781		DEL		,
781		IDE		parameters
781		IDE		ObjectLiteral
781		DEL		)
781		IDE		this
781		DEL		{
782		IDE		this
782		DEL		.
782		IDE		expressionMap
782		DEL		.
782		IDE		havings
782		DEL		.
782		IDE		push
782		DEL		(
782		DEL		{
782		IDE		type
782		CAD		"simple"
782		DEL		,
782		IDE		condition
782		IDE		having
782		DEL		}
782		DEL		)
782		DEL		;
783		PRE		if
783		DEL		(
783		IDE		parameters
783		DEL		)
783		IDE		this
783		DEL		.
783		IDE		setParameters
783		DEL		(
783		IDE		parameters
783		DEL		)
783		DEL		;
784		PRE		return
784		IDE		this
784		DEL		;
785		DEL		}
791		IDE		andHaving
791		DEL		(
791		IDE		having
791		PRE		string
791		DEL		,
791		IDE		parameters
791		IDE		ObjectLiteral
791		DEL		)
791		IDE		this
791		DEL		{
792		IDE		this
792		DEL		.
792		IDE		expressionMap
792		DEL		.
792		IDE		havings
792		DEL		.
792		IDE		push
792		DEL		(
792		DEL		{
792		IDE		type
792		CAD		"and"
792		DEL		,
792		IDE		condition
792		IDE		having
792		DEL		}
792		DEL		)
792		DEL		;
793		PRE		if
793		DEL		(
793		IDE		parameters
793		DEL		)
793		IDE		this
793		DEL		.
793		IDE		setParameters
793		DEL		(
793		IDE		parameters
793		DEL		)
793		DEL		;
794		PRE		return
794		IDE		this
794		DEL		;
795		DEL		}
801		IDE		orHaving
801		DEL		(
801		IDE		having
801		PRE		string
801		DEL		,
801		IDE		parameters
801		IDE		ObjectLiteral
801		DEL		)
801		IDE		this
801		DEL		{
802		IDE		this
802		DEL		.
802		IDE		expressionMap
802		DEL		.
802		IDE		havings
802		DEL		.
802		IDE		push
802		DEL		(
802		DEL		{
802		IDE		type
802		CAD		"or"
802		DEL		,
802		IDE		condition
802		IDE		having
802		DEL		}
802		DEL		)
802		DEL		;
803		PRE		if
803		DEL		(
803		IDE		parameters
803		DEL		)
803		IDE		this
803		DEL		.
803		IDE		setParameters
803		DEL		(
803		IDE		parameters
803		DEL		)
803		DEL		;
804		PRE		return
804		IDE		this
804		DEL		;
805		DEL		}
812		IDE		groupBy
812		DEL		(
812		DEL		)
812		IDE		this
812		DEL		;
819		IDE		groupBy
819		DEL		(
819		IDE		groupBy
819		PRE		string
819		DEL		)
819		IDE		this
819		DEL		;
826		IDE		groupBy
826		DEL		(
826		IDE		groupBy
826		PRE		string
826		DEL		)
826		IDE		this
826		DEL		{
827		PRE		if
827		DEL		(
827		IDE		groupBy
827		DEL		)
827		DEL		{
828		IDE		this
828		DEL		.
828		IDE		expressionMap
828		DEL		.
828		IDE		groupBys
828		REL		=
828		DEL		[
828		IDE		groupBy
828		DEL		]
828		DEL		;
829		DEL		}
829		PRE		else
829		DEL		{
830		IDE		this
830		DEL		.
830		IDE		expressionMap
830		DEL		.
830		IDE		groupBys
830		REL		=
830		DEL		[
830		DEL		]
830		DEL		;
831		DEL		}
832		PRE		return
832		IDE		this
832		DEL		;
833		DEL		}
838		IDE		addGroupBy
838		DEL		(
838		IDE		groupBy
838		PRE		string
838		DEL		)
838		IDE		this
838		DEL		{
839		IDE		this
839		DEL		.
839		IDE		expressionMap
839		DEL		.
839		IDE		groupBys
839		DEL		.
839		IDE		push
839		DEL		(
839		IDE		groupBy
839		DEL		)
839		DEL		;
840		PRE		return
840		IDE		this
840		DEL		;
841		DEL		}
850		IDE		orderBy
850		DEL		(
850		DEL		)
850		IDE		this
850		DEL		;
857		IDE		orderBy
857		DEL		(
857		IDE		sort
857		PRE		string
857		DEL		,
857		IDE		order
857		CAD		"ASC""
857		IDE		DESC
857		CAD		", nulls "
857		IDE		NULLS
857		IDE		FIRST
857		CAD		""
857		IDE		NULLS
857		IDE		LAST
857		DEL		)
857		IDE		this
857		DEL		;
864		IDE		orderBy
864		DEL		(
864		IDE		order
864		IDE		OrderByCondition
864		DEL		)
864		IDE		this
864		DEL		;
871		IDE		orderBy
871		DEL		(
871		IDE		sort
871		IDE		stringOrderByCondition
871		DEL		,
871		IDE		order
871		CAD		"ASC""
871		IDE		DESC
871		CAD		" = "
871		IDE		ASC
871		CAD		", nulls "
871		IDE		NULLS
871		IDE		FIRST
871		CAD		""
871		IDE		NULLS
871		IDE		LAST
871		DEL		)
871		IDE		this
871		DEL		{
872		PRE		if
872		DEL		(
872		IDE		order
872		REL		!=
872		REL		=
872		IDE		undefined
872		LOG		&&
872		IDE		order
872		REL		!=
872		REL		=
872		CAD		"ASC"
872		LOG		&&
872		IDE		order
872		REL		!=
872		REL		=
872		CAD		"DESC"
872		DEL		)
873		IDE		throw
873		IDE		new
873		IDE		Error
873		DEL		(
873		IDE		SelectQueryBuilder
873		DEL		.
873		IDE		addOrderBy
873		CAD		"order"
873		IDE		can
873		IDE		accept
873		IDE		only
873		CAD		"ASC"
873		IDE		and
873		CAD		"DESC"
873		IDE		values
873		DEL		.
873		DEL		)
873		DEL		;
874		PRE		if
874		DEL		(
874		IDE		nulls
874		REL		!=
874		REL		=
874		IDE		undefined
874		LOG		&&
874		IDE		nulls
874		REL		!=
874		REL		=
874		CAD		"NULLS FIRST"
874		LOG		&&
874		IDE		nulls
874		REL		!=
874		REL		=
874		CAD		"NULLS LAST"
874		DEL		)
875		IDE		throw
875		IDE		new
875		IDE		Error
875		DEL		(
875		IDE		SelectQueryBuilder
875		DEL		.
875		IDE		addOrderBy
875		CAD		"nulls"
875		IDE		can
875		IDE		accept
875		IDE		only
875		CAD		"NULLS FIRST"
875		IDE		and
875		CAD		"NULLS LAST"
875		IDE		values
875		DEL		.
875		DEL		)
875		DEL		;
877		PRE		if
877		DEL		(
877		IDE		sort
877		DEL		)
877		DEL		{
878		PRE		if
878		DEL		(
878		IDE		sort
878		IDE		instanceof
878		IDE		Object
878		DEL		)
878		DEL		{
879		IDE		this
879		DEL		.
879		IDE		expressionMap
879		DEL		.
879		IDE		orderBys
879		REL		=
879		IDE		sort
879		IDE		as
879		IDE		OrderByCondition
879		DEL		;
880		DEL		}
880		PRE		else
880		DEL		{
881		PRE		if
881		DEL		(
881		IDE		nulls
881		DEL		)
881		DEL		{
882		IDE		this
882		DEL		.
882		IDE		expressionMap
882		DEL		.
882		IDE		orderBys
882		REL		=
882		DEL		{
882		DEL		[
882		IDE		sort
882		IDE		as
882		PRE		string
882		DEL		]
882		DEL		{
882		IDE		order
882		DEL		,
882		IDE		nulls
882		DEL		}
882		DEL		}
882		DEL		;
883		DEL		}
883		PRE		else
883		DEL		{
884		IDE		this
884		DEL		.
884		IDE		expressionMap
884		DEL		.
884		IDE		orderBys
884		REL		=
884		DEL		{
884		DEL		[
884		IDE		sort
884		IDE		as
884		PRE		string
884		DEL		]
884		IDE		order
884		DEL		}
884		DEL		;
885		DEL		}
886		DEL		}
887		DEL		}
887		PRE		else
887		DEL		{
888		IDE		this
888		DEL		.
888		IDE		expressionMap
888		DEL		.
888		IDE		orderBys
888		REL		=
888		DEL		{
888		DEL		}
888		DEL		;
889		DEL		}
890		PRE		return
890		IDE		this
890		DEL		;
891		DEL		}
896		IDE		addOrderBy
896		DEL		(
896		IDE		sort
896		PRE		string
896		DEL		,
896		IDE		order
896		CAD		"ASC""
896		IDE		DESC
896		CAD		" = "
896		IDE		ASC
896		CAD		", nulls "
896		IDE		NULLS
896		IDE		FIRST
896		CAD		""
896		IDE		NULLS
896		IDE		LAST
896		DEL		)
896		IDE		this
896		DEL		{
897		PRE		if
897		DEL		(
897		IDE		order
897		REL		!=
897		REL		=
897		IDE		undefined
897		LOG		&&
897		IDE		order
897		REL		!=
897		REL		=
897		CAD		"ASC"
897		LOG		&&
897		IDE		order
897		REL		!=
897		REL		=
897		CAD		"DESC"
897		DEL		)
898		IDE		throw
898		IDE		new
898		IDE		Error
898		DEL		(
898		IDE		SelectQueryBuilder
898		DEL		.
898		IDE		addOrderBy
898		CAD		"order"
898		IDE		can
898		IDE		accept
898		IDE		only
898		CAD		"ASC"
898		IDE		and
898		CAD		"DESC"
898		IDE		values
898		DEL		.
898		DEL		)
898		DEL		;
899		PRE		if
899		DEL		(
899		IDE		nulls
899		REL		!=
899		REL		=
899		IDE		undefined
899		LOG		&&
899		IDE		nulls
899		REL		!=
899		REL		=
899		CAD		"NULLS FIRST"
899		LOG		&&
899		IDE		nulls
899		REL		!=
899		REL		=
899		CAD		"NULLS LAST"
899		DEL		)
900		IDE		throw
900		IDE		new
900		IDE		Error
900		DEL		(
900		IDE		SelectQueryBuilder
900		DEL		.
900		IDE		addOrderBy
900		CAD		"nulls"
900		IDE		can
900		IDE		accept
900		IDE		only
900		CAD		"NULLS FIRST"
900		IDE		and
900		CAD		"NULLS LAST"
900		IDE		values
900		DEL		.
900		DEL		)
900		DEL		;
902		PRE		if
902		DEL		(
902		IDE		nulls
902		DEL		)
902		DEL		{
903		IDE		this
903		DEL		.
903		IDE		expressionMap
903		DEL		.
903		IDE		orderBys
903		DEL		[
903		IDE		sort
903		DEL		]
903		REL		=
903		DEL		{
903		IDE		order
903		DEL		,
903		IDE		nulls
903		DEL		}
903		DEL		;
904		DEL		}
904		PRE		else
904		DEL		{
905		IDE		this
905		DEL		.
905		IDE		expressionMap
905		DEL		.
905		IDE		orderBys
905		DEL		[
905		IDE		sort
905		DEL		]
905		REL		=
905		IDE		order
905		DEL		;
906		DEL		}
907		PRE		return
907		IDE		this
907		DEL		;
908		DEL		}
916		IDE		limit
916		DEL		(
916		IDE		limit
916		IDE		number
916		DEL		)
916		IDE		this
916		DEL		{
917		IDE		this
917		DEL		.
917		IDE		expressionMap
917		DEL		.
917		IDE		limit
917		REL		=
917		IDE		this
917		DEL		.
917		IDE		normalizeNumber
917		DEL		(
917		IDE		limit
917		DEL		)
917		DEL		;
918		PRE		if
918		DEL		(
918		IDE		this
918		DEL		.
918		IDE		expressionMap
918		DEL		.
918		IDE		limit
918		REL		!=
918		REL		=
918		IDE		undefined
918		LOG		&&
918		IDE		isNaN
918		DEL		(
918		IDE		this
918		DEL		.
918		IDE		expressionMap
918		DEL		.
918		IDE		limit
918		DEL		)
918		DEL		)
919		IDE		throw
919		IDE		new
919		IDE		Error
919		DEL		(
919		IDE		Provided
919		CAD		"limit"
919		IDE		value
919		IDE		is
919		IDE		not
919		IDE		a
919		IDE		number
919		DEL		.
919		IDE		Please
919		IDE		provide
919		IDE		a
919		IDE		numeric
919		IDE		value
919		DEL		.
919		DEL		)
919		DEL		;
921		PRE		return
921		IDE		this
921		DEL		;
922		DEL		}
930		IDE		offset
930		DEL		(
930		IDE		offset
930		IDE		number
930		DEL		)
930		IDE		this
930		DEL		{
931		IDE		this
931		DEL		.
931		IDE		expressionMap
931		DEL		.
931		IDE		offset
931		REL		=
931		IDE		this
931		DEL		.
931		IDE		normalizeNumber
931		DEL		(
931		IDE		offset
931		DEL		)
931		DEL		;
932		PRE		if
932		DEL		(
932		IDE		this
932		DEL		.
932		IDE		expressionMap
932		DEL		.
932		IDE		offset
932		REL		!=
932		REL		=
932		IDE		undefined
932		LOG		&&
932		IDE		isNaN
932		DEL		(
932		IDE		this
932		DEL		.
932		IDE		expressionMap
932		DEL		.
932		IDE		offset
932		DEL		)
932		DEL		)
933		IDE		throw
933		IDE		new
933		IDE		Error
933		DEL		(
933		IDE		Provided
933		CAD		"offset"
933		IDE		value
933		IDE		is
933		IDE		not
933		IDE		a
933		IDE		number
933		DEL		.
933		IDE		Please
933		IDE		provide
933		IDE		a
933		IDE		numeric
933		IDE		value
933		DEL		.
933		DEL		)
933		DEL		;
935		PRE		return
935		IDE		this
935		DEL		;
936		DEL		}
941		IDE		take
941		DEL		(
941		IDE		take
941		IDE		number
941		DEL		)
941		IDE		this
941		DEL		{
942		IDE		this
942		DEL		.
942		IDE		expressionMap
942		DEL		.
942		IDE		take
942		REL		=
942		IDE		this
942		DEL		.
942		IDE		normalizeNumber
942		DEL		(
942		IDE		take
942		DEL		)
942		DEL		;
943		PRE		if
943		DEL		(
943		IDE		this
943		DEL		.
943		IDE		expressionMap
943		DEL		.
943		IDE		take
943		REL		!=
943		REL		=
943		IDE		undefined
943		LOG		&&
943		IDE		isNaN
943		DEL		(
943		IDE		this
943		DEL		.
943		IDE		expressionMap
943		DEL		.
943		IDE		take
943		DEL		)
943		DEL		)
944		IDE		throw
944		IDE		new
944		IDE		Error
944		DEL		(
944		IDE		Provided
944		CAD		"take"
944		IDE		value
944		IDE		is
944		IDE		not
944		IDE		a
944		IDE		number
944		DEL		.
944		IDE		Please
944		IDE		provide
944		IDE		a
944		IDE		numeric
944		IDE		value
944		DEL		.
944		DEL		)
944		DEL		;
946		PRE		return
946		IDE		this
946		DEL		;
947		DEL		}
952		IDE		skip
952		DEL		(
952		IDE		skip
952		IDE		number
952		DEL		)
952		IDE		this
952		DEL		{
953		IDE		this
953		DEL		.
953		IDE		expressionMap
953		DEL		.
953		IDE		skip
953		REL		=
953		IDE		this
953		DEL		.
953		IDE		normalizeNumber
953		DEL		(
953		IDE		skip
953		DEL		)
953		DEL		;
954		PRE		if
954		DEL		(
954		IDE		this
954		DEL		.
954		IDE		expressionMap
954		DEL		.
954		IDE		skip
954		REL		!=
954		REL		=
954		IDE		undefined
954		LOG		&&
954		IDE		isNaN
954		DEL		(
954		IDE		this
954		DEL		.
954		IDE		expressionMap
954		DEL		.
954		IDE		skip
954		DEL		)
954		DEL		)
955		IDE		throw
955		IDE		new
955		IDE		Error
955		DEL		(
955		IDE		Provided
955		CAD		"skip"
955		IDE		value
955		IDE		is
955		IDE		not
955		IDE		a
955		IDE		number
955		DEL		.
955		IDE		Please
955		IDE		provide
955		IDE		a
955		IDE		numeric
955		IDE		value
955		DEL		.
955		DEL		)
955		DEL		;
957		PRE		return
957		IDE		this
957		DEL		;
958		DEL		}
963		IDE		setLock
963		DEL		(
963		IDE		lockMode
963		CAD		"optimistic"
963		DEL		,
963		IDE		lockVersion
963		IDE		number
963		IDE		Date
963		DEL		)
963		IDE		this
963		DEL		;
968		IDE		setLock
968		DEL		(
968		IDE		lockMode
968		CAD		"pessimisticread""
968		IDE		pessimisticwrite
968		CAD		""
968		IDE		dirtyread
968		CAD		""
968		IDE		pessimisticpartialwrite
968		CAD		""
968		IDE		pessimisticwriteorfail
968		CAD		""
968		IDE		fornokeyupdate
968		DEL		,
968		IDE		lockVersion
968		IDE		undefined
968		DEL		,
968		IDE		lockTables
968		PRE		string
968		DEL		[
968		DEL		]
968		DEL		)
968		IDE		this
968		DEL		;
973		IDE		setLock
973		DEL		(
973		IDE		lockMode
973		CAD		"optimistic""
973		IDE		pessimisticread
973		CAD		""
973		IDE		pessimisticwrite
973		CAD		""
973		IDE		dirtyread
973		CAD		""
973		IDE		pessimisticpartialwrite
973		CAD		""
973		IDE		pessimisticwriteorfail
973		CAD		""
973		IDE		fornokeyupdate
973		DEL		,
973		IDE		lockVersion
973		IDE		numberDate
973		DEL		,
973		IDE		lockTables
973		PRE		string
973		DEL		[
973		DEL		]
973		DEL		)
973		IDE		this
973		DEL		{
974		IDE		this
974		DEL		.
974		IDE		expressionMap
974		DEL		.
974		IDE		lockMode
974		REL		=
974		IDE		lockMode
974		DEL		;
975		IDE		this
975		DEL		.
975		IDE		expressionMap
975		DEL		.
975		IDE		lockVersion
975		REL		=
975		IDE		lockVersion
975		DEL		;
976		IDE		this
976		DEL		.
976		IDE		expressionMap
976		DEL		.
976		IDE		lockTables
976		REL		=
976		IDE		lockTables
976		DEL		;
977		PRE		return
977		IDE		this
977		DEL		;
978		DEL		}
983		IDE		withDeleted
983		DEL		(
983		DEL		)
983		IDE		this
983		DEL		{
984		IDE		this
984		DEL		.
984		IDE		expressionMap
984		DEL		.
984		IDE		withDeleted
984		REL		=
984		PRE		true
984		DEL		;
985		PRE		return
985		IDE		this
985		DEL		;
986		DEL		}
991		IDE		async
991		IDE		getRawOne
991		REL		<
991		IDE		T
991		REL		=
991		IDE		any
991		REL		>
991		DEL		(
991		DEL		)
991		IDE		Promise
991		REL		<
991		IDE		T
991		REL		>
991		DEL		{
992		PRE		return
992		DEL		(
992		IDE		await
992		IDE		this
992		DEL		.
992		IDE		getRawMany
992		DEL		(
992		DEL		)
992		DEL		)
992		DEL		[
992		NRO		0
992		DEL		]
992		DEL		;
993		DEL		}
998		IDE		async
998		IDE		getRawMany
998		REL		<
998		IDE		T
998		REL		=
998		IDE		any
998		REL		>
998		DEL		(
998		DEL		)
998		IDE		Promise
998		REL		<
998		IDE		T
998		DEL		[
998		DEL		]
998		REL		>
998		DEL		{
999		PRE		if
999		DEL		(
999		IDE		this
999		DEL		.
999		IDE		expressionMap
999		DEL		.
999		IDE		lockMode
999		REL		==
999		REL		=
999		CAD		"optimistic"
999		DEL		)
1000		IDE		throw
1000		IDE		new
1000		IDE		OptimisticLockCanNotBeUsedError
1000		DEL		(
1000		DEL		)
1000		DEL		;
1002		IDE		this
1002		DEL		.
1002		IDE		expressionMap
1002		DEL		.
1002		IDE		queryEntity
1002		REL		=
1002		PRE		false
1002		DEL		;
1003		PRE		const
1003		IDE		queryRunner
1003		REL		=
1003		IDE		this
1003		DEL		.
1003		IDE		obtainQueryRunner
1003		DEL		(
1003		DEL		)
1003		DEL		;
1004		IDE		let
1004		IDE		transactionStartedByUs
1004		PRE		boolean
1004		REL		=
1004		PRE		false
1004		DEL		;
1005		IDE		try
1005		DEL		{
1008		PRE		if
1008		DEL		(
1008		IDE		this
1008		DEL		.
1008		IDE		expressionMap
1008		DEL		.
1008		IDE		useTransaction
1008		REL		==
1008		REL		=
1008		PRE		true
1008		LOG		&&
1008		IDE		queryRunner
1008		DEL		.
1008		IDE		isTransactionActive
1008		REL		==
1008		REL		=
1008		PRE		false
1008		DEL		)
1008		DEL		{
1009		IDE		await
1009		IDE		queryRunner
1009		DEL		.
1009		IDE		startTransaction
1009		DEL		(
1009		DEL		)
1009		DEL		;
1010		IDE		transactionStartedByUs
1010		REL		=
1010		PRE		true
1010		DEL		;
1011		DEL		}
1013		PRE		const
1013		IDE		results
1013		REL		=
1013		IDE		await
1013		IDE		this
1013		DEL		.
1013		IDE		loadRawResults
1013		DEL		(
1013		IDE		queryRunner
1013		DEL		)
1013		DEL		;
1016		PRE		if
1016		DEL		(
1016		IDE		transactionStartedByUs
1016		DEL		)
1016		DEL		{
1017		IDE		await
1017		IDE		queryRunner
1017		DEL		.
1017		IDE		commitTransaction
1017		DEL		(
1017		DEL		)
1017		DEL		;
1018		DEL		}
1020		PRE		return
1020		IDE		results
1020		DEL		;
1022		DEL		}
1022		IDE		catch
1022		DEL		(
1022		IDE		error
1022		DEL		)
1022		DEL		{
1025		PRE		if
1025		DEL		(
1025		IDE		transactionStartedByUs
1025		DEL		)
1025		DEL		{
1026		IDE		try
1026		DEL		{
1027		IDE		await
1027		IDE		queryRunner
1027		DEL		.
1027		IDE		rollbackTransaction
1027		DEL		(
1027		DEL		)
1027		DEL		;
1028		DEL		}
1028		IDE		catch
1028		DEL		(
1028		IDE		rollbackError
1028		DEL		)
1028		DEL		{
1028		DEL		}
1029		DEL		}
1030		IDE		throw
1030		IDE		error
1030		DEL		;
1032		DEL		}
1032		IDE		finally
1032		DEL		{
1033		PRE		if
1033		DEL		(
1033		IDE		queryRunner
1033		REL		!=
1033		REL		=
1033		IDE		this
1033		DEL		.
1033		IDE		queryRunner
1033		DEL		)
1033		DEL		{
1034		IDE		await
1034		IDE		queryRunner
1034		DEL		.
1034		IDE		release
1034		DEL		(
1034		DEL		)
1034		DEL		;
1035		DEL		}
1036		DEL		}
1037		DEL		}
1042		IDE		async
1042		IDE		getRawAndEntities
1042		REL		<
1042		IDE		T
1042		REL		=
1042		IDE		any
1042		REL		>
1042		DEL		(
1042		DEL		)
1042		IDE		Promise
1042		REL		<
1042		DEL		{
1042		IDE		entities
1042		IDE		Entity
1042		DEL		[
1042		DEL		]
1042		DEL		,
1042		IDE		raw
1042		IDE		T
1042		DEL		[
1042		DEL		]
1042		DEL		}
1042		REL		>
1042		DEL		{
1043		PRE		const
1043		IDE		queryRunner
1043		REL		=
1043		IDE		this
1043		DEL		.
1043		IDE		obtainQueryRunner
1043		DEL		(
1043		DEL		)
1043		DEL		;
1044		IDE		let
1044		IDE		transactionStartedByUs
1044		PRE		boolean
1044		REL		=
1044		PRE		false
1044		DEL		;
1045		IDE		try
1045		DEL		{
1048		PRE		if
1048		DEL		(
1048		IDE		this
1048		DEL		.
1048		IDE		expressionMap
1048		DEL		.
1048		IDE		useTransaction
1048		REL		==
1048		REL		=
1048		PRE		true
1048		LOG		&&
1048		IDE		queryRunner
1048		DEL		.
1048		IDE		isTransactionActive
1048		REL		==
1048		REL		=
1048		PRE		false
1048		DEL		)
1048		DEL		{
1049		IDE		await
1049		IDE		queryRunner
1049		DEL		.
1049		IDE		startTransaction
1049		DEL		(
1049		DEL		)
1049		DEL		;
1050		IDE		transactionStartedByUs
1050		REL		=
1050		PRE		true
1050		DEL		;
1051		DEL		}
1053		IDE		this
1053		DEL		.
1053		IDE		expressionMap
1053		DEL		.
1053		IDE		queryEntity
1053		REL		=
1053		PRE		true
1053		DEL		;
1054		PRE		const
1054		IDE		results
1054		REL		=
1054		IDE		await
1054		IDE		this
1054		DEL		.
1054		IDE		executeEntitiesAndRawResults
1054		DEL		(
1054		IDE		queryRunner
1054		DEL		)
1054		DEL		;
1057		PRE		if
1057		DEL		(
1057		IDE		transactionStartedByUs
1057		DEL		)
1057		DEL		{
1058		IDE		await
1058		IDE		queryRunner
1058		DEL		.
1058		IDE		commitTransaction
1058		DEL		(
1058		DEL		)
1058		DEL		;
1059		DEL		}
1061		PRE		return
1061		IDE		results
1061		DEL		;
1063		DEL		}
1063		IDE		catch
1063		DEL		(
1063		IDE		error
1063		DEL		)
1063		DEL		{
1066		PRE		if
1066		DEL		(
1066		IDE		transactionStartedByUs
1066		DEL		)
1066		DEL		{
1067		IDE		try
1067		DEL		{
1068		IDE		await
1068		IDE		queryRunner
1068		DEL		.
1068		IDE		rollbackTransaction
1068		DEL		(
1068		DEL		)
1068		DEL		;
1069		DEL		}
1069		IDE		catch
1069		DEL		(
1069		IDE		rollbackError
1069		DEL		)
1069		DEL		{
1069		DEL		}
1070		DEL		}
1071		IDE		throw
1071		IDE		error
1071		DEL		;
1073		DEL		}
1073		IDE		finally
1073		DEL		{
1074		PRE		if
1074		DEL		(
1074		IDE		queryRunner
1074		REL		!=
1074		REL		=
1074		IDE		this
1074		DEL		.
1074		IDE		queryRunner
1074		DEL		)
1075		IDE		await
1075		IDE		queryRunner
1075		DEL		.
1075		IDE		release
1075		DEL		(
1075		DEL		)
1075		DEL		;
1076		DEL		}
1077		DEL		}
1082		IDE		async
1082		IDE		getOne
1082		DEL		(
1082		DEL		)
1082		IDE		Promise
1082		REL		<
1082		IDE		Entityundefined
1082		REL		>
1082		DEL		{
1083		PRE		const
1083		IDE		results
1083		REL		=
1083		IDE		await
1083		IDE		this
1083		DEL		.
1083		IDE		getRawAndEntities
1083		DEL		(
1083		DEL		)
1083		DEL		;
1084		PRE		const
1084		IDE		result
1084		REL		=
1084		IDE		results
1084		DEL		.
1084		IDE		entities
1084		DEL		[
1084		NRO		0
1084		DEL		]
1084		IDE		as
1084		IDE		any
1084		DEL		;
1086		PRE		if
1086		DEL		(
1086		IDE		result
1086		LOG		&&
1086		IDE		this
1086		DEL		.
1086		IDE		expressionMap
1086		DEL		.
1086		IDE		lockMode
1086		REL		==
1086		REL		=
1086		CAD		"optimistic"
1086		LOG		&&
1086		IDE		this
1086		DEL		.
1086		IDE		expressionMap
1086		DEL		.
1086		IDE		lockVersion
1086		DEL		)
1086		DEL		{
1087		PRE		const
1087		IDE		metadata
1087		REL		=
1087		IDE		this
1087		DEL		.
1087		IDE		expressionMap
1087		DEL		.
1087		IDE		mainAlias
1087		LOG		!
1087		DEL		.
1087		IDE		metadata
1087		DEL		;
1089		PRE		if
1089		DEL		(
1089		IDE		this
1089		DEL		.
1089		IDE		expressionMap
1089		DEL		.
1089		IDE		lockVersion
1089		IDE		instanceof
1089		IDE		Date
1089		DEL		)
1089		DEL		{
1090		PRE		const
1090		IDE		actualVersion
1090		REL		=
1090		IDE		metadata
1090		DEL		.
1090		IDE		updateDateColumn
1090		LOG		!
1090		DEL		.
1090		IDE		getEntityValue
1090		DEL		(
1090		IDE		result
1090		DEL		)
1090		DEL		;
1091		PRE		if
1091		DEL		(
1091		IDE		actualVersion
1091		DEL		.
1091		IDE		getTime
1091		DEL		(
1091		DEL		)
1091		REL		!=
1091		REL		=
1091		IDE		this
1091		DEL		.
1091		IDE		expressionMap
1091		DEL		.
1091		IDE		lockVersion
1091		DEL		.
1091		IDE		getTime
1091		DEL		(
1091		DEL		)
1091		DEL		)
1092		IDE		throw
1092		IDE		new
1092		IDE		OptimisticLockVersionMismatchError
1092		DEL		(
1092		IDE		metadata
1092		DEL		.
1092		IDE		name
1092		DEL		,
1092		IDE		this
1092		DEL		.
1092		IDE		expressionMap
1092		DEL		.
1092		IDE		lockVersion
1092		DEL		,
1092		IDE		actualVersion
1092		DEL		)
1092		DEL		;
1094		DEL		}
1094		PRE		else
1094		DEL		{
1095		PRE		const
1095		IDE		actualVersion
1095		REL		=
1095		IDE		metadata
1095		DEL		.
1095		IDE		versionColumn
1095		LOG		!
1095		DEL		.
1095		IDE		getEntityValue
1095		DEL		(
1095		IDE		result
1095		DEL		)
1095		DEL		;
1096		PRE		if
1096		DEL		(
1096		IDE		actualVersion
1096		REL		!=
1096		REL		=
1096		IDE		this
1096		DEL		.
1096		IDE		expressionMap
1096		DEL		.
1096		IDE		lockVersion
1096		DEL		)
1097		IDE		throw
1097		IDE		new
1097		IDE		OptimisticLockVersionMismatchError
1097		DEL		(
1097		IDE		metadata
1097		DEL		.
1097		IDE		name
1097		DEL		,
1097		IDE		this
1097		DEL		.
1097		IDE		expressionMap
1097		DEL		.
1097		IDE		lockVersion
1097		DEL		,
1097		IDE		actualVersion
1097		DEL		)
1097		DEL		;
1098		DEL		}
1099		DEL		}
1101		PRE		return
1101		IDE		result
1101		DEL		;
1102		DEL		}
1107		IDE		async
1107		IDE		getOneOrFail
1107		DEL		(
1107		DEL		)
1107		IDE		Promise
1107		REL		<
1107		IDE		Entity
1107		REL		>
1107		DEL		{
1108		PRE		const
1108		IDE		entity
1108		REL		=
1108		IDE		await
1108		IDE		this
1108		DEL		.
1108		IDE		getOne
1108		DEL		(
1108		DEL		)
1108		DEL		;
1110		PRE		if
1110		DEL		(
1110		LOG		!
1110		IDE		entity
1110		DEL		)
1110		DEL		{
1111		IDE		throw
1111		IDE		new
1111		IDE		EntityNotFoundError
1111		DEL		(
1111		IDE		this
1111		DEL		.
1111		IDE		expressionMap
1111		DEL		.
1111		IDE		mainAlias
1111		LOG		!
1111		DEL		.
1111		IDE		target
1111		DEL		,
1111		IDE		this
1111		DEL		)
1111		DEL		;
1112		DEL		}
1114		PRE		return
1114		IDE		entity
1114		DEL		;
1115		DEL		}
1120		IDE		async
1120		IDE		getMany
1120		DEL		(
1120		DEL		)
1120		IDE		Promise
1120		REL		<
1120		IDE		Entity
1120		DEL		[
1120		DEL		]
1120		REL		>
1120		DEL		{
1121		PRE		if
1121		DEL		(
1121		IDE		this
1121		DEL		.
1121		IDE		expressionMap
1121		DEL		.
1121		IDE		lockMode
1121		REL		==
1121		REL		=
1121		CAD		"optimistic"
1121		DEL		)
1122		IDE		throw
1122		IDE		new
1122		IDE		OptimisticLockCanNotBeUsedError
1122		DEL		(
1122		DEL		)
1122		DEL		;
1124		PRE		const
1124		IDE		results
1124		REL		=
1124		IDE		await
1124		IDE		this
1124		DEL		.
1124		IDE		getRawAndEntities
1124		DEL		(
1124		DEL		)
1124		DEL		;
1125		PRE		return
1125		IDE		results
1125		DEL		.
1125		IDE		entities
1125		DEL		;
1126		DEL		}
1132		IDE		async
1132		IDE		getCount
1132		DEL		(
1132		DEL		)
1132		IDE		Promise
1132		REL		<
1132		IDE		number
1132		REL		>
1132		DEL		{
1133		PRE		if
1133		DEL		(
1133		IDE		this
1133		DEL		.
1133		IDE		expressionMap
1133		DEL		.
1133		IDE		lockMode
1133		REL		==
1133		REL		=
1133		CAD		"optimistic"
1133		DEL		)
1134		IDE		throw
1134		IDE		new
1134		IDE		OptimisticLockCanNotBeUsedError
1134		DEL		(
1134		DEL		)
1134		DEL		;
1136		PRE		const
1136		IDE		queryRunner
1136		REL		=
1136		IDE		this
1136		DEL		.
1136		IDE		obtainQueryRunner
1136		DEL		(
1136		DEL		)
1136		DEL		;
1137		IDE		let
1137		IDE		transactionStartedByUs
1137		PRE		boolean
1137		REL		=
1137		PRE		false
1137		DEL		;
1138		IDE		try
1138		DEL		{
1141		PRE		if
1141		DEL		(
1141		IDE		this
1141		DEL		.
1141		IDE		expressionMap
1141		DEL		.
1141		IDE		useTransaction
1141		REL		==
1141		REL		=
1141		PRE		true
1141		LOG		&&
1141		IDE		queryRunner
1141		DEL		.
1141		IDE		isTransactionActive
1141		REL		==
1141		REL		=
1141		PRE		false
1141		DEL		)
1141		DEL		{
1142		IDE		await
1142		IDE		queryRunner
1142		DEL		.
1142		IDE		startTransaction
1142		DEL		(
1142		DEL		)
1142		DEL		;
1143		IDE		transactionStartedByUs
1143		REL		=
1143		PRE		true
1143		DEL		;
1144		DEL		}
1146		IDE		this
1146		DEL		.
1146		IDE		expressionMap
1146		DEL		.
1146		IDE		queryEntity
1146		REL		=
1146		PRE		false
1146		DEL		;
1147		PRE		const
1147		IDE		results
1147		REL		=
1147		IDE		await
1147		IDE		this
1147		DEL		.
1147		IDE		executeCountQuery
1147		DEL		(
1147		IDE		queryRunner
1147		DEL		)
1147		DEL		;
1150		PRE		if
1150		DEL		(
1150		IDE		transactionStartedByUs
1150		DEL		)
1150		DEL		{
1151		IDE		await
1151		IDE		queryRunner
1151		DEL		.
1151		IDE		commitTransaction
1151		DEL		(
1151		DEL		)
1151		DEL		;
1152		DEL		}
1154		PRE		return
1154		IDE		results
1154		DEL		;
1156		DEL		}
1156		IDE		catch
1156		DEL		(
1156		IDE		error
1156		DEL		)
1156		DEL		{
1159		PRE		if
1159		DEL		(
1159		IDE		transactionStartedByUs
1159		DEL		)
1159		DEL		{
1160		IDE		try
1160		DEL		{
1161		IDE		await
1161		IDE		queryRunner
1161		DEL		.
1161		IDE		rollbackTransaction
1161		DEL		(
1161		DEL		)
1161		DEL		;
1162		DEL		}
1162		IDE		catch
1162		DEL		(
1162		IDE		rollbackError
1162		DEL		)
1162		DEL		{
1162		DEL		}
1163		DEL		}
1164		IDE		throw
1164		IDE		error
1164		DEL		;
1166		DEL		}
1166		IDE		finally
1166		DEL		{
1167		PRE		if
1167		DEL		(
1167		IDE		queryRunner
1167		REL		!=
1167		REL		=
1167		IDE		this
1167		DEL		.
1167		IDE		queryRunner
1167		DEL		)
1168		IDE		await
1168		IDE		queryRunner
1168		DEL		.
1168		IDE		release
1168		DEL		(
1168		DEL		)
1168		DEL		;
1169		DEL		}
1170		DEL		}
1176		IDE		async
1176		IDE		getManyAndCount
1176		DEL		(
1176		DEL		)
1176		IDE		Promise
1176		REL		<
1176		DEL		[
1176		IDE		Entity
1176		DEL		[
1176		DEL		]
1176		DEL		,
1176		IDE		number
1176		DEL		]
1176		REL		>
1176		DEL		{
1177		PRE		if
1177		DEL		(
1177		IDE		this
1177		DEL		.
1177		IDE		expressionMap
1177		DEL		.
1177		IDE		lockMode
1177		REL		==
1177		REL		=
1177		CAD		"optimistic"
1177		DEL		)
1178		IDE		throw
1178		IDE		new
1178		IDE		OptimisticLockCanNotBeUsedError
1178		DEL		(
1178		DEL		)
1178		DEL		;
1180		PRE		const
1180		IDE		queryRunner
1180		REL		=
1180		IDE		this
1180		DEL		.
1180		IDE		obtainQueryRunner
1180		DEL		(
1180		DEL		)
1180		DEL		;
1181		IDE		let
1181		IDE		transactionStartedByUs
1181		PRE		boolean
1181		REL		=
1181		PRE		false
1181		DEL		;
1182		IDE		try
1182		DEL		{
1185		PRE		if
1185		DEL		(
1185		IDE		this
1185		DEL		.
1185		IDE		expressionMap
1185		DEL		.
1185		IDE		useTransaction
1185		REL		==
1185		REL		=
1185		PRE		true
1185		LOG		&&
1185		IDE		queryRunner
1185		DEL		.
1185		IDE		isTransactionActive
1185		REL		==
1185		REL		=
1185		PRE		false
1185		DEL		)
1185		DEL		{
1186		IDE		await
1186		IDE		queryRunner
1186		DEL		.
1186		IDE		startTransaction
1186		DEL		(
1186		DEL		)
1186		DEL		;
1187		IDE		transactionStartedByUs
1187		REL		=
1187		PRE		true
1187		DEL		;
1188		DEL		}
1190		IDE		this
1190		DEL		.
1190		IDE		expressionMap
1190		DEL		.
1190		IDE		queryEntity
1190		REL		=
1190		PRE		true
1190		DEL		;
1191		PRE		const
1191		IDE		entitiesAndRaw
1191		REL		=
1191		IDE		await
1191		IDE		this
1191		DEL		.
1191		IDE		executeEntitiesAndRawResults
1191		DEL		(
1191		IDE		queryRunner
1191		DEL		)
1191		DEL		;
1192		IDE		this
1192		DEL		.
1192		IDE		expressionMap
1192		DEL		.
1192		IDE		queryEntity
1192		REL		=
1192		PRE		false
1192		DEL		;
1193		PRE		const
1193		IDE		count
1193		REL		=
1193		IDE		await
1193		IDE		this
1193		DEL		.
1193		IDE		executeCountQuery
1193		DEL		(
1193		IDE		queryRunner
1193		DEL		)
1193		DEL		;
1194		PRE		const
1194		IDE		results
1194		DEL		[
1194		IDE		Entity
1194		DEL		[
1194		DEL		]
1194		DEL		,
1194		IDE		number
1194		DEL		]
1194		REL		=
1194		DEL		[
1194		IDE		entitiesAndRaw
1194		DEL		.
1194		IDE		entities
1194		DEL		,
1194		IDE		count
1194		DEL		]
1194		DEL		;
1197		PRE		if
1197		DEL		(
1197		IDE		transactionStartedByUs
1197		DEL		)
1197		DEL		{
1198		IDE		await
1198		IDE		queryRunner
1198		DEL		.
1198		IDE		commitTransaction
1198		DEL		(
1198		DEL		)
1198		DEL		;
1199		DEL		}
1201		PRE		return
1201		IDE		results
1201		DEL		;
1203		DEL		}
1203		IDE		catch
1203		DEL		(
1203		IDE		error
1203		DEL		)
1203		DEL		{
1206		PRE		if
1206		DEL		(
1206		IDE		transactionStartedByUs
1206		DEL		)
1206		DEL		{
1207		IDE		try
1207		DEL		{
1208		IDE		await
1208		IDE		queryRunner
1208		DEL		.
1208		IDE		rollbackTransaction
1208		DEL		(
1208		DEL		)
1208		DEL		;
1209		DEL		}
1209		IDE		catch
1209		DEL		(
1209		IDE		rollbackError
1209		DEL		)
1209		DEL		{
1209		DEL		}
1210		DEL		}
1211		IDE		throw
1211		IDE		error
1211		DEL		;
1213		DEL		}
1213		IDE		finally
1213		DEL		{
1214		PRE		if
1214		DEL		(
1214		IDE		queryRunner
1214		REL		!=
1214		REL		=
1214		IDE		this
1214		DEL		.
1214		IDE		queryRunner
1214		DEL		)
1215		IDE		await
1215		IDE		queryRunner
1215		DEL		.
1215		IDE		release
1215		DEL		(
1215		DEL		)
1215		DEL		;
1216		DEL		}
1217		DEL		}
1222		IDE		async
1222		IDE		stream
1222		DEL		(
1222		DEL		)
1222		IDE		Promise
1222		REL		<
1222		IDE		ReadStream
1222		REL		>
1222		DEL		{
1223		IDE		this
1223		DEL		.
1223		IDE		expressionMap
1223		DEL		.
1223		IDE		queryEntity
1223		REL		=
1223		PRE		false
1223		DEL		;
1224		PRE		const
1224		DEL		[
1224		IDE		sql
1224		DEL		,
1224		IDE		parameters
1224		DEL		]
1224		REL		=
1224		IDE		this
1224		DEL		.
1224		IDE		getQueryAndParameters
1224		DEL		(
1224		DEL		)
1224		DEL		;
1225		PRE		const
1225		IDE		queryRunner
1225		REL		=
1225		IDE		this
1225		DEL		.
1225		IDE		obtainQueryRunner
1225		DEL		(
1225		DEL		)
1225		DEL		;
1226		IDE		let
1226		IDE		transactionStartedByUs
1226		PRE		boolean
1226		REL		=
1226		PRE		false
1226		DEL		;
1227		IDE		try
1227		DEL		{
1230		PRE		if
1230		DEL		(
1230		IDE		this
1230		DEL		.
1230		IDE		expressionMap
1230		DEL		.
1230		IDE		useTransaction
1230		REL		==
1230		REL		=
1230		PRE		true
1230		LOG		&&
1230		IDE		queryRunner
1230		DEL		.
1230		IDE		isTransactionActive
1230		REL		==
1230		REL		=
1230		PRE		false
1230		DEL		)
1230		DEL		{
1231		IDE		await
1231		IDE		queryRunner
1231		DEL		.
1231		IDE		startTransaction
1231		DEL		(
1231		DEL		)
1231		DEL		;
1232		IDE		transactionStartedByUs
1232		REL		=
1232		PRE		true
1232		DEL		;
1233		DEL		}
1235		PRE		const
1235		IDE		releaseFn
1235		REL		=
1235		DEL		(
1235		DEL		)
1235		REL		=
1235		REL		>
1235		DEL		{
1236		PRE		if
1236		DEL		(
1236		IDE		queryRunner
1236		REL		!=
1236		REL		=
1236		IDE		this
1236		DEL		.
1236		IDE		queryRunner
1236		DEL		)
1237		PRE		return
1237		IDE		queryRunner
1237		DEL		.
1237		IDE		release
1237		DEL		(
1237		DEL		)
1237		DEL		;
1238		PRE		return
1238		DEL		;
1239		DEL		}
1239		DEL		;
1240		PRE		const
1240		IDE		results
1240		REL		=
1240		IDE		queryRunner
1240		DEL		.
1240		IDE		stream
1240		DEL		(
1240		IDE		sql
1240		DEL		,
1240		IDE		parameters
1240		DEL		,
1240		IDE		releaseFn
1240		DEL		,
1240		IDE		releaseFn
1240		DEL		)
1240		DEL		;
1243		PRE		if
1243		DEL		(
1243		IDE		transactionStartedByUs
1243		DEL		)
1243		DEL		{
1244		IDE		await
1244		IDE		queryRunner
1244		DEL		.
1244		IDE		commitTransaction
1244		DEL		(
1244		DEL		)
1244		DEL		;
1245		DEL		}
1247		PRE		return
1247		IDE		results
1247		DEL		;
1249		DEL		}
1249		IDE		catch
1249		DEL		(
1249		IDE		error
1249		DEL		)
1249		DEL		{
1252		PRE		if
1252		DEL		(
1252		IDE		transactionStartedByUs
1252		DEL		)
1252		DEL		{
1253		IDE		try
1253		DEL		{
1254		IDE		await
1254		IDE		queryRunner
1254		DEL		.
1254		IDE		rollbackTransaction
1254		DEL		(
1254		DEL		)
1254		DEL		;
1255		DEL		}
1255		IDE		catch
1255		DEL		(
1255		IDE		rollbackError
1255		DEL		)
1255		DEL		{
1255		DEL		}
1256		DEL		}
1257		IDE		throw
1257		IDE		error
1257		DEL		;
1259		DEL		}
1260		DEL		}
1265		IDE		cache
1265		DEL		(
1265		IDE		enabled
1265		PRE		boolean
1265		DEL		)
1265		IDE		this
1265		DEL		;
1271		IDE		cache
1271		DEL		(
1271		IDE		milliseconds
1271		IDE		number
1271		DEL		)
1271		IDE		this
1271		DEL		;
1276		IDE		cache
1276		DEL		(
1276		IDE		id
1276		IDE		any
1276		DEL		,
1276		IDE		milliseconds
1276		IDE		number
1276		DEL		)
1276		IDE		this
1276		DEL		;
1281		IDE		cache
1281		DEL		(
1281		IDE		enabledOrMillisecondsOrId
1281		IDE		booleannumberstring
1281		DEL		,
1281		IDE		maybeMilliseconds
1281		IDE		number
1281		DEL		)
1281		IDE		this
1281		DEL		{
1283		PRE		if
1283		DEL		(
1283		IDE		typeof
1283		IDE		enabledOrMillisecondsOrId
1283		REL		==
1283		REL		=
1283		CAD		"boolean"
1283		DEL		)
1283		DEL		{
1284		IDE		this
1284		DEL		.
1284		IDE		expressionMap
1284		DEL		.
1284		IDE		cache
1284		REL		=
1284		IDE		enabledOrMillisecondsOrId
1284		DEL		;
1286		DEL		}
1286		PRE		else
1286		PRE		if
1286		DEL		(
1286		IDE		typeof
1286		IDE		enabledOrMillisecondsOrId
1286		REL		==
1286		REL		=
1286		CAD		"number"
1286		DEL		)
1286		DEL		{
1287		IDE		this
1287		DEL		.
1287		IDE		expressionMap
1287		DEL		.
1287		IDE		cache
1287		REL		=
1287		PRE		true
1287		DEL		;
1288		IDE		this
1288		DEL		.
1288		IDE		expressionMap
1288		DEL		.
1288		IDE		cacheDuration
1288		REL		=
1288		IDE		enabledOrMillisecondsOrId
1288		DEL		;
1290		DEL		}
1290		PRE		else
1290		PRE		if
1290		DEL		(
1290		IDE		typeof
1290		IDE		enabledOrMillisecondsOrId
1290		REL		==
1290		REL		=
1290		CAD		"string"
1290		IDE		typeof
1290		IDE		enabledOrMillisecondsOrId
1290		REL		==
1290		REL		=
1290		CAD		"number"
1290		DEL		)
1290		DEL		{
1291		IDE		this
1291		DEL		.
1291		IDE		expressionMap
1291		DEL		.
1291		IDE		cache
1291		REL		=
1291		PRE		true
1291		DEL		;
1292		IDE		this
1292		DEL		.
1292		IDE		expressionMap
1292		DEL		.
1292		IDE		cacheId
1292		REL		=
1292		IDE		enabledOrMillisecondsOrId
1292		DEL		;
1293		DEL		}
1295		PRE		if
1295		DEL		(
1295		IDE		maybeMilliseconds
1295		DEL		)
1295		DEL		{
1296		IDE		this
1296		DEL		.
1296		IDE		expressionMap
1296		DEL		.
1296		IDE		cacheDuration
1296		REL		=
1296		IDE		maybeMilliseconds
1296		DEL		;
1297		DEL		}
1299		PRE		return
1299		IDE		this
1299		DEL		;
1300		DEL		}
1305		IDE		setOption
1305		DEL		(
1305		IDE		option
1305		IDE		SelectQueryBuilderOption
1305		DEL		)
1305		IDE		this
1305		DEL		{
1306		IDE		this
1306		DEL		.
1306		IDE		expressionMap
1306		DEL		.
1306		IDE		options
1306		DEL		.
1306		IDE		push
1306		DEL		(
1306		IDE		option
1306		DEL		)
1306		DEL		;
1307		PRE		return
1307		IDE		this
1307		DEL		;
1308		DEL		}
1314		IDE		protected
1314		IDE		join
1314		DEL		(
1314		IDE		direction
1314		CAD		"INNER""
1314		IDE		LEFT
1314		DEL		,
1315		IDE		entityOrProperty
1315		IDE		Functionstring
1315		DEL		(
1315		DEL		(
1315		IDE		qb
1315		IDE		SelectQueryBuilder
1315		REL		<
1315		IDE		any
1315		REL		>
1315		DEL		)
1315		REL		=
1315		REL		>
1315		IDE		SelectQueryBuilder
1315		REL		<
1315		IDE		any
1315		REL		>
1315		DEL		)
1315		DEL		,
1316		IDE		aliasName
1316		PRE		string
1316		DEL		,
1317		IDE		condition
1317		PRE		string
1317		DEL		,
1318		IDE		parameters
1318		IDE		ObjectLiteral
1318		DEL		,
1319		IDE		mapToProperty
1319		PRE		string
1319		DEL		,
1320		IDE		isMappingMany
1320		PRE		boolean
1320		DEL		)
1320		IDE		void
1320		DEL		{
1322		IDE		this
1322		DEL		.
1322		IDE		setParameters
1322		DEL		(
1322		IDE		parameters
1322		DEL		{
1322		DEL		}
1322		DEL		)
1322		DEL		;
1324		PRE		const
1324		IDE		joinAttribute
1324		REL		=
1324		IDE		new
1324		IDE		JoinAttribute
1324		DEL		(
1324		IDE		this
1324		DEL		.
1324		IDE		connection
1324		DEL		,
1324		IDE		this
1324		DEL		.
1324		IDE		expressionMap
1324		DEL		)
1324		DEL		;
1325		IDE		joinAttribute
1325		DEL		.
1325		IDE		direction
1325		REL		=
1325		IDE		direction
1325		DEL		;
1326		IDE		joinAttribute
1326		DEL		.
1326		IDE		mapToProperty
1326		REL		=
1326		IDE		mapToProperty
1326		DEL		;
1327		IDE		joinAttribute
1327		DEL		.
1327		IDE		isMappingMany
1327		REL		=
1327		IDE		isMappingMany
1327		DEL		;
1328		IDE		joinAttribute
1328		DEL		.
1328		IDE		entityOrProperty
1328		REL		=
1328		IDE		entityOrProperty
1328		DEL		;
1329		IDE		joinAttribute
1329		DEL		.
1329		IDE		condition
1329		REL		=
1329		IDE		condition
1329		DEL		;
1331		IDE		this
1331		DEL		.
1331		IDE		expressionMap
1331		DEL		.
1331		IDE		joinAttributes
1331		DEL		.
1331		IDE		push
1331		DEL		(
1331		IDE		joinAttribute
1331		DEL		)
1331		DEL		;
1333		PRE		if
1333		DEL		(
1333		IDE		joinAttribute
1333		DEL		.
1333		IDE		metadata
1333		DEL		)
1333		DEL		{
1334		PRE		if
1334		DEL		(
1334		IDE		joinAttribute
1334		DEL		.
1334		IDE		metadata
1334		DEL		.
1334		IDE		deleteDateColumn
1334		LOG		&&
1334		LOG		!
1334		IDE		this
1334		DEL		.
1334		IDE		expressionMap
1334		DEL		.
1334		IDE		withDeleted
1334		DEL		)
1334		DEL		{
1335		PRE		const
1335		IDE		conditionDeleteColumn
1335		REL		=
1335		DEL		{
1335		IDE		aliasName
1335		DEL		}
1335		DEL		.
1335		DEL		{
1335		IDE		joinAttribute
1335		DEL		.
1335		IDE		metadata
1335		DEL		.
1335		IDE		deleteDateColumn
1335		DEL		.
1335		IDE		propertyName
1335		DEL		}
1335		IDE		IS
1335		IDE		NULL
1335		DEL		;
1336		IDE		joinAttribute
1336		DEL		.
1336		IDE		condition
1336		ART		+
1336		REL		=
1336		IDE		joinAttribute
1336		DEL		.
1336		IDE		condition
1336		IDE		AND
1336		DEL		{
1336		IDE		conditionDeleteColumn
1336		DEL		}
1336		DEL		{
1336		IDE		conditionDeleteColumn
1336		DEL		}
1336		DEL		;
1337		DEL		}
1339		IDE		joinAttribute
1339		DEL		.
1339		IDE		alias
1339		REL		=
1339		IDE		this
1339		DEL		.
1339		IDE		expressionMap
1339		DEL		.
1339		IDE		createAlias
1339		DEL		(
1339		DEL		{
1340		IDE		type
1340		CAD		"join"
1340		DEL		,
1341		IDE		name
1341		IDE		aliasName
1341		DEL		,
1342		IDE		metadata
1342		IDE		joinAttribute
1342		DEL		.
1342		IDE		metadata
1343		DEL		}
1343		DEL		)
1343		DEL		;
1344		PRE		if
1344		DEL		(
1344		IDE		joinAttribute
1344		DEL		.
1344		IDE		relation
1344		LOG		&&
1344		IDE		joinAttribute
1344		DEL		.
1344		IDE		relation
1344		DEL		.
1344		IDE		junctionEntityMetadata
1344		DEL		)
1344		DEL		{
1345		IDE		this
1345		DEL		.
1345		IDE		expressionMap
1345		DEL		.
1345		IDE		createAlias
1345		DEL		(
1345		DEL		{
1346		IDE		type
1346		CAD		"join"
1346		DEL		,
1347		IDE		name
1347		IDE		joinAttribute
1347		DEL		.
1347		IDE		junctionAlias
1347		DEL		,
1348		IDE		metadata
1348		IDE		joinAttribute
1348		DEL		.
1348		IDE		relation
1348		DEL		.
1348		IDE		junctionEntityMetadata
1349		DEL		}
1349		DEL		)
1349		DEL		;
1350		DEL		}
1352		DEL		}
1352		PRE		else
1352		DEL		{
1353		IDE		let
1353		IDE		subQuery
1353		PRE		string
1353		REL		=
1353		CAD		""
1353		DEL		;
1354		PRE		if
1354		DEL		(
1354		IDE		entityOrProperty
1354		IDE		instanceof
1354		IDE		Function
1354		DEL		)
1354		DEL		{
1355		PRE		const
1355		IDE		subQueryBuilder
1355		IDE		SelectQueryBuilder
1355		REL		<
1355		IDE		any
1355		REL		>
1355		REL		=
1355		DEL		(
1355		IDE		entityOrProperty
1355		IDE		as
1355		IDE		any
1355		DEL		)
1355		DEL		(
1355		DEL		(
1355		DEL		(
1355		IDE		this
1355		IDE		as
1355		IDE		any
1355		DEL		)
1355		IDE		as
1355		IDE		SelectQueryBuilder
1355		REL		<
1355		IDE		any
1355		REL		>
1355		DEL		)
1355		DEL		.
1355		IDE		subQuery
1355		DEL		(
1355		DEL		)
1355		DEL		)
1355		DEL		;
1356		IDE		this
1356		DEL		.
1356		IDE		setParameters
1356		DEL		(
1356		IDE		subQueryBuilder
1356		DEL		.
1356		IDE		getParameters
1356		DEL		(
1356		DEL		)
1356		DEL		)
1356		DEL		;
1357		IDE		subQuery
1357		REL		=
1357		IDE		subQueryBuilder
1357		DEL		.
1357		IDE		getQuery
1357		DEL		(
1357		DEL		)
1357		DEL		;
1359		DEL		}
1359		PRE		else
1359		DEL		{
1360		IDE		subQuery
1360		REL		=
1360		IDE		entityOrProperty
1360		DEL		;
1361		DEL		}
1362		PRE		const
1362		IDE		isSubQuery
1362		REL		=
1362		IDE		entityOrProperty
1362		IDE		instanceof
1362		IDE		Function
1362		IDE		entityOrProperty
1362		DEL		.
1362		IDE		substr
1362		DEL		(
1362		NRO		0
1362		DEL		,
1362		NRO		1
1362		DEL		)
1362		REL		==
1362		REL		=
1362		CAD		"("
1362		LOG		&&
1362		IDE		entityOrProperty
1362		DEL		.
1362		IDE		substr
1362		DEL		(
1362		ART		-
1362		NRO		1
1362		DEL		)
1362		REL		==
1362		REL		=
1362		CAD		")"
1362		DEL		;
1363		IDE		joinAttribute
1363		DEL		.
1363		IDE		alias
1363		REL		=
1363		IDE		this
1363		DEL		.
1363		IDE		expressionMap
1363		DEL		.
1363		IDE		createAlias
1363		DEL		(
1363		DEL		{
1364		IDE		type
1364		CAD		"join"
1364		DEL		,
1365		IDE		name
1365		IDE		aliasName
1365		DEL		,
1366		IDE		tablePath
1366		IDE		isSubQuery
1366		REL		==
1366		REL		=
1366		PRE		false
1366		IDE		entityOrProperty
1366		IDE		as
1366		PRE		string
1366		IDE		undefined
1366		DEL		,
1367		IDE		subQuery
1367		IDE		isSubQuery
1367		REL		==
1367		REL		=
1367		PRE		true
1367		IDE		subQuery
1367		IDE		undefined
1367		DEL		,
1368		DEL		}
1368		DEL		)
1368		DEL		;
1369		DEL		}
1370		DEL		}
1375		IDE		protected
1375		IDE		createSelectExpression
1375		DEL		(
1375		DEL		)
1375		DEL		{
1377		PRE		if
1377		DEL		(
1377		LOG		!
1377		IDE		this
1377		DEL		.
1377		IDE		expressionMap
1377		DEL		.
1377		IDE		mainAlias
1377		DEL		)
1378		IDE		throw
1378		IDE		new
1378		IDE		Error
1378		DEL		(
1378		CAD		"Cannot build query because main alias is not set (call qb#from method)"
1378		DEL		)
1378		DEL		;
1382		PRE		const
1382		IDE		allSelects
1382		IDE		SelectQuery
1382		DEL		[
1382		DEL		]
1382		REL		=
1382		DEL		[
1382		DEL		]
1382		DEL		;
1383		PRE		const
1383		IDE		excludedSelects
1383		IDE		SelectQuery
1383		DEL		[
1383		DEL		]
1383		REL		=
1383		DEL		[
1383		DEL		]
1383		DEL		;
1385		PRE		if
1385		DEL		(
1385		IDE		this
1385		DEL		.
1385		IDE		expressionMap
1385		DEL		.
1385		IDE		mainAlias
1385		DEL		.
1385		IDE		hasMetadata
1385		DEL		)
1385		DEL		{
1386		PRE		const
1386		IDE		metadata
1386		REL		=
1386		IDE		this
1386		DEL		.
1386		IDE		expressionMap
1386		DEL		.
1386		IDE		mainAlias
1386		DEL		.
1386		IDE		metadata
1386		DEL		;
1387		IDE		allSelects
1387		DEL		.
1387		IDE		push
1387		DEL		(
1387		DEL		.
1387		DEL		.
1387		DEL		.
1387		IDE		this
1387		DEL		.
1387		IDE		buildEscapedEntityColumnSelects
1387		DEL		(
1387		IDE		this
1387		DEL		.
1387		IDE		expressionMap
1387		DEL		.
1387		IDE		mainAlias
1387		DEL		.
1387		IDE		name
1387		DEL		,
1387		IDE		metadata
1387		DEL		)
1387		DEL		)
1387		DEL		;
1388		IDE		excludedSelects
1388		DEL		.
1388		IDE		push
1388		DEL		(
1388		DEL		.
1388		DEL		.
1388		DEL		.
1388		IDE		this
1388		DEL		.
1388		IDE		findEntityColumnSelects
1388		DEL		(
1388		IDE		this
1388		DEL		.
1388		IDE		expressionMap
1388		DEL		.
1388		IDE		mainAlias
1388		DEL		.
1388		IDE		name
1388		DEL		,
1388		IDE		metadata
1388		DEL		)
1388		DEL		)
1388		DEL		;
1389		DEL		}
1392		IDE		this
1392		DEL		.
1392		IDE		expressionMap
1392		DEL		.
1392		IDE		joinAttributes
1393		DEL		.
1393		IDE		forEach
1393		DEL		(
1393		IDE		join
1393		REL		=
1393		REL		>
1393		DEL		{
1394		PRE		if
1394		DEL		(
1394		IDE		join
1394		DEL		.
1394		IDE		metadata
1394		DEL		)
1394		DEL		{
1395		IDE		allSelects
1395		DEL		.
1395		IDE		push
1395		DEL		(
1395		DEL		.
1395		DEL		.
1395		DEL		.
1395		IDE		this
1395		DEL		.
1395		IDE		buildEscapedEntityColumnSelects
1395		DEL		(
1395		IDE		join
1395		DEL		.
1395		IDE		alias
1395		DEL		.
1395		IDE		name
1395		LOG		!
1395		DEL		,
1395		IDE		join
1395		DEL		.
1395		IDE		metadata
1395		DEL		)
1395		DEL		)
1395		DEL		;
1396		IDE		excludedSelects
1396		DEL		.
1396		IDE		push
1396		DEL		(
1396		DEL		.
1396		DEL		.
1396		DEL		.
1396		IDE		this
1396		DEL		.
1396		IDE		findEntityColumnSelects
1396		DEL		(
1396		IDE		join
1396		DEL		.
1396		IDE		alias
1396		DEL		.
1396		IDE		name
1396		LOG		!
1396		DEL		,
1396		IDE		join
1396		DEL		.
1396		IDE		metadata
1396		DEL		)
1396		DEL		)
1396		DEL		;
1397		DEL		}
1397		PRE		else
1397		DEL		{
1398		PRE		const
1398		IDE		hasMainAlias
1398		REL		=
1398		IDE		this
1398		DEL		.
1398		IDE		expressionMap
1398		DEL		.
1398		IDE		selects
1398		DEL		.
1398		IDE		some
1398		DEL		(
1398		IDE		select
1398		REL		=
1398		REL		>
1398		IDE		select
1398		DEL		.
1398		IDE		selection
1398		REL		==
1398		REL		=
1398		IDE		join
1398		DEL		.
1398		IDE		alias
1398		DEL		.
1398		IDE		name
1398		DEL		)
1398		DEL		;
1399		PRE		if
1399		DEL		(
1399		IDE		hasMainAlias
1399		DEL		)
1399		DEL		{
1400		IDE		allSelects
1400		DEL		.
1400		IDE		push
1400		DEL		(
1400		DEL		{
1400		IDE		selection
1400		IDE		this
1400		DEL		.
1400		IDE		escape
1400		DEL		(
1400		IDE		join
1400		DEL		.
1400		IDE		alias
1400		DEL		.
1400		IDE		name
1400		LOG		!
1400		DEL		)
1400		ART		+
1400		CAD		".*"
1400		DEL		}
1400		DEL		)
1400		DEL		;
1401		PRE		const
1401		IDE		excludedSelect
1401		REL		=
1401		IDE		this
1401		DEL		.
1401		IDE		expressionMap
1401		DEL		.
1401		IDE		selects
1401		DEL		.
1401		IDE		find
1401		DEL		(
1401		IDE		select
1401		REL		=
1401		REL		>
1401		IDE		select
1401		DEL		.
1401		IDE		selection
1401		REL		==
1401		REL		=
1401		IDE		join
1401		DEL		.
1401		IDE		alias
1401		DEL		.
1401		IDE		name
1401		DEL		)
1401		DEL		;
1402		IDE		excludedSelects
1402		DEL		.
1402		IDE		push
1402		DEL		(
1402		IDE		excludedSelect
1402		LOG		!
1402		DEL		)
1402		DEL		;
1403		DEL		}
1404		DEL		}
1405		DEL		}
1405		DEL		)
1405		DEL		;
1408		IDE		this
1408		DEL		.
1408		IDE		expressionMap
1408		DEL		.
1408		IDE		selects
1409		DEL		.
1409		IDE		filter
1409		DEL		(
1409		IDE		select
1409		REL		=
1409		REL		>
1409		IDE		excludedSelects
1409		DEL		.
1409		IDE		indexOf
1409		DEL		(
1409		IDE		select
1409		DEL		)
1409		REL		==
1409		REL		=
1409		ART		-
1409		NRO		1
1409		DEL		)
1410		DEL		.
1410		IDE		forEach
1410		DEL		(
1410		IDE		select
1410		REL		=
1410		REL		>
1410		IDE		allSelects
1410		DEL		.
1410		IDE		push
1410		DEL		(
1410		DEL		{
1410		IDE		selection
1410		IDE		this
1410		DEL		.
1410		IDE		replacePropertyNames
1410		DEL		(
1410		IDE		select
1410		DEL		.
1410		IDE		selection
1410		DEL		)
1410		DEL		,
1410		IDE		aliasName
1410		IDE		select
1410		DEL		.
1410		IDE		aliasName
1410		DEL		}
1410		DEL		)
1410		DEL		)
1410		DEL		;
1413		PRE		if
1413		DEL		(
1413		IDE		allSelects
1413		DEL		.
1413		IDE		length
1413		REL		==
1413		REL		=
1413		NRO		0
1413		DEL		)
1414		IDE		allSelects
1414		DEL		.
1414		IDE		push
1414		DEL		(
1414		DEL		{
1414		IDE		selection
1414		CAD		"*"
1414		DEL		}
1414		DEL		)
1414		DEL		;
1416		IDE		let
1416		IDE		lock
1416		PRE		string
1416		REL		=
1416		CAD		""
1416		DEL		;
1417		PRE		if
1417		DEL		(
1417		IDE		this
1417		DEL		.
1417		IDE		connection
1417		DEL		.
1417		IDE		driver
1417		IDE		instanceof
1417		IDE		SqlServerDriver
1417		DEL		)
1417		DEL		{
1418		IDE		switch
1418		DEL		(
1418		IDE		this
1418		DEL		.
1418		IDE		expressionMap
1418		DEL		.
1418		IDE		lockMode
1418		DEL		)
1418		DEL		{
1419		IDE		case
1419		CAD		"pessimisticread"
1420		IDE		lock
1420		REL		=
1420		CAD		" WITH (HOLDLOCK, ROWLOCK)"
1420		DEL		;
1421		IDE		break
1421		DEL		;
1422		IDE		case
1422		CAD		"pessimisticwrite"
1423		IDE		lock
1423		REL		=
1423		CAD		" WITH (UPDLOCK, ROWLOCK)"
1423		DEL		;
1424		IDE		break
1424		DEL		;
1425		IDE		case
1425		CAD		"dirtyread"
1426		IDE		lock
1426		REL		=
1426		CAD		" WITH (NOLOCK)"
1426		DEL		;
1427		IDE		break
1427		DEL		;
1428		DEL		}
1429		DEL		}
1432		PRE		const
1432		IDE		froms
1432		REL		=
1432		IDE		this
1432		DEL		.
1432		IDE		expressionMap
1432		DEL		.
1432		IDE		aliases
1433		DEL		.
1433		IDE		filter
1433		DEL		(
1433		IDE		alias
1433		REL		=
1433		REL		>
1433		IDE		alias
1433		DEL		.
1433		IDE		type
1433		REL		==
1433		REL		=
1433		CAD		"from"
1433		LOG		&&
1433		DEL		(
1433		IDE		alias
1433		DEL		.
1433		IDE		tablePath
1433		IDE		alias
1433		DEL		.
1433		IDE		subQuery
1433		DEL		)
1433		DEL		)
1434		DEL		.
1434		IDE		map
1434		DEL		(
1434		IDE		alias
1434		REL		=
1434		REL		>
1434		DEL		{
1435		PRE		if
1435		DEL		(
1435		IDE		alias
1435		DEL		.
1435		IDE		subQuery
1435		DEL		)
1436		PRE		return
1436		IDE		alias
1436		DEL		.
1436		IDE		subQuery
1436		ART		+
1436		CAD		" "
1436		ART		+
1436		IDE		this
1436		DEL		.
1436		IDE		escape
1436		DEL		(
1436		IDE		alias
1436		DEL		.
1436		IDE		name
1436		DEL		)
1436		DEL		;
1438		PRE		return
1438		IDE		this
1438		DEL		.
1438		IDE		getTableName
1438		DEL		(
1438		IDE		alias
1438		DEL		.
1438		IDE		tablePath
1438		LOG		!
1438		DEL		)
1438		ART		+
1438		CAD		" "
1438		ART		+
1438		IDE		this
1438		DEL		.
1438		IDE		escape
1438		DEL		(
1438		IDE		alias
1438		DEL		.
1438		IDE		name
1438		DEL		)
1438		DEL		;
1439		DEL		}
1439		DEL		)
1439		DEL		;
1441		PRE		const
1441		IDE		select
1441		REL		=
1441		IDE		this
1441		DEL		.
1441		IDE		createSelectDistinctExpression
1441		DEL		(
1441		DEL		)
1441		DEL		;
1442		PRE		const
1442		IDE		selection
1442		REL		=
1442		IDE		allSelects
1442		DEL		.
1442		IDE		map
1442		DEL		(
1442		IDE		select
1442		REL		=
1442		REL		>
1442		IDE		select
1442		DEL		.
1442		IDE		selection
1442		ART		+
1442		DEL		(
1442		IDE		select
1442		DEL		.
1442		IDE		aliasName
1442		CAD		" AS "
1442		ART		+
1442		IDE		this
1442		DEL		.
1442		IDE		escape
1442		DEL		(
1442		IDE		select
1442		DEL		.
1442		IDE		aliasName
1442		DEL		)
1442		CAD		""
1442		DEL		)
1442		DEL		)
1442		DEL		.
1442		IDE		join
1442		DEL		(
1442		CAD		", "
1442		DEL		)
1442		DEL		;
1444		PRE		return
1444		IDE		select
1444		ART		+
1444		IDE		selection
1444		ART		+
1444		CAD		" FROM "
1444		ART		+
1444		IDE		froms
1444		DEL		.
1444		IDE		join
1444		DEL		(
1444		CAD		", "
1444		DEL		)
1444		ART		+
1444		IDE		lock
1444		DEL		;
1445		DEL		}
1450		IDE		protected
1450		IDE		createSelectDistinctExpression
1450		DEL		(
1450		DEL		)
1450		PRE		string
1450		DEL		{
1451		PRE		const
1451		DEL		{
1451		IDE		selectDistinct
1451		DEL		,
1451		IDE		selectDistinctOn
1451		DEL		}
1451		REL		=
1451		IDE		this
1451		DEL		.
1451		IDE		expressionMap
1451		DEL		;
1452		PRE		const
1452		DEL		{
1452		IDE		driver
1452		DEL		}
1452		REL		=
1452		IDE		this
1452		DEL		.
1452		IDE		connection
1452		DEL		;
1454		IDE		let
1454		IDE		select
1454		REL		=
1454		CAD		"SELECT "
1454		DEL		;
1455		PRE		if
1455		DEL		(
1455		IDE		driver
1455		IDE		instanceof
1455		IDE		PostgresDriver
1455		LOG		&&
1455		IDE		selectDistinctOn
1455		DEL		.
1455		IDE		length
1455		REL		>
1455		NRO		0
1455		DEL		)
1455		DEL		{
1456		PRE		const
1456		IDE		selectDistinctOnMap
1456		REL		=
1456		IDE		selectDistinctOn
1456		DEL		.
1456		IDE		map
1456		DEL		(
1457		DEL		(
1457		IDE		on
1457		DEL		)
1457		REL		=
1457		REL		>
1457		IDE		this
1457		DEL		.
1457		IDE		replacePropertyNames
1457		DEL		(
1457		IDE		on
1457		DEL		)
1458		DEL		)
1458		DEL		.
1458		IDE		join
1458		DEL		(
1458		CAD		", "
1458		DEL		)
1458		DEL		;
1460		IDE		select
1460		REL		=
1460		IDE		SELECT
1460		IDE		DISTINCT
1460		IDE		ON
1460		DEL		(
1460		DEL		{
1460		IDE		selectDistinctOnMap
1460		DEL		}
1460		DEL		)
1460		DEL		;
1461		DEL		}
1461		PRE		else
1461		PRE		if
1461		DEL		(
1461		IDE		selectDistinct
1461		DEL		)
1461		DEL		{
1462		IDE		select
1462		REL		=
1462		CAD		"SELECT DISTINCT "
1462		DEL		;
1463		DEL		}
1465		PRE		return
1465		IDE		select
1465		DEL		;
1466		DEL		}
1471		IDE		protected
1471		IDE		createJoinExpression
1471		DEL		(
1471		DEL		)
1471		PRE		string
1471		DEL		{
1481		PRE		const
1481		IDE		joins
1481		REL		=
1481		IDE		this
1481		DEL		.
1481		IDE		expressionMap
1481		DEL		.
1481		IDE		joinAttributes
1481		DEL		.
1481		IDE		map
1481		DEL		(
1481		IDE		joinAttr
1481		REL		=
1481		REL		>
1481		DEL		{
1482		PRE		const
1482		IDE		relation
1482		REL		=
1482		IDE		joinAttr
1482		DEL		.
1482		IDE		relation
1482		DEL		;
1483		PRE		const
1483		IDE		destinationTableName
1483		REL		=
1483		IDE		joinAttr
1483		DEL		.
1483		IDE		tablePath
1483		DEL		;
1484		PRE		const
1484		IDE		destinationTableAlias
1484		REL		=
1484		IDE		joinAttr
1484		DEL		.
1484		IDE		alias
1484		DEL		.
1484		IDE		name
1484		DEL		;
1485		IDE		let
1485		IDE		appendedCondition
1485		REL		=
1485		IDE		joinAttr
1485		DEL		.
1485		IDE		condition
1485		CAD		" AND ("
1485		ART		+
1485		IDE		joinAttr
1485		DEL		.
1485		IDE		condition
1485		ART		+
1485		CAD		")"
1485		CAD		""
1485		DEL		;
1486		PRE		const
1486		IDE		parentAlias
1486		REL		=
1486		IDE		joinAttr
1486		DEL		.
1486		IDE		parentAlias
1486		DEL		;
1490		PRE		if
1490		DEL		(
1490		LOG		!
1490		IDE		parentAlias
1490		LOG		!
1490		IDE		relation
1490		DEL		)
1490		DEL		{
1491		PRE		const
1491		IDE		destinationJoin
1491		REL		=
1491		IDE		joinAttr
1491		DEL		.
1491		IDE		alias
1491		DEL		.
1491		IDE		subQuery
1491		IDE		joinAttr
1491		DEL		.
1491		IDE		alias
1491		DEL		.
1491		IDE		subQuery
1491		IDE		this
1491		DEL		.
1491		IDE		getTableName
1491		DEL		(
1491		IDE		destinationTableName
1491		DEL		)
1491		DEL		;
1492		PRE		return
1492		CAD		" "
1492		ART		+
1492		IDE		joinAttr
1492		DEL		.
1492		IDE		direction
1492		ART		+
1492		CAD		" JOIN "
1492		ART		+
1492		IDE		destinationJoin
1492		ART		+
1492		CAD		" "
1492		ART		+
1492		IDE		this
1492		DEL		.
1492		IDE		escape
1492		DEL		(
1492		IDE		destinationTableAlias
1492		DEL		)
1492		ART		+
1493		DEL		(
1493		IDE		joinAttr
1493		DEL		.
1493		IDE		condition
1493		CAD		" ON "
1493		ART		+
1493		IDE		this
1493		DEL		.
1493		IDE		replacePropertyNames
1493		DEL		(
1493		IDE		joinAttr
1493		DEL		.
1493		IDE		condition
1493		DEL		)
1493		CAD		""
1493		DEL		)
1493		DEL		;
1494		DEL		}
1497		PRE		if
1497		DEL		(
1497		IDE		relation
1497		DEL		.
1497		IDE		isManyToOne
1497		IDE		relation
1497		DEL		.
1497		IDE		isOneToOneOwner
1497		DEL		)
1497		DEL		{
1500		PRE		const
1500		IDE		condition
1500		REL		=
1500		IDE		relation
1500		DEL		.
1500		IDE		joinColumns
1500		DEL		.
1500		IDE		map
1500		DEL		(
1500		IDE		joinColumn
1500		REL		=
1500		REL		>
1500		DEL		{
1501		PRE		return
1501		IDE		destinationTableAlias
1501		ART		+
1501		CAD		"."
1501		ART		+
1501		IDE		joinColumn
1501		DEL		.
1501		IDE		referencedColumn
1501		LOG		!
1501		DEL		.
1501		IDE		propertyPath
1501		ART		+
1501		CAD		"="
1501		ART		+
1502		IDE		parentAlias
1502		ART		+
1502		CAD		"."
1502		ART		+
1502		IDE		relation
1502		DEL		.
1502		IDE		propertyPath
1502		ART		+
1502		CAD		"."
1502		ART		+
1502		IDE		joinColumn
1502		DEL		.
1502		IDE		referencedColumn
1502		LOG		!
1502		DEL		.
1502		IDE		propertyPath
1502		DEL		;
1503		DEL		}
1503		DEL		)
1503		DEL		.
1503		IDE		join
1503		DEL		(
1503		CAD		" AND "
1503		DEL		)
1503		DEL		;
1505		PRE		return
1505		CAD		" "
1505		ART		+
1505		IDE		joinAttr
1505		DEL		.
1505		IDE		direction
1505		ART		+
1505		CAD		" JOIN "
1505		ART		+
1505		IDE		this
1505		DEL		.
1505		IDE		getTableName
1505		DEL		(
1505		IDE		destinationTableName
1505		DEL		)
1505		ART		+
1505		CAD		" "
1505		ART		+
1505		IDE		this
1505		DEL		.
1505		IDE		escape
1505		DEL		(
1505		IDE		destinationTableAlias
1505		DEL		)
1505		ART		+
1505		CAD		" ON "
1505		ART		+
1505		IDE		this
1505		DEL		.
1505		IDE		replacePropertyNames
1505		DEL		(
1505		IDE		condition
1505		ART		+
1505		IDE		appendedCondition
1505		DEL		)
1505		DEL		;
1507		DEL		}
1507		PRE		else
1507		PRE		if
1507		DEL		(
1507		IDE		relation
1507		DEL		.
1507		IDE		isOneToMany
1507		IDE		relation
1507		DEL		.
1507		IDE		isOneToOneNotOwner
1507		DEL		)
1507		DEL		{
1510		PRE		const
1510		IDE		condition
1510		REL		=
1510		IDE		relation
1510		DEL		.
1510		IDE		inverseRelation
1510		LOG		!
1510		DEL		.
1510		IDE		joinColumns
1510		DEL		.
1510		IDE		map
1510		DEL		(
1510		IDE		joinColumn
1510		REL		=
1510		REL		>
1510		DEL		{
1511		PRE		if
1511		DEL		(
1511		IDE		relation
1511		DEL		.
1511		IDE		inverseEntityMetadata
1511		DEL		.
1511		IDE		tableType
1511		REL		==
1511		REL		=
1511		CAD		"entity-child"
1511		LOG		&&
1511		IDE		relation
1511		DEL		.
1511		IDE		inverseEntityMetadata
1511		DEL		.
1511		IDE		discriminatorColumn
1511		DEL		)
1511		DEL		{
1512		IDE		appendedCondition
1512		ART		+
1512		REL		=
1512		CAD		" AND "
1512		ART		+
1512		IDE		destinationTableAlias
1512		ART		+
1512		CAD		"."
1512		ART		+
1512		IDE		relation
1512		DEL		.
1512		IDE		inverseEntityMetadata
1512		DEL		.
1512		IDE		discriminatorColumn
1512		DEL		.
1512		IDE		databaseName
1512		ART		+
1512		CAD		"='"
1512		ART		+
1512		IDE		relation
1512		DEL		.
1512		IDE		inverseEntityMetadata
1512		DEL		.
1512		IDE		discriminatorValue
1512		ART		+
1512		CAD		"'"
1512		DEL		;
1513		DEL		}
1515		PRE		return
1515		IDE		destinationTableAlias
1515		ART		+
1515		CAD		"."
1515		ART		+
1515		IDE		relation
1515		DEL		.
1515		IDE		inverseRelation
1515		LOG		!
1515		DEL		.
1515		IDE		propertyPath
1515		ART		+
1515		CAD		"."
1515		ART		+
1515		IDE		joinColumn
1515		DEL		.
1515		IDE		referencedColumn
1515		LOG		!
1515		DEL		.
1515		IDE		propertyPath
1515		ART		+
1515		CAD		"="
1515		ART		+
1516		IDE		parentAlias
1516		ART		+
1516		CAD		"."
1516		ART		+
1516		IDE		joinColumn
1516		DEL		.
1516		IDE		referencedColumn
1516		LOG		!
1516		DEL		.
1516		IDE		propertyPath
1516		DEL		;
1517		DEL		}
1517		DEL		)
1517		DEL		.
1517		IDE		join
1517		DEL		(
1517		CAD		" AND "
1517		DEL		)
1517		DEL		;
1519		PRE		return
1519		CAD		" "
1519		ART		+
1519		IDE		joinAttr
1519		DEL		.
1519		IDE		direction
1519		ART		+
1519		CAD		" JOIN "
1519		ART		+
1519		IDE		this
1519		DEL		.
1519		IDE		getTableName
1519		DEL		(
1519		IDE		destinationTableName
1519		DEL		)
1519		ART		+
1519		CAD		" "
1519		ART		+
1519		IDE		this
1519		DEL		.
1519		IDE		escape
1519		DEL		(
1519		IDE		destinationTableAlias
1519		DEL		)
1519		ART		+
1519		CAD		" ON "
1519		ART		+
1519		IDE		this
1519		DEL		.
1519		IDE		replacePropertyNames
1519		DEL		(
1519		IDE		condition
1519		ART		+
1519		IDE		appendedCondition
1519		DEL		)
1519		DEL		;
1521		DEL		}
1521		PRE		else
1521		DEL		{
1522		PRE		const
1522		IDE		junctionTableName
1522		REL		=
1522		IDE		relation
1522		DEL		.
1522		IDE		junctionEntityMetadata
1522		LOG		!
1522		DEL		.
1522		IDE		tablePath
1522		DEL		;
1524		PRE		const
1524		IDE		junctionAlias
1524		REL		=
1524		IDE		joinAttr
1524		DEL		.
1524		IDE		junctionAlias
1524		DEL		;
1525		IDE		let
1525		IDE		junctionCondition
1525		REL		=
1525		CAD		""
1525		DEL		,
1525		IDE		destinationCondition
1525		REL		=
1525		CAD		""
1525		DEL		;
1527		PRE		if
1527		DEL		(
1527		IDE		relation
1527		DEL		.
1527		IDE		isOwning
1527		DEL		)
1527		DEL		{
1529		IDE		junctionCondition
1529		REL		=
1529		IDE		relation
1529		DEL		.
1529		IDE		joinColumns
1529		DEL		.
1529		IDE		map
1529		DEL		(
1529		IDE		joinColumn
1529		REL		=
1529		REL		>
1529		DEL		{
1531		PRE		return
1531		IDE		junctionAlias
1531		ART		+
1531		CAD		"."
1531		ART		+
1531		IDE		joinColumn
1531		DEL		.
1531		IDE		propertyPath
1531		ART		+
1531		CAD		"="
1531		ART		+
1531		IDE		parentAlias
1531		ART		+
1531		CAD		"."
1531		ART		+
1531		IDE		joinColumn
1531		DEL		.
1531		IDE		referencedColumn
1531		LOG		!
1531		DEL		.
1531		IDE		propertyPath
1531		DEL		;
1532		DEL		}
1532		DEL		)
1532		DEL		.
1532		IDE		join
1532		DEL		(
1532		CAD		" AND "
1532		DEL		)
1532		DEL		;
1534		IDE		destinationCondition
1534		REL		=
1534		IDE		relation
1534		DEL		.
1534		IDE		inverseJoinColumns
1534		DEL		.
1534		IDE		map
1534		DEL		(
1534		IDE		joinColumn
1534		REL		=
1534		REL		>
1534		DEL		{
1536		PRE		return
1536		IDE		destinationTableAlias
1536		ART		+
1536		CAD		"."
1536		ART		+
1536		IDE		joinColumn
1536		DEL		.
1536		IDE		referencedColumn
1536		LOG		!
1536		DEL		.
1536		IDE		propertyPath
1536		ART		+
1536		CAD		"="
1536		ART		+
1536		IDE		junctionAlias
1536		ART		+
1536		CAD		"."
1536		ART		+
1536		IDE		joinColumn
1536		DEL		.
1536		IDE		propertyPath
1536		DEL		;
1537		DEL		}
1537		DEL		)
1537		DEL		.
1537		IDE		join
1537		DEL		(
1537		CAD		" AND "
1537		DEL		)
1537		DEL		;
1539		DEL		}
1539		PRE		else
1539		DEL		{
1540		IDE		junctionCondition
1540		REL		=
1540		IDE		relation
1540		DEL		.
1540		IDE		inverseRelation
1540		LOG		!
1540		DEL		.
1540		IDE		inverseJoinColumns
1540		DEL		.
1540		IDE		map
1540		DEL		(
1540		IDE		joinColumn
1540		REL		=
1540		REL		>
1540		DEL		{
1542		PRE		return
1542		IDE		junctionAlias
1542		ART		+
1542		CAD		"."
1542		ART		+
1542		IDE		joinColumn
1542		DEL		.
1542		IDE		propertyPath
1542		ART		+
1542		CAD		"="
1542		ART		+
1542		IDE		parentAlias
1542		ART		+
1542		CAD		"."
1542		ART		+
1542		IDE		joinColumn
1542		DEL		.
1542		IDE		referencedColumn
1542		LOG		!
1542		DEL		.
1542		IDE		propertyPath
1542		DEL		;
1543		DEL		}
1543		DEL		)
1543		DEL		.
1543		IDE		join
1543		DEL		(
1543		CAD		" AND "
1543		DEL		)
1543		DEL		;
1545		IDE		destinationCondition
1545		REL		=
1545		IDE		relation
1545		DEL		.
1545		IDE		inverseRelation
1545		LOG		!
1545		DEL		.
1545		IDE		joinColumns
1545		DEL		.
1545		IDE		map
1545		DEL		(
1545		IDE		joinColumn
1545		REL		=
1545		REL		>
1545		DEL		{
1547		PRE		return
1547		IDE		destinationTableAlias
1547		ART		+
1547		CAD		"."
1547		ART		+
1547		IDE		joinColumn
1547		DEL		.
1547		IDE		referencedColumn
1547		LOG		!
1547		DEL		.
1547		IDE		propertyPath
1547		ART		+
1547		CAD		"="
1547		ART		+
1547		IDE		junctionAlias
1547		ART		+
1547		CAD		"."
1547		ART		+
1547		IDE		joinColumn
1547		DEL		.
1547		IDE		propertyPath
1547		DEL		;
1548		DEL		}
1548		DEL		)
1548		DEL		.
1548		IDE		join
1548		DEL		(
1548		CAD		" AND "
1548		DEL		)
1548		DEL		;
1549		DEL		}
1551		PRE		return
1551		CAD		" "
1551		ART		+
1551		IDE		joinAttr
1551		DEL		.
1551		IDE		direction
1551		ART		+
1551		CAD		" JOIN "
1551		ART		+
1551		IDE		this
1551		DEL		.
1551		IDE		getTableName
1551		DEL		(
1551		IDE		junctionTableName
1551		DEL		)
1551		ART		+
1551		CAD		" "
1551		ART		+
1551		IDE		this
1551		DEL		.
1551		IDE		escape
1551		DEL		(
1551		IDE		junctionAlias
1551		DEL		)
1551		ART		+
1551		CAD		" ON "
1551		ART		+
1551		IDE		this
1551		DEL		.
1551		IDE		replacePropertyNames
1551		DEL		(
1551		IDE		junctionCondition
1551		DEL		)
1551		ART		+
1552		CAD		" "
1552		ART		+
1552		IDE		joinAttr
1552		DEL		.
1552		IDE		direction
1552		ART		+
1552		CAD		" JOIN "
1552		ART		+
1552		IDE		this
1552		DEL		.
1552		IDE		getTableName
1552		DEL		(
1552		IDE		destinationTableName
1552		DEL		)
1552		ART		+
1552		CAD		" "
1552		ART		+
1552		IDE		this
1552		DEL		.
1552		IDE		escape
1552		DEL		(
1552		IDE		destinationTableAlias
1552		DEL		)
1552		ART		+
1552		CAD		" ON "
1552		ART		+
1552		IDE		this
1552		DEL		.
1552		IDE		replacePropertyNames
1552		DEL		(
1552		IDE		destinationCondition
1552		ART		+
1552		IDE		appendedCondition
1552		DEL		)
1552		DEL		;
1554		DEL		}
1555		DEL		}
1555		DEL		)
1555		DEL		;
1557		PRE		return
1557		IDE		joins
1557		DEL		.
1557		IDE		join
1557		DEL		(
1557		CAD		" "
1557		DEL		)
1557		DEL		;
1558		DEL		}
1563		IDE		protected
1563		IDE		createGroupByExpression
1563		DEL		(
1563		DEL		)
1563		DEL		{
1564		PRE		if
1564		DEL		(
1564		LOG		!
1564		IDE		this
1564		DEL		.
1564		IDE		expressionMap
1564		DEL		.
1564		IDE		groupBys
1564		LOG		!
1564		IDE		this
1564		DEL		.
1564		IDE		expressionMap
1564		DEL		.
1564		IDE		groupBys
1564		DEL		.
1564		IDE		length
1564		DEL		)
1564		PRE		return
1564		CAD		""
1564		DEL		;
1565		PRE		return
1565		CAD		" GROUP BY "
1565		ART		+
1565		IDE		this
1565		DEL		.
1565		IDE		replacePropertyNames
1565		DEL		(
1565		IDE		this
1565		DEL		.
1565		IDE		expressionMap
1565		DEL		.
1565		IDE		groupBys
1565		DEL		.
1565		IDE		join
1565		DEL		(
1565		CAD		", "
1565		DEL		)
1565		DEL		)
1565		DEL		;
1566		DEL		}
1571		IDE		protected
1571		IDE		createOrderByExpression
1571		DEL		(
1571		DEL		)
1571		DEL		{
1572		PRE		const
1572		IDE		orderBys
1572		REL		=
1572		IDE		this
1572		DEL		.
1572		IDE		expressionMap
1572		DEL		.
1572		IDE		allOrderBys
1572		DEL		;
1573		PRE		if
1573		DEL		(
1573		IDE		Object
1573		DEL		.
1573		IDE		keys
1573		DEL		(
1573		IDE		orderBys
1573		DEL		)
1573		DEL		.
1573		IDE		length
1573		REL		>
1573		NRO		0
1573		DEL		)
1574		PRE		return
1574		CAD		" ORDER BY "
1574		ART		+
1574		IDE		Object
1574		DEL		.
1574		IDE		keys
1574		DEL		(
1574		IDE		orderBys
1574		DEL		)
1575		DEL		.
1575		IDE		map
1575		DEL		(
1575		IDE		columnName
1575		REL		=
1575		REL		>
1575		DEL		{
1576		PRE		if
1576		DEL		(
1576		IDE		typeof
1576		IDE		orderBys
1576		DEL		[
1576		IDE		columnName
1576		DEL		]
1576		REL		==
1576		REL		=
1576		CAD		"string"
1576		DEL		)
1576		DEL		{
1577		PRE		return
1577		IDE		this
1577		DEL		.
1577		IDE		replacePropertyNames
1577		DEL		(
1577		IDE		columnName
1577		DEL		)
1577		ART		+
1577		CAD		" "
1577		ART		+
1577		IDE		orderBys
1577		DEL		[
1577		IDE		columnName
1577		DEL		]
1577		DEL		;
1578		DEL		}
1578		PRE		else
1578		DEL		{
1579		PRE		return
1579		IDE		this
1579		DEL		.
1579		IDE		replacePropertyNames
1579		DEL		(
1579		IDE		columnName
1579		DEL		)
1579		ART		+
1579		CAD		" "
1579		ART		+
1579		DEL		(
1579		IDE		orderBys
1579		DEL		[
1579		IDE		columnName
1579		DEL		]
1579		IDE		as
1579		IDE		any
1579		DEL		)
1579		DEL		.
1579		IDE		order
1579		ART		+
1579		CAD		" "
1579		ART		+
1579		DEL		(
1579		IDE		orderBys
1579		DEL		[
1579		IDE		columnName
1579		DEL		]
1579		IDE		as
1579		IDE		any
1579		DEL		)
1579		DEL		.
1579		IDE		nulls
1579		DEL		;
1580		DEL		}
1581		DEL		}
1581		DEL		)
1582		DEL		.
1582		IDE		join
1582		DEL		(
1582		CAD		", "
1582		DEL		)
1582		DEL		;
1584		PRE		return
1584		CAD		""
1584		DEL		;
1585		DEL		}
1590		IDE		protected
1590		IDE		createLimitOffsetExpression
1590		DEL		(
1590		DEL		)
1590		PRE		string
1590		DEL		{
1593		IDE		let
1593		IDE		offset
1593		IDE		numberundefined
1593		REL		=
1593		IDE		this
1593		DEL		.
1593		IDE		expressionMap
1593		DEL		.
1593		IDE		offset
1593		DEL		,
1594		IDE		limit
1594		IDE		numberundefined
1594		REL		=
1594		IDE		this
1594		DEL		.
1594		IDE		expressionMap
1594		DEL		.
1594		IDE		limit
1594		DEL		;
1595		PRE		if
1595		DEL		(
1595		LOG		!
1595		IDE		offset
1595		LOG		&&
1595		LOG		!
1595		IDE		limit
1595		LOG		&&
1595		IDE		this
1595		DEL		.
1595		IDE		expressionMap
1595		DEL		.
1595		IDE		joinAttributes
1595		DEL		.
1595		IDE		length
1595		REL		==
1595		REL		=
1595		NRO		0
1595		DEL		)
1595		DEL		{
1596		IDE		offset
1596		REL		=
1596		IDE		this
1596		DEL		.
1596		IDE		expressionMap
1596		DEL		.
1596		IDE		skip
1596		DEL		;
1597		IDE		limit
1597		REL		=
1597		IDE		this
1597		DEL		.
1597		IDE		expressionMap
1597		DEL		.
1597		IDE		take
1597		DEL		;
1598		DEL		}
1600		PRE		if
1600		DEL		(
1600		IDE		this
1600		DEL		.
1600		IDE		connection
1600		DEL		.
1600		IDE		driver
1600		IDE		instanceof
1600		IDE		SqlServerDriver
1600		DEL		)
1600		DEL		{
1606		IDE		let
1606		IDE		prefix
1606		REL		=
1606		CAD		""
1606		DEL		;
1607		PRE		if
1607		DEL		(
1607		DEL		(
1607		IDE		limit
1607		IDE		offset
1607		DEL		)
1607		LOG		&&
1607		IDE		Object
1607		DEL		.
1607		IDE		keys
1607		DEL		(
1607		IDE		this
1607		DEL		.
1607		IDE		expressionMap
1607		DEL		.
1607		IDE		allOrderBys
1607		DEL		)
1607		DEL		.
1607		IDE		length
1607		REL		<=
1607		NRO		0
1607		DEL		)
1607		DEL		{
1608		IDE		prefix
1608		REL		=
1608		CAD		" ORDER BY (SELECT NULL)"
1608		DEL		;
1609		DEL		}
1611		PRE		if
1611		DEL		(
1611		IDE		limit
1611		LOG		&&
1611		IDE		offset
1611		DEL		)
1612		PRE		return
1612		IDE		prefix
1612		ART		+
1612		CAD		" OFFSET "
1612		ART		+
1612		IDE		offset
1612		ART		+
1612		CAD		" ROWS FETCH NEXT "
1612		ART		+
1612		IDE		limit
1612		ART		+
1612		CAD		" ROWS ONLY"
1612		DEL		;
1613		PRE		if
1613		DEL		(
1613		IDE		limit
1613		DEL		)
1614		PRE		return
1614		IDE		prefix
1614		ART		+
1614		CAD		" OFFSET 0 ROWS FETCH NEXT "
1614		ART		+
1614		IDE		limit
1614		ART		+
1614		CAD		" ROWS ONLY"
1614		DEL		;
1615		PRE		if
1615		DEL		(
1615		IDE		offset
1615		DEL		)
1616		PRE		return
1616		IDE		prefix
1616		ART		+
1616		CAD		" OFFSET "
1616		ART		+
1616		IDE		offset
1616		ART		+
1616		CAD		" ROWS"
1616		DEL		;
1618		DEL		}
1618		PRE		else
1618		PRE		if
1618		DEL		(
1618		IDE		this
1618		DEL		.
1618		IDE		connection
1618		DEL		.
1618		IDE		driver
1618		IDE		instanceof
1618		IDE		MysqlDriver
1618		IDE		this
1618		DEL		.
1618		IDE		connection
1618		DEL		.
1618		IDE		driver
1618		IDE		instanceof
1618		IDE		AuroraDataApiDriver
1618		IDE		this
1618		DEL		.
1618		IDE		connection
1618		DEL		.
1618		IDE		driver
1618		IDE		instanceof
1618		IDE		SapDriver
1618		DEL		)
1618		DEL		{
1620		PRE		if
1620		DEL		(
1620		IDE		limit
1620		LOG		&&
1620		IDE		offset
1620		DEL		)
1621		PRE		return
1621		CAD		" LIMIT "
1621		ART		+
1621		IDE		limit
1621		ART		+
1621		CAD		" OFFSET "
1621		ART		+
1621		IDE		offset
1621		DEL		;
1622		PRE		if
1622		DEL		(
1622		IDE		limit
1622		DEL		)
1623		PRE		return
1623		CAD		" LIMIT "
1623		ART		+
1623		IDE		limit
1623		DEL		;
1624		PRE		if
1624		DEL		(
1624		IDE		offset
1624		DEL		)
1625		IDE		throw
1625		IDE		new
1625		IDE		OffsetWithoutLimitNotSupportedError
1625		DEL		(
1625		DEL		)
1625		DEL		;
1627		DEL		}
1627		PRE		else
1627		PRE		if
1627		DEL		(
1627		IDE		this
1627		DEL		.
1627		IDE		connection
1627		DEL		.
1627		IDE		driver
1627		IDE		instanceof
1627		IDE		AbstractSqliteDriver
1627		DEL		)
1627		DEL		{
1629		PRE		if
1629		DEL		(
1629		IDE		limit
1629		LOG		&&
1629		IDE		offset
1629		DEL		)
1630		PRE		return
1630		CAD		" LIMIT "
1630		ART		+
1630		IDE		limit
1630		ART		+
1630		CAD		" OFFSET "
1630		ART		+
1630		IDE		offset
1630		DEL		;
1631		PRE		if
1631		DEL		(
1631		IDE		limit
1631		DEL		)
1632		PRE		return
1632		CAD		" LIMIT "
1632		ART		+
1632		IDE		limit
1632		DEL		;
1633		PRE		if
1633		DEL		(
1633		IDE		offset
1633		DEL		)
1634		PRE		return
1634		CAD		" LIMIT -1 OFFSET "
1634		ART		+
1634		IDE		offset
1634		DEL		;
1636		DEL		}
1636		PRE		else
1636		PRE		if
1636		DEL		(
1636		IDE		this
1636		DEL		.
1636		IDE		connection
1636		DEL		.
1636		IDE		driver
1636		IDE		instanceof
1636		IDE		OracleDriver
1636		DEL		)
1636		DEL		{
1638		PRE		if
1638		DEL		(
1638		IDE		limit
1638		LOG		&&
1638		IDE		offset
1638		DEL		)
1639		PRE		return
1639		CAD		" OFFSET "
1639		ART		+
1639		IDE		offset
1639		ART		+
1639		CAD		" ROWS FETCH NEXT "
1639		ART		+
1639		IDE		limit
1639		ART		+
1639		CAD		" ROWS ONLY"
1639		DEL		;
1640		PRE		if
1640		DEL		(
1640		IDE		limit
1640		DEL		)
1641		PRE		return
1641		CAD		" FETCH NEXT "
1641		ART		+
1641		IDE		limit
1641		ART		+
1641		CAD		" ROWS ONLY"
1641		DEL		;
1642		PRE		if
1642		DEL		(
1642		IDE		offset
1642		DEL		)
1643		PRE		return
1643		CAD		" OFFSET "
1643		ART		+
1643		IDE		offset
1643		ART		+
1643		CAD		" ROWS"
1643		DEL		;
1645		DEL		}
1645		PRE		else
1645		DEL		{
1646		PRE		if
1646		DEL		(
1646		IDE		limit
1646		LOG		&&
1646		IDE		offset
1646		DEL		)
1647		PRE		return
1647		CAD		" LIMIT "
1647		ART		+
1647		IDE		limit
1647		ART		+
1647		CAD		" OFFSET "
1647		ART		+
1647		IDE		offset
1647		DEL		;
1648		PRE		if
1648		DEL		(
1648		IDE		limit
1648		DEL		)
1649		PRE		return
1649		CAD		" LIMIT "
1649		ART		+
1649		IDE		limit
1649		DEL		;
1650		PRE		if
1650		DEL		(
1650		IDE		offset
1650		DEL		)
1651		PRE		return
1651		CAD		" OFFSET "
1651		ART		+
1651		IDE		offset
1651		DEL		;
1652		DEL		}
1654		PRE		return
1654		CAD		""
1654		DEL		;
1655		DEL		}
1660		IDE		protected
1660		IDE		createLockExpression
1660		DEL		(
1660		DEL		)
1660		PRE		string
1660		DEL		{
1661		PRE		const
1661		IDE		driver
1661		REL		=
1661		IDE		this
1661		DEL		.
1661		IDE		connection
1661		DEL		.
1661		IDE		driver
1661		DEL		;
1663		IDE		let
1663		IDE		lockTablesClause
1663		REL		=
1663		CAD		""
1663		DEL		;
1665		PRE		if
1665		DEL		(
1665		IDE		this
1665		DEL		.
1665		IDE		expressionMap
1665		DEL		.
1665		IDE		lockTables
1665		DEL		)
1665		DEL		{
1666		PRE		if
1666		DEL		(
1666		LOG		!
1666		DEL		(
1666		IDE		driver
1666		IDE		instanceof
1666		IDE		PostgresDriver
1666		DEL		)
1666		DEL		)
1666		DEL		{
1667		IDE		throw
1667		IDE		new
1667		IDE		Error
1667		DEL		(
1667		CAD		"Lock tables not supported in selected driver"
1667		DEL		)
1667		DEL		;
1668		DEL		}
1669		PRE		if
1669		DEL		(
1669		IDE		this
1669		DEL		.
1669		IDE		expressionMap
1669		DEL		.
1669		IDE		lockTables
1669		DEL		.
1669		IDE		length
1669		REL		<
1669		NRO		1
1669		DEL		)
1669		DEL		{
1670		IDE		throw
1670		IDE		new
1670		IDE		Error
1670		DEL		(
1670		CAD		"lockTables cannot be an empty array"
1670		DEL		)
1670		DEL		;
1671		DEL		}
1672		IDE		lockTablesClause
1672		REL		=
1672		CAD		" OF "
1672		ART		+
1672		IDE		this
1672		DEL		.
1672		IDE		expressionMap
1672		DEL		.
1672		IDE		lockTables
1672		DEL		.
1672		IDE		join
1672		DEL		(
1672		CAD		", "
1672		DEL		)
1672		DEL		;
1673		DEL		}
1675		IDE		switch
1675		DEL		(
1675		IDE		this
1675		DEL		.
1675		IDE		expressionMap
1675		DEL		.
1675		IDE		lockMode
1675		DEL		)
1675		DEL		{
1676		IDE		case
1676		CAD		"pessimisticread"
1677		PRE		if
1677		DEL		(
1677		IDE		driver
1677		IDE		instanceof
1677		IDE		MysqlDriver
1677		IDE		driver
1677		IDE		instanceof
1677		IDE		AuroraDataApiDriver
1677		DEL		)
1677		DEL		{
1678		PRE		return
1678		CAD		" LOCK IN SHARE MODE"
1678		DEL		;
1680		DEL		}
1680		PRE		else
1680		PRE		if
1680		DEL		(
1680		IDE		driver
1680		IDE		instanceof
1680		IDE		PostgresDriver
1680		DEL		)
1680		DEL		{
1681		PRE		return
1681		CAD		" FOR SHARE"
1681		ART		+
1681		IDE		lockTablesClause
1681		DEL		;
1683		DEL		}
1683		PRE		else
1683		PRE		if
1683		DEL		(
1683		IDE		driver
1683		IDE		instanceof
1683		IDE		OracleDriver
1683		DEL		)
1683		DEL		{
1684		PRE		return
1684		CAD		" FOR UPDATE"
1684		DEL		;
1686		DEL		}
1686		PRE		else
1686		PRE		if
1686		DEL		(
1686		IDE		driver
1686		IDE		instanceof
1686		IDE		SqlServerDriver
1686		DEL		)
1686		DEL		{
1687		PRE		return
1687		CAD		""
1687		DEL		;
1689		DEL		}
1689		PRE		else
1689		DEL		{
1690		IDE		throw
1690		IDE		new
1690		IDE		LockNotSupportedOnGivenDriverError
1690		DEL		(
1690		DEL		)
1690		DEL		;
1691		DEL		}
1692		IDE		case
1692		CAD		"pessimisticwrite"
1693		PRE		if
1693		DEL		(
1693		IDE		driver
1693		IDE		instanceof
1693		IDE		MysqlDriver
1693		IDE		driver
1693		IDE		instanceof
1693		IDE		AuroraDataApiDriver
1693		IDE		driver
1693		IDE		instanceof
1693		IDE		OracleDriver
1693		DEL		)
1693		DEL		{
1694		PRE		return
1694		CAD		" FOR UPDATE"
1694		DEL		;
1696		DEL		}
1697		PRE		else
1697		PRE		if
1697		DEL		(
1697		IDE		driver
1697		IDE		instanceof
1697		IDE		PostgresDriver
1697		DEL		)
1697		DEL		{
1698		PRE		return
1698		CAD		" FOR UPDATE"
1698		ART		+
1698		IDE		lockTablesClause
1698		DEL		;
1700		DEL		}
1700		PRE		else
1700		PRE		if
1700		DEL		(
1700		IDE		driver
1700		IDE		instanceof
1700		IDE		SqlServerDriver
1700		DEL		)
1700		DEL		{
1701		PRE		return
1701		CAD		""
1701		DEL		;
1703		DEL		}
1703		PRE		else
1703		DEL		{
1704		IDE		throw
1704		IDE		new
1704		IDE		LockNotSupportedOnGivenDriverError
1704		DEL		(
1704		DEL		)
1704		DEL		;
1705		DEL		}
1706		IDE		case
1706		CAD		"pessimisticpartialwrite"
1707		PRE		if
1707		DEL		(
1707		IDE		driver
1707		IDE		instanceof
1707		IDE		PostgresDriver
1707		DEL		)
1707		DEL		{
1708		PRE		return
1708		CAD		" FOR UPDATE"
1708		ART		+
1708		IDE		lockTablesClause
1708		ART		+
1708		CAD		" SKIP LOCKED"
1708		DEL		;
1710		DEL		}
1710		PRE		else
1710		PRE		if
1710		DEL		(
1710		IDE		driver
1710		IDE		instanceof
1710		IDE		MysqlDriver
1710		DEL		)
1710		DEL		{
1711		PRE		return
1711		CAD		" FOR UPDATE SKIP LOCKED"
1711		DEL		;
1713		DEL		}
1713		PRE		else
1713		DEL		{
1714		IDE		throw
1714		IDE		new
1714		IDE		LockNotSupportedOnGivenDriverError
1714		DEL		(
1714		DEL		)
1714		DEL		;
1715		DEL		}
1716		IDE		case
1716		CAD		"pessimisticwriteorfail"
1717		PRE		if
1717		DEL		(
1717		IDE		driver
1717		IDE		instanceof
1717		IDE		PostgresDriver
1717		DEL		)
1717		DEL		{
1718		PRE		return
1718		CAD		" FOR UPDATE"
1718		ART		+
1718		IDE		lockTablesClause
1718		ART		+
1718		CAD		" NOWAIT"
1718		DEL		;
1720		DEL		}
1720		PRE		else
1720		PRE		if
1720		DEL		(
1720		IDE		driver
1720		IDE		instanceof
1720		IDE		MysqlDriver
1720		DEL		)
1720		DEL		{
1721		PRE		return
1721		CAD		" FOR UPDATE NOWAIT"
1721		DEL		;
1723		DEL		}
1723		PRE		else
1723		DEL		{
1724		IDE		throw
1724		IDE		new
1724		IDE		LockNotSupportedOnGivenDriverError
1724		DEL		(
1724		DEL		)
1724		DEL		;
1725		DEL		}
1727		IDE		case
1727		CAD		"fornokeyupdate"
1728		PRE		if
1728		DEL		(
1728		IDE		driver
1728		IDE		instanceof
1728		IDE		PostgresDriver
1728		DEL		)
1728		DEL		{
1729		PRE		return
1729		CAD		" FOR NO KEY UPDATE"
1729		ART		+
1729		IDE		lockTablesClause
1729		DEL		;
1730		DEL		}
1730		PRE		else
1730		DEL		{
1731		IDE		throw
1731		IDE		new
1731		IDE		LockNotSupportedOnGivenDriverError
1731		DEL		(
1731		DEL		)
1731		DEL		;
1732		DEL		}
1733		IDE		default
1734		PRE		return
1734		CAD		""
1734		DEL		;
1735		DEL		}
1736		DEL		}
1741		IDE		protected
1741		IDE		createHavingExpression
1741		DEL		(
1741		DEL		)
1741		DEL		{
1742		PRE		if
1742		DEL		(
1742		LOG		!
1742		IDE		this
1742		DEL		.
1742		IDE		expressionMap
1742		DEL		.
1742		IDE		havings
1742		LOG		!
1742		IDE		this
1742		DEL		.
1742		IDE		expressionMap
1742		DEL		.
1742		IDE		havings
1742		DEL		.
1742		IDE		length
1742		DEL		)
1742		PRE		return
1742		CAD		""
1742		DEL		;
1743		PRE		const
1743		IDE		conditions
1743		REL		=
1743		IDE		this
1743		DEL		.
1743		IDE		expressionMap
1743		DEL		.
1743		IDE		havings
1743		DEL		.
1743		IDE		map
1743		DEL		(
1743		DEL		(
1743		IDE		having
1743		DEL		,
1743		IDE		index
1743		DEL		)
1743		REL		=
1743		REL		>
1743		DEL		{
1744		IDE		switch
1744		DEL		(
1744		IDE		having
1744		DEL		.
1744		IDE		type
1744		DEL		)
1744		DEL		{
1745		IDE		case
1745		CAD		"and"
1746		PRE		return
1746		DEL		(
1746		IDE		index
1746		REL		>
1746		NRO		0
1746		CAD		"AND "
1746		CAD		""
1746		DEL		)
1746		ART		+
1746		IDE		this
1746		DEL		.
1746		IDE		replacePropertyNames
1746		DEL		(
1746		IDE		having
1746		DEL		.
1746		IDE		condition
1746		DEL		)
1746		DEL		;
1747		IDE		case
1747		CAD		"or"
1748		PRE		return
1748		DEL		(
1748		IDE		index
1748		REL		>
1748		NRO		0
1748		CAD		"OR "
1748		CAD		""
1748		DEL		)
1748		ART		+
1748		IDE		this
1748		DEL		.
1748		IDE		replacePropertyNames
1748		DEL		(
1748		IDE		having
1748		DEL		.
1748		IDE		condition
1748		DEL		)
1748		DEL		;
1749		IDE		default
1750		PRE		return
1750		IDE		this
1750		DEL		.
1750		IDE		replacePropertyNames
1750		DEL		(
1750		IDE		having
1750		DEL		.
1750		IDE		condition
1750		DEL		)
1750		DEL		;
1751		DEL		}
1752		DEL		}
1752		DEL		)
1752		DEL		.
1752		IDE		join
1752		DEL		(
1752		CAD		" "
1752		DEL		)
1752		DEL		;
1754		PRE		if
1754		DEL		(
1754		LOG		!
1754		IDE		conditions
1754		DEL		.
1754		IDE		length
1754		DEL		)
1754		PRE		return
1754		CAD		""
1754		DEL		;
1755		PRE		return
1755		CAD		" HAVING "
1755		ART		+
1755		IDE		conditions
1755		DEL		;
1756		DEL		}
1758		IDE		protected
1758		IDE		buildEscapedEntityColumnSelects
1758		DEL		(
1758		IDE		aliasName
1758		PRE		string
1758		DEL		,
1758		IDE		metadata
1758		IDE		EntityMetadata
1758		DEL		)
1758		IDE		SelectQuery
1758		DEL		[
1758		DEL		]
1758		DEL		{
1759		PRE		const
1759		IDE		hasMainAlias
1759		REL		=
1759		IDE		this
1759		DEL		.
1759		IDE		expressionMap
1759		DEL		.
1759		IDE		selects
1759		DEL		.
1759		IDE		some
1759		DEL		(
1759		IDE		select
1759		REL		=
1759		REL		>
1759		IDE		select
1759		DEL		.
1759		IDE		selection
1759		REL		==
1759		REL		=
1759		IDE		aliasName
1759		DEL		)
1759		DEL		;
1761		PRE		const
1761		IDE		columns
1761		IDE		ColumnMetadata
1761		DEL		[
1761		DEL		]
1761		REL		=
1761		DEL		[
1761		DEL		]
1761		DEL		;
1762		PRE		if
1762		DEL		(
1762		IDE		hasMainAlias
1762		DEL		)
1762		DEL		{
1763		IDE		columns
1763		DEL		.
1763		IDE		push
1763		DEL		(
1763		DEL		.
1763		DEL		.
1763		DEL		.
1763		IDE		metadata
1763		DEL		.
1763		IDE		columns
1763		DEL		.
1763		IDE		filter
1763		DEL		(
1763		IDE		column
1763		REL		=
1763		REL		>
1763		IDE		column
1763		DEL		.
1763		IDE		isSelect
1763		REL		==
1763		REL		=
1763		PRE		true
1763		DEL		)
1763		DEL		)
1763		DEL		;
1764		DEL		}
1765		IDE		columns
1765		DEL		.
1765		IDE		push
1765		DEL		(
1765		DEL		.
1765		DEL		.
1765		DEL		.
1765		IDE		metadata
1765		DEL		.
1765		IDE		columns
1765		DEL		.
1765		IDE		filter
1765		DEL		(
1765		IDE		column
1765		REL		=
1765		REL		>
1765		DEL		{
1766		PRE		return
1766		IDE		this
1766		DEL		.
1766		IDE		expressionMap
1766		DEL		.
1766		IDE		selects
1766		DEL		.
1766		IDE		some
1766		DEL		(
1766		IDE		select
1766		REL		=
1766		REL		>
1766		IDE		select
1766		DEL		.
1766		IDE		selection
1766		REL		==
1766		REL		=
1766		IDE		aliasName
1766		ART		+
1766		CAD		"."
1766		ART		+
1766		IDE		column
1766		DEL		.
1766		IDE		propertyPath
1766		DEL		)
1766		DEL		;
1767		DEL		}
1767		DEL		)
1767		DEL		)
1767		DEL		;
1772		PRE		if
1772		DEL		(
1772		IDE		columns
1772		DEL		.
1772		IDE		length
1772		REL		==
1772		REL		=
1772		NRO		0
1772		DEL		)
1773		PRE		return
1773		DEL		[
1773		DEL		]
1773		DEL		;
1775		PRE		const
1775		IDE		nonSelectedPrimaryColumns
1775		REL		=
1775		IDE		this
1775		DEL		.
1775		IDE		expressionMap
1775		DEL		.
1775		IDE		queryEntity
1775		IDE		metadata
1775		DEL		.
1775		IDE		primaryColumns
1775		DEL		.
1775		IDE		filter
1775		DEL		(
1775		IDE		primaryColumn
1775		REL		=
1775		REL		>
1775		IDE		columns
1775		DEL		.
1775		IDE		indexOf
1775		DEL		(
1775		IDE		primaryColumn
1775		DEL		)
1775		REL		==
1775		REL		=
1775		ART		-
1775		NRO		1
1775		DEL		)
1775		DEL		[
1775		DEL		]
1775		DEL		;
1776		PRE		const
1776		IDE		allColumns
1776		REL		=
1776		DEL		[
1776		DEL		.
1776		DEL		.
1776		DEL		.
1776		IDE		columns
1776		DEL		,
1776		DEL		.
1776		DEL		.
1776		DEL		.
1776		IDE		nonSelectedPrimaryColumns
1776		DEL		]
1776		DEL		;
1778		PRE		return
1778		IDE		allColumns
1778		DEL		.
1778		IDE		map
1778		DEL		(
1778		IDE		column
1778		REL		=
1778		REL		>
1778		DEL		{
1779		PRE		const
1779		IDE		selection
1779		REL		=
1779		IDE		this
1779		DEL		.
1779		IDE		expressionMap
1779		DEL		.
1779		IDE		selects
1779		DEL		.
1779		IDE		find
1779		DEL		(
1779		IDE		select
1779		REL		=
1779		REL		>
1779		IDE		select
1779		DEL		.
1779		IDE		selection
1779		REL		==
1779		REL		=
1779		IDE		aliasName
1779		ART		+
1779		CAD		"."
1779		ART		+
1779		IDE		column
1779		DEL		.
1779		IDE		propertyPath
1779		DEL		)
1779		DEL		;
1780		IDE		let
1780		IDE		selectionPath
1780		REL		=
1780		IDE		this
1780		DEL		.
1780		IDE		escape
1780		DEL		(
1780		IDE		aliasName
1780		DEL		)
1780		ART		+
1780		CAD		"."
1780		ART		+
1780		IDE		this
1780		DEL		.
1780		IDE		escape
1780		DEL		(
1780		IDE		column
1780		DEL		.
1780		IDE		databaseName
1780		DEL		)
1780		DEL		;
1781		PRE		if
1781		DEL		(
1781		IDE		this
1781		DEL		.
1781		IDE		connection
1781		DEL		.
1781		IDE		driver
1781		DEL		.
1781		IDE		spatialTypes
1781		DEL		.
1781		IDE		indexOf
1781		DEL		(
1781		IDE		column
1781		DEL		.
1781		IDE		type
1781		DEL		)
1781		REL		!=
1781		REL		=
1781		ART		-
1781		NRO		1
1781		DEL		)
1781		DEL		{
1782		PRE		if
1782		DEL		(
1782		IDE		this
1782		DEL		.
1782		IDE		connection
1782		DEL		.
1782		IDE		driver
1782		IDE		instanceof
1782		IDE		MysqlDriver
1782		IDE		this
1782		DEL		.
1782		IDE		connection
1782		DEL		.
1782		IDE		driver
1782		IDE		instanceof
1782		IDE		AuroraDataApiDriver
1782		DEL		)
1782		DEL		{
1783		PRE		const
1783		IDE		useLegacy
1783		REL		=
1783		IDE		this
1783		DEL		.
1783		IDE		connection
1783		DEL		.
1783		IDE		driver
1783		DEL		.
1783		IDE		options
1783		DEL		.
1783		IDE		legacySpatialSupport
1783		DEL		;
1784		PRE		const
1784		IDE		asText
1784		REL		=
1784		IDE		useLegacy
1784		CAD		"AsText"
1784		CAD		"STAsText"
1784		DEL		;
1785		IDE		selectionPath
1785		REL		=
1785		DEL		{
1785		IDE		asText
1785		DEL		}
1785		DEL		(
1785		DEL		{
1785		IDE		selectionPath
1785		DEL		}
1785		DEL		)
1785		DEL		;
1786		DEL		}
1788		PRE		if
1788		DEL		(
1788		IDE		this
1788		DEL		.
1788		IDE		connection
1788		DEL		.
1788		IDE		driver
1788		IDE		instanceof
1788		IDE		PostgresDriver
1788		DEL		)
1790		PRE		if
1790		DEL		(
1790		IDE		column
1790		DEL		.
1790		IDE		precision
1790		DEL		)
1790		DEL		{
1791		IDE		selectionPath
1791		REL		=
1791		IDE		STAsGeoJSON
1791		DEL		(
1791		DEL		{
1791		IDE		selectionPath
1791		DEL		}
1791		DEL		,
1791		DEL		{
1791		IDE		column
1791		DEL		.
1791		IDE		precision
1791		DEL		}
1791		DEL		)
1791		IDE		json
1791		DEL		;
1792		DEL		}
1792		PRE		else
1792		DEL		{
1793		IDE		selectionPath
1793		REL		=
1793		IDE		STAsGeoJSON
1793		DEL		(
1793		DEL		{
1793		IDE		selectionPath
1793		DEL		}
1793		DEL		)
1793		IDE		json
1793		DEL		;
1794		DEL		}
1795		PRE		if
1795		DEL		(
1795		IDE		this
1795		DEL		.
1795		IDE		connection
1795		DEL		.
1795		IDE		driver
1795		IDE		instanceof
1795		IDE		SqlServerDriver
1795		DEL		)
1796		IDE		selectionPath
1796		REL		=
1796		DEL		{
1796		IDE		selectionPath
1796		DEL		}
1796		DEL		.
1796		IDE		ToString
1796		DEL		(
1796		DEL		)
1796		DEL		;
1797		DEL		}
1798		PRE		return
1798		DEL		{
1799		IDE		selection
1799		IDE		selectionPath
1799		DEL		,
1800		IDE		aliasName
1800		IDE		selection
1800		LOG		&&
1800		IDE		selection
1800		DEL		.
1800		IDE		aliasName
1800		IDE		selection
1800		DEL		.
1800		IDE		aliasName
1800		IDE		DriverUtils
1800		DEL		.
1800		IDE		buildColumnAlias
1800		DEL		(
1800		IDE		this
1800		DEL		.
1800		IDE		connection
1800		DEL		.
1800		IDE		driver
1800		DEL		,
1800		IDE		aliasName
1800		DEL		,
1800		IDE		column
1800		DEL		.
1800		IDE		databaseName
1800		DEL		)
1800		DEL		,
1802		IDE		virtual
1802		IDE		selection
1802		IDE		selection
1802		DEL		.
1802		IDE		virtual
1802		REL		==
1802		REL		=
1802		PRE		true
1802		DEL		(
1802		IDE		hasMainAlias
1802		PRE		false
1802		PRE		true
1802		DEL		)
1802		DEL		,
1803		DEL		}
1803		DEL		;
1804		DEL		}
1804		DEL		)
1804		DEL		;
1805		DEL		}
1807		IDE		protected
1807		IDE		findEntityColumnSelects
1807		DEL		(
1807		IDE		aliasName
1807		PRE		string
1807		DEL		,
1807		IDE		metadata
1807		IDE		EntityMetadata
1807		DEL		)
1807		IDE		SelectQuery
1807		DEL		[
1807		DEL		]
1807		DEL		{
1808		PRE		const
1808		IDE		mainSelect
1808		REL		=
1808		IDE		this
1808		DEL		.
1808		IDE		expressionMap
1808		DEL		.
1808		IDE		selects
1808		DEL		.
1808		IDE		find
1808		DEL		(
1808		IDE		select
1808		REL		=
1808		REL		>
1808		IDE		select
1808		DEL		.
1808		IDE		selection
1808		REL		==
1808		REL		=
1808		IDE		aliasName
1808		DEL		)
1808		DEL		;
1809		PRE		if
1809		DEL		(
1809		IDE		mainSelect
1809		DEL		)
1810		PRE		return
1810		DEL		[
1810		IDE		mainSelect
1810		DEL		]
1810		DEL		;
1812		PRE		return
1812		IDE		this
1812		DEL		.
1812		IDE		expressionMap
1812		DEL		.
1812		IDE		selects
1812		DEL		.
1812		IDE		filter
1812		DEL		(
1812		IDE		select
1812		REL		=
1812		REL		>
1812		DEL		{
1813		PRE		return
1813		IDE		metadata
1813		DEL		.
1813		IDE		columns
1813		DEL		.
1813		IDE		some
1813		DEL		(
1813		IDE		column
1813		REL		=
1813		REL		>
1813		IDE		select
1813		DEL		.
1813		IDE		selection
1813		REL		==
1813		REL		=
1813		IDE		aliasName
1813		ART		+
1813		CAD		"."
1813		ART		+
1813		IDE		column
1813		DEL		.
1813		IDE		propertyPath
1813		DEL		)
1813		DEL		;
1814		DEL		}
1814		DEL		)
1814		DEL		;
1815		DEL		}
1817		IDE		private
1817		IDE		computeCountExpression
1817		DEL		(
1817		DEL		)
1817		DEL		{
1818		PRE		const
1818		IDE		mainAlias
1818		REL		=
1818		IDE		this
1818		DEL		.
1818		IDE		expressionMap
1818		DEL		.
1818		IDE		mainAlias
1818		LOG		!
1818		DEL		.
1818		IDE		name
1818		DEL		;
1819		PRE		const
1819		IDE		metadata
1819		REL		=
1819		IDE		this
1819		DEL		.
1819		IDE		expressionMap
1819		DEL		.
1819		IDE		mainAlias
1819		LOG		!
1819		DEL		.
1819		IDE		metadata
1819		DEL		;
1821		PRE		const
1821		IDE		primaryColumns
1821		REL		=
1821		IDE		metadata
1821		DEL		.
1821		IDE		primaryColumns
1821		DEL		;
1822		PRE		const
1822		IDE		distinctAlias
1822		REL		=
1822		IDE		this
1822		DEL		.
1822		IDE		escape
1822		DEL		(
1822		IDE		mainAlias
1822		DEL		)
1822		DEL		;
1826		PRE		if
1826		DEL		(
1827		IDE		this
1827		DEL		.
1827		IDE		expressionMap
1827		DEL		.
1827		IDE		joinAttributes
1827		DEL		.
1827		IDE		length
1827		REL		==
1827		REL		=
1827		NRO		0
1827		LOG		&&
1828		IDE		this
1828		DEL		.
1828		IDE		expressionMap
1828		DEL		.
1828		IDE		relationIdAttributes
1828		DEL		.
1828		IDE		length
1828		REL		==
1828		REL		=
1828		NRO		0
1828		LOG		&&
1829		IDE		this
1829		DEL		.
1829		IDE		expressionMap
1829		DEL		.
1829		IDE		relationCountAttributes
1829		DEL		.
1829		IDE		length
1829		REL		==
1829		REL		=
1829		NRO		0
1830		DEL		)
1830		DEL		{
1831		PRE		return
1831		CAD		"COUNT(1)"
1831		DEL		;
1832		DEL		}
1836		PRE		if
1836		DEL		(
1836		IDE		this
1836		DEL		.
1836		IDE		connection
1836		DEL		.
1836		IDE		driver
1836		IDE		instanceof
1836		IDE		CockroachDriver
1836		IDE		this
1836		DEL		.
1836		IDE		connection
1836		DEL		.
1836		IDE		driver
1836		IDE		instanceof
1836		IDE		PostgresDriver
1836		DEL		)
1836		DEL		{
1839		PRE		return
1839		CAD		"COUNT(DISTINCT("
1839		ART		+
1840		IDE		primaryColumns
1840		DEL		.
1840		IDE		map
1840		DEL		(
1840		IDE		c
1840		REL		=
1840		REL		>
1840		DEL		{
1840		IDE		distinctAlias
1840		DEL		}
1840		DEL		.
1840		DEL		{
1840		IDE		this
1840		DEL		.
1840		IDE		escape
1840		DEL		(
1840		IDE		c
1840		DEL		.
1840		IDE		databaseName
1840		DEL		)
1840		DEL		}
1840		DEL		)
1840		DEL		.
1840		IDE		join
1840		DEL		(
1840		CAD		", "
1840		DEL		)
1840		ART		+
1841		CAD		"))"
1841		DEL		;
1842		DEL		}
1844		PRE		if
1844		DEL		(
1844		IDE		this
1844		DEL		.
1844		IDE		connection
1844		DEL		.
1844		IDE		driver
1844		IDE		instanceof
1844		IDE		MysqlDriver
1844		DEL		)
1844		DEL		{
1847		PRE		return
1847		CAD		"COUNT(DISTINCT "
1847		ART		+
1848		IDE		primaryColumns
1848		DEL		.
1848		IDE		map
1848		DEL		(
1848		IDE		c
1848		REL		=
1848		REL		>
1848		DEL		{
1848		IDE		distinctAlias
1848		DEL		}
1848		DEL		.
1848		DEL		{
1848		IDE		this
1848		DEL		.
1848		IDE		escape
1848		DEL		(
1848		IDE		c
1848		DEL		.
1848		IDE		databaseName
1848		DEL		)
1848		DEL		}
1848		DEL		)
1848		DEL		.
1848		IDE		join
1848		DEL		(
1848		CAD		", "
1848		DEL		)
1848		ART		+
1849		CAD		")"
1849		DEL		;
1850		DEL		}
1852		PRE		if
1852		DEL		(
1852		IDE		this
1852		DEL		.
1852		IDE		connection
1852		DEL		.
1852		IDE		driver
1852		IDE		instanceof
1852		IDE		SqlServerDriver
1852		DEL		)
1852		DEL		{
1858		PRE		const
1858		IDE		columnsExpression
1858		REL		=
1858		IDE		primaryColumns
1858		DEL		.
1858		IDE		map
1858		DEL		(
1859		IDE		primaryColumn
1859		REL		=
1859		REL		>
1859		DEL		{
1859		IDE		distinctAlias
1859		DEL		}
1859		DEL		.
1859		DEL		{
1859		IDE		this
1859		DEL		.
1859		IDE		escape
1859		DEL		(
1859		IDE		primaryColumn
1859		DEL		.
1859		IDE		databaseName
1859		DEL		)
1859		DEL		}
1860		DEL		)
1860		DEL		.
1860		IDE		join
1860		DEL		(
1860		CAD		", ';', "
1860		DEL		)
1860		DEL		;
1862		PRE		if
1862		DEL		(
1862		IDE		primaryColumns
1862		DEL		.
1862		IDE		length
1862		REL		==
1862		REL		=
1862		NRO		1
1862		DEL		)
1862		DEL		{
1864		PRE		return
1864		IDE		COUNT
1864		DEL		(
1864		IDE		DISTINCT
1864		DEL		(
1864		DEL		{
1864		IDE		columnsExpression
1864		DEL		}
1864		DEL		)
1864		DEL		)
1864		DEL		;
1865		DEL		}
1867		PRE		return
1867		IDE		COUNT
1867		DEL		(
1867		IDE		DISTINCT
1867		DEL		(
1867		IDE		CONCAT
1867		DEL		(
1867		DEL		{
1867		IDE		columnsExpression
1867		DEL		}
1867		DEL		)
1867		DEL		)
1867		DEL		)
1867		DEL		;
1869		DEL		}
1878		PRE		return
1878		IDE		COUNT
1878		DEL		(
1878		IDE		DISTINCT
1878		DEL		(
1878		ART		+
1879		IDE		primaryColumns
1879		DEL		.
1879		IDE		map
1879		DEL		(
1879		IDE		c
1879		REL		=
1879		REL		>
1879		DEL		{
1879		IDE		distinctAlias
1879		DEL		}
1879		DEL		.
1879		DEL		{
1879		IDE		this
1879		DEL		.
1879		IDE		escape
1879		DEL		(
1879		IDE		c
1879		DEL		.
1879		IDE		databaseName
1879		DEL		)
1879		DEL		}
1879		DEL		)
1879		DEL		.
1879		IDE		join
1879		DEL		(
1879		CAD		"  ';'  "
1879		DEL		)
1879		ART		+
1880		CAD		"))"
1880		DEL		;
1881		DEL		}
1883		IDE		protected
1883		IDE		async
1883		IDE		executeCountQuery
1883		DEL		(
1883		IDE		queryRunner
1883		IDE		QueryRunner
1883		DEL		)
1883		IDE		Promise
1883		REL		<
1883		IDE		number
1883		REL		>
1883		DEL		{
1884		PRE		const
1884		IDE		countSql
1884		REL		=
1884		IDE		this
1884		DEL		.
1884		IDE		computeCountExpression
1884		DEL		(
1884		DEL		)
1884		DEL		;
1886		PRE		const
1886		IDE		results
1886		REL		=
1886		IDE		await
1886		IDE		this
1886		DEL		.
1886		IDE		clone
1886		DEL		(
1886		DEL		)
1887		DEL		.
1887		IDE		orderBy
1887		DEL		(
1887		DEL		)
1888		DEL		.
1888		IDE		groupBy
1888		DEL		(
1888		DEL		)
1889		DEL		.
1889		IDE		offset
1889		DEL		(
1889		IDE		undefined
1889		DEL		)
1890		DEL		.
1890		IDE		limit
1890		DEL		(
1890		IDE		undefined
1890		DEL		)
1891		DEL		.
1891		IDE		skip
1891		DEL		(
1891		IDE		undefined
1891		DEL		)
1892		DEL		.
1892		IDE		take
1892		DEL		(
1892		IDE		undefined
1892		DEL		)
1893		DEL		.
1893		IDE		select
1893		DEL		(
1893		IDE		countSql
1893		DEL		,
1893		CAD		"cnt"
1893		DEL		)
1894		DEL		.
1894		IDE		setOption
1894		DEL		(
1894		CAD		"disable-global-order"
1894		DEL		)
1895		DEL		.
1895		IDE		loadRawResults
1895		DEL		(
1895		IDE		queryRunner
1895		DEL		)
1895		DEL		;
1897		PRE		if
1897		DEL		(
1897		LOG		!
1897		IDE		results
1897		LOG		!
1897		IDE		results
1897		DEL		[
1897		NRO		0
1897		DEL		]
1897		LOG		!
1897		IDE		results
1897		DEL		[
1897		NRO		0
1897		DEL		]
1897		DEL		[
1897		CAD		"cnt"
1897		DEL		]
1897		DEL		)
1898		PRE		return
1898		NRO		0
1898		DEL		;
1900		PRE		return
1900		IDE		parseInt
1900		DEL		(
1900		IDE		results
1900		DEL		[
1900		NRO		0
1900		DEL		]
1900		DEL		[
1900		CAD		"cnt"
1900		DEL		]
1900		DEL		)
1900		DEL		;
1901		DEL		}
1906		IDE		protected
1906		IDE		async
1906		IDE		executeEntitiesAndRawResults
1906		DEL		(
1906		IDE		queryRunner
1906		IDE		QueryRunner
1906		DEL		)
1906		IDE		Promise
1906		REL		<
1906		DEL		{
1906		IDE		entities
1906		IDE		Entity
1906		DEL		[
1906		DEL		]
1906		DEL		,
1906		IDE		raw
1906		IDE		any
1906		DEL		[
1906		DEL		]
1906		DEL		}
1906		REL		>
1906		DEL		{
1908		PRE		if
1908		DEL		(
1908		LOG		!
1908		IDE		this
1908		DEL		.
1908		IDE		expressionMap
1908		DEL		.
1908		IDE		mainAlias
1908		DEL		)
1909		IDE		throw
1909		IDE		new
1909		IDE		Error
1909		DEL		(
1909		IDE		Alias
1909		IDE		is
1909		IDE		not
1909		IDE		set
1909		DEL		.
1909		IDE		Use
1909		CAD		"from"
1909		IDE		method
1909		IDE		to
1909		IDE		set
1909		IDE		an
1909		IDE		alias
1909		DEL		.
1909		DEL		)
1909		DEL		;
1911		PRE		if
1911		DEL		(
1911		DEL		(
1911		IDE		this
1911		DEL		.
1911		IDE		expressionMap
1911		DEL		.
1911		IDE		lockMode
1911		REL		==
1911		REL		=
1911		CAD		"pessimisticread"
1911		IDE		this
1911		DEL		.
1911		IDE		expressionMap
1911		DEL		.
1911		IDE		lockMode
1911		REL		==
1911		REL		=
1911		CAD		"pessimisticwrite"
1911		IDE		this
1911		DEL		.
1911		IDE		expressionMap
1911		DEL		.
1911		IDE		lockMode
1911		REL		==
1911		REL		=
1911		CAD		"pessimisticpartialwrite"
1911		IDE		this
1911		DEL		.
1911		IDE		expressionMap
1911		DEL		.
1911		IDE		lockMode
1911		REL		==
1911		REL		=
1911		CAD		"pessimisticwriteorfail"
1911		IDE		this
1911		DEL		.
1911		IDE		expressionMap
1911		DEL		.
1911		IDE		lockMode
1911		REL		==
1911		REL		=
1911		CAD		"fornokeyupdate"
1911		DEL		)
1911		LOG		&&
1911		LOG		!
1911		IDE		queryRunner
1911		DEL		.
1911		IDE		isTransactionActive
1911		DEL		)
1912		IDE		throw
1912		IDE		new
1912		IDE		PessimisticLockTransactionRequiredError
1912		DEL		(
1912		DEL		)
1912		DEL		;
1914		PRE		if
1914		DEL		(
1914		IDE		this
1914		DEL		.
1914		IDE		expressionMap
1914		DEL		.
1914		IDE		lockMode
1914		REL		==
1914		REL		=
1914		CAD		"optimistic"
1914		DEL		)
1914		DEL		{
1915		PRE		const
1915		IDE		metadata
1915		REL		=
1915		IDE		this
1915		DEL		.
1915		IDE		expressionMap
1915		DEL		.
1915		IDE		mainAlias
1915		DEL		.
1915		IDE		metadata
1915		DEL		;
1916		PRE		if
1916		DEL		(
1916		LOG		!
1916		IDE		metadata
1916		DEL		.
1916		IDE		versionColumn
1916		LOG		&&
1916		LOG		!
1916		IDE		metadata
1916		DEL		.
1916		IDE		updateDateColumn
1916		DEL		)
1917		IDE		throw
1917		IDE		new
1917		IDE		NoVersionOrUpdateDateColumnError
1917		DEL		(
1917		IDE		metadata
1917		DEL		.
1917		IDE		name
1917		DEL		)
1917		DEL		;
1918		DEL		}
1920		PRE		const
1920		IDE		relationIdLoader
1920		REL		=
1920		IDE		new
1920		IDE		RelationIdLoader
1920		DEL		(
1920		IDE		this
1920		DEL		.
1920		IDE		connection
1920		DEL		,
1920		IDE		queryRunner
1920		DEL		,
1920		IDE		this
1920		DEL		.
1920		IDE		expressionMap
1920		DEL		.
1920		IDE		relationIdAttributes
1920		DEL		)
1920		DEL		;
1921		PRE		const
1921		IDE		relationCountLoader
1921		REL		=
1921		IDE		new
1921		IDE		RelationCountLoader
1921		DEL		(
1921		IDE		this
1921		DEL		.
1921		IDE		connection
1921		DEL		,
1921		IDE		queryRunner
1921		DEL		,
1921		IDE		this
1921		DEL		.
1921		IDE		expressionMap
1921		DEL		.
1921		IDE		relationCountAttributes
1921		DEL		)
1921		DEL		;
1922		PRE		const
1922		IDE		relationIdMetadataTransformer
1922		REL		=
1922		IDE		new
1922		IDE		RelationIdMetadataToAttributeTransformer
1922		DEL		(
1922		IDE		this
1922		DEL		.
1922		IDE		expressionMap
1922		DEL		)
1922		DEL		;
1923		IDE		relationIdMetadataTransformer
1923		DEL		.
1923		IDE		transform
1923		DEL		(
1923		DEL		)
1923		DEL		;
1924		PRE		const
1924		IDE		relationCountMetadataTransformer
1924		REL		=
1924		IDE		new
1924		IDE		RelationCountMetadataToAttributeTransformer
1924		DEL		(
1924		IDE		this
1924		DEL		.
1924		IDE		expressionMap
1924		DEL		)
1924		DEL		;
1925		IDE		relationCountMetadataTransformer
1925		DEL		.
1925		IDE		transform
1925		DEL		(
1925		DEL		)
1925		DEL		;
1927		IDE		let
1927		IDE		rawResults
1927		IDE		any
1927		DEL		[
1927		DEL		]
1927		REL		=
1927		DEL		[
1927		DEL		]
1927		DEL		,
1927		IDE		entities
1927		IDE		any
1927		DEL		[
1927		DEL		]
1927		REL		=
1927		DEL		[
1927		DEL		]
1927		DEL		;
1933		PRE		if
1933		DEL		(
1933		DEL		(
1933		IDE		this
1933		DEL		.
1933		IDE		expressionMap
1933		DEL		.
1933		IDE		skip
1933		IDE		this
1933		DEL		.
1933		IDE		expressionMap
1933		DEL		.
1933		IDE		take
1933		DEL		)
1933		LOG		&&
1933		IDE		this
1933		DEL		.
1933		IDE		expressionMap
1933		DEL		.
1933		IDE		joinAttributes
1933		DEL		.
1933		IDE		length
1933		REL		>
1933		NRO		0
1933		DEL		)
1933		DEL		{
1937		PRE		const
1937		DEL		[
1937		IDE		selects
1937		DEL		,
1937		IDE		orderBys
1937		DEL		]
1937		REL		=
1937		IDE		this
1937		DEL		.
1937		IDE		createOrderByCombinedWithSelectExpression
1937		DEL		(
1937		CAD		"distinctAlias"
1937		DEL		)
1937		DEL		;
1938		PRE		const
1938		IDE		metadata
1938		REL		=
1938		IDE		this
1938		DEL		.
1938		IDE		expressionMap
1938		DEL		.
1938		IDE		mainAlias
1938		DEL		.
1938		IDE		metadata
1938		DEL		;
1939		PRE		const
1939		IDE		mainAliasName
1939		REL		=
1939		IDE		this
1939		DEL		.
1939		IDE		expressionMap
1939		DEL		.
1939		IDE		mainAlias
1939		DEL		.
1939		IDE		name
1939		DEL		;
1941		PRE		const
1941		IDE		querySelects
1941		REL		=
1941		IDE		metadata
1941		DEL		.
1941		IDE		primaryColumns
1941		DEL		.
1941		IDE		map
1941		DEL		(
1941		IDE		primaryColumn
1941		REL		=
1941		REL		>
1941		DEL		{
1942		PRE		const
1942		IDE		distinctAlias
1942		REL		=
1942		IDE		this
1942		DEL		.
1942		IDE		escape
1942		DEL		(
1942		CAD		"distinctAlias"
1942		DEL		)
1942		DEL		;
1943		PRE		const
1943		IDE		columnAlias
1943		REL		=
1943		IDE		this
1943		DEL		.
1943		IDE		escape
1943		DEL		(
1943		IDE		DriverUtils
1943		DEL		.
1943		IDE		buildColumnAlias
1943		DEL		(
1943		IDE		this
1943		DEL		.
1943		IDE		connection
1943		DEL		.
1943		IDE		driver
1943		DEL		,
1943		IDE		mainAliasName
1943		DEL		,
1943		IDE		primaryColumn
1943		DEL		.
1943		IDE		databaseName
1943		DEL		)
1943		DEL		)
1943		DEL		;
1944		PRE		if
1944		DEL		(
1944		LOG		!
1944		IDE		orderBys
1944		DEL		[
1944		IDE		columnAlias
1944		DEL		]
1944		DEL		)
1945		IDE		orderBys
1945		DEL		[
1945		IDE		columnAlias
1945		DEL		]
1945		REL		=
1945		CAD		"ASC"
1945		DEL		;
1947		PRE		const
1947		IDE		alias
1947		REL		=
1947		IDE		DriverUtils
1947		DEL		.
1947		IDE		buildColumnAlias
1947		DEL		(
1948		IDE		this
1948		DEL		.
1948		IDE		connection
1948		DEL		.
1948		IDE		driver
1948		DEL		,
1949		CAD		"ids"
1949		ART		+
1949		IDE		mainAliasName
1949		DEL		,
1950		IDE		primaryColumn
1950		DEL		.
1950		IDE		databaseName
1951		DEL		)
1951		DEL		;
1953		PRE		return
1953		DEL		{
1953		IDE		distinctAlias
1953		DEL		}
1953		DEL		.
1953		DEL		{
1953		IDE		columnAlias
1953		DEL		}
1953		IDE		as
1953		CAD		"{alias}"
1953		DEL		;
1954		DEL		}
1954		DEL		)
1954		DEL		;
1956		IDE		rawResults
1956		REL		=
1956		IDE		await
1956		IDE		new
1956		IDE		SelectQueryBuilder
1956		DEL		(
1956		IDE		this
1956		DEL		.
1956		IDE		connection
1956		DEL		,
1956		IDE		queryRunner
1956		DEL		)
1957		DEL		.
1957		IDE		select
1957		DEL		(
1957		IDE		DISTINCT
1957		DEL		{
1957		IDE		querySelects
1957		DEL		.
1957		IDE		join
1957		DEL		(
1957		CAD		", "
1957		DEL		)
1957		DEL		}
1957		DEL		)
1958		DEL		.
1958		IDE		addSelect
1958		DEL		(
1958		IDE		selects
1958		DEL		)
1959		DEL		.
1959		IDE		from
1959		DEL		(
1959		DEL		(
1959		DEL		{
1959		IDE		this
1959		DEL		.
1959		IDE		clone
1959		DEL		(
1959		DEL		)
1959		DEL		.
1959		IDE		orderBy
1959		DEL		(
1959		DEL		)
1959		DEL		.
1959		IDE		getQuery
1959		DEL		(
1959		DEL		)
1959		DEL		}
1959		DEL		)
1959		DEL		,
1959		CAD		"distinctAlias"
1959		DEL		)
1960		DEL		.
1960		IDE		offset
1960		DEL		(
1960		IDE		this
1960		DEL		.
1960		IDE		expressionMap
1960		DEL		.
1960		IDE		skip
1960		DEL		)
1961		DEL		.
1961		IDE		limit
1961		DEL		(
1961		IDE		this
1961		DEL		.
1961		IDE		expressionMap
1961		DEL		.
1961		IDE		take
1961		DEL		)
1962		DEL		.
1962		IDE		orderBy
1962		DEL		(
1962		IDE		orderBys
1962		DEL		)
1963		DEL		.
1963		IDE		cache
1963		DEL		(
1963		IDE		this
1963		DEL		.
1963		IDE		expressionMap
1963		DEL		.
1963		IDE		cache
1963		IDE		this
1963		DEL		.
1963		IDE		expressionMap
1963		DEL		.
1963		IDE		cache
1963		IDE		this
1963		DEL		.
1963		IDE		expressionMap
1963		DEL		.
1963		IDE		cacheId
1963		DEL		,
1963		IDE		this
1963		DEL		.
1963		IDE		expressionMap
1963		DEL		.
1963		IDE		cacheDuration
1963		DEL		)
1964		DEL		.
1964		IDE		setParameters
1964		DEL		(
1964		IDE		this
1964		DEL		.
1964		IDE		getParameters
1964		DEL		(
1964		DEL		)
1964		DEL		)
1965		DEL		.
1965		IDE		setNativeParameters
1965		DEL		(
1965		IDE		this
1965		DEL		.
1965		IDE		expressionMap
1965		DEL		.
1965		IDE		nativeParameters
1965		DEL		)
1966		DEL		.
1966		IDE		getRawMany
1966		DEL		(
1966		DEL		)
1966		DEL		;
1968		PRE		if
1968		DEL		(
1968		IDE		rawResults
1968		DEL		.
1968		IDE		length
1968		REL		>
1968		NRO		0
1968		DEL		)
1968		DEL		{
1969		IDE		let
1969		IDE		condition
1969		REL		=
1969		CAD		""
1969		DEL		;
1970		PRE		const
1970		IDE		parameters
1970		IDE		ObjectLiteral
1970		REL		=
1970		DEL		{
1970		DEL		}
1970		DEL		;
1971		PRE		if
1971		DEL		(
1971		IDE		metadata
1971		DEL		.
1971		IDE		hasMultiplePrimaryKeys
1971		DEL		)
1971		DEL		{
1972		IDE		condition
1972		REL		=
1972		IDE		rawResults
1972		DEL		.
1972		IDE		map
1972		DEL		(
1972		DEL		(
1972		IDE		result
1972		DEL		,
1972		IDE		index
1972		DEL		)
1972		REL		=
1972		REL		>
1972		DEL		{
1973		PRE		return
1973		IDE		metadata
1973		DEL		.
1973		IDE		primaryColumns
1973		DEL		.
1973		IDE		map
1973		DEL		(
1973		IDE		primaryColumn
1973		REL		=
1973		REL		>
1973		DEL		{
1974		PRE		const
1974		IDE		paramKey
1974		REL		=
1974		IDE		ormdistinctids
1974		DEL		{
1974		IDE		index
1974		DEL		}
1974		DEL		{
1974		IDE		primaryColumn
1974		DEL		.
1974		IDE		databaseName
1974		DEL		}
1974		DEL		;
1975		IDE		parameters
1975		DEL		[
1975		IDE		paramKey
1975		DEL		]
1975		REL		=
1975		IDE		result
1975		DEL		[
1975		IDE		ids
1975		DEL		{
1975		IDE		mainAliasName
1975		DEL		}
1975		DEL		{
1975		IDE		primaryColumn
1975		DEL		.
1975		IDE		databaseName
1975		DEL		}
1975		DEL		]
1975		DEL		;
1976		PRE		return
1976		DEL		{
1976		IDE		mainAliasName
1976		DEL		}
1976		DEL		.
1976		DEL		{
1976		IDE		primaryColumn
1976		DEL		.
1976		IDE		propertyPath
1976		DEL		}
1976		REL		=
1976		DEL		{
1976		IDE		paramKey
1976		DEL		}
1976		DEL		;
1977		DEL		}
1977		DEL		)
1977		DEL		.
1977		IDE		join
1977		DEL		(
1977		CAD		" AND "
1977		DEL		)
1977		DEL		;
1978		DEL		}
1978		DEL		)
1978		DEL		.
1978		IDE		join
1978		DEL		(
1978		CAD		" OR "
1978		DEL		)
1978		DEL		;
1979		DEL		}
1979		PRE		else
1979		DEL		{
1980		PRE		const
1980		IDE		alias
1980		REL		=
1980		IDE		DriverUtils
1980		DEL		.
1980		IDE		buildColumnAlias
1980		DEL		(
1981		IDE		this
1981		DEL		.
1981		IDE		connection
1981		DEL		.
1981		IDE		driver
1981		DEL		,
1982		CAD		"ids"
1982		ART		+
1982		IDE		mainAliasName
1982		DEL		,
1983		IDE		metadata
1983		DEL		.
1983		IDE		primaryColumns
1983		DEL		[
1983		NRO		0
1983		DEL		]
1983		DEL		.
1983		IDE		databaseName
1984		DEL		)
1984		DEL		;
1986		PRE		const
1986		IDE		ids
1986		REL		=
1986		IDE		rawResults
1986		DEL		.
1986		IDE		map
1986		DEL		(
1986		IDE		result
1986		REL		=
1986		REL		>
1986		IDE		result
1986		DEL		[
1986		IDE		alias
1986		DEL		]
1986		DEL		)
1986		DEL		;
1987		PRE		const
1987		IDE		areAllNumbers
1987		REL		=
1987		IDE		ids
1987		DEL		.
1987		IDE		every
1987		DEL		(
1987		DEL		(
1987		IDE		id
1987		IDE		any
1987		DEL		)
1987		REL		=
1987		REL		>
1987		IDE		typeof
1987		IDE		id
1987		REL		==
1987		REL		=
1987		CAD		"number"
1987		DEL		)
1987		DEL		;
1988		PRE		if
1988		DEL		(
1988		IDE		areAllNumbers
1988		DEL		)
1988		DEL		{
1990		IDE		condition
1990		REL		=
1990		DEL		{
1990		IDE		mainAliasName
1990		DEL		}
1990		DEL		.
1990		DEL		{
1990		IDE		metadata
1990		DEL		.
1990		IDE		primaryColumns
1990		DEL		[
1990		NRO		0
1990		DEL		]
1990		DEL		.
1990		IDE		propertyPath
1990		DEL		}
1990		IDE		IN
1990		DEL		(
1990		DEL		{
1990		IDE		ids
1990		DEL		.
1990		IDE		join
1990		DEL		(
1990		CAD		", "
1990		DEL		)
1990		DEL		}
1990		DEL		)
1990		DEL		;
1991		DEL		}
1991		PRE		else
1991		DEL		{
1992		IDE		parameters
1992		DEL		[
1992		CAD		"ormdistinctids"
1992		DEL		]
1992		REL		=
1992		IDE		ids
1992		DEL		;
1993		IDE		condition
1993		REL		=
1993		IDE		mainAliasName
1993		ART		+
1993		CAD		"."
1993		ART		+
1993		IDE		metadata
1993		DEL		.
1993		IDE		primaryColumns
1993		DEL		[
1993		NRO		0
1993		DEL		]
1993		DEL		.
1993		IDE		propertyPath
1993		ART		+
1993		CAD		" IN (...ormdistinctids)"
1993		DEL		;
1994		DEL		}
1995		DEL		}
1996		IDE		rawResults
1996		REL		=
1996		IDE		await
1996		IDE		this
1996		DEL		.
1996		IDE		clone
1996		DEL		(
1996		DEL		)
1997		DEL		.
1997		IDE		mergeExpressionMap
1997		DEL		(
1997		DEL		{
1997		IDE		extraAppendedAndWhereCondition
1997		IDE		condition
1997		DEL		}
1997		DEL		)
1998		DEL		.
1998		IDE		setParameters
1998		DEL		(
1998		IDE		parameters
1998		DEL		)
1999		DEL		.
1999		IDE		loadRawResults
1999		DEL		(
1999		IDE		queryRunner
1999		DEL		)
1999		DEL		;
2000		DEL		}
2002		DEL		}
2002		PRE		else
2002		DEL		{
2003		IDE		rawResults
2003		REL		=
2003		IDE		await
2003		IDE		this
2003		DEL		.
2003		IDE		loadRawResults
2003		DEL		(
2003		IDE		queryRunner
2003		DEL		)
2003		DEL		;
2004		DEL		}
2006		PRE		if
2006		DEL		(
2006		IDE		rawResults
2006		DEL		.
2006		IDE		length
2006		REL		>
2006		NRO		0
2006		DEL		)
2006		DEL		{
2009		PRE		const
2009		IDE		rawRelationIdResults
2009		REL		=
2009		IDE		await
2009		IDE		relationIdLoader
2009		DEL		.
2009		IDE		load
2009		DEL		(
2009		IDE		rawResults
2009		DEL		)
2009		DEL		;
2010		PRE		const
2010		IDE		rawRelationCountResults
2010		REL		=
2010		IDE		await
2010		IDE		relationCountLoader
2010		DEL		.
2010		IDE		load
2010		DEL		(
2010		IDE		rawResults
2010		DEL		)
2010		DEL		;
2011		PRE		const
2011		IDE		transformer
2011		REL		=
2011		IDE		new
2011		IDE		RawSqlResultsToEntityTransformer
2011		DEL		(
2011		IDE		this
2011		DEL		.
2011		IDE		expressionMap
2011		DEL		,
2011		IDE		this
2011		DEL		.
2011		IDE		connection
2011		DEL		.
2011		IDE		driver
2011		DEL		,
2011		IDE		rawRelationIdResults
2011		DEL		,
2011		IDE		rawRelationCountResults
2011		DEL		,
2011		IDE		this
2011		DEL		.
2011		IDE		queryRunner
2011		DEL		)
2011		DEL		;
2012		IDE		entities
2012		REL		=
2012		IDE		transformer
2012		DEL		.
2012		IDE		transform
2012		DEL		(
2012		IDE		rawResults
2012		DEL		,
2012		IDE		this
2012		DEL		.
2012		IDE		expressionMap
2012		DEL		.
2012		IDE		mainAlias
2012		LOG		!
2012		DEL		)
2012		DEL		;
2015		PRE		if
2015		DEL		(
2015		IDE		this
2015		DEL		.
2015		IDE		expressionMap
2015		DEL		.
2015		IDE		callListeners
2015		REL		==
2015		REL		=
2015		PRE		true
2015		LOG		&&
2015		IDE		this
2015		DEL		.
2015		IDE		expressionMap
2015		DEL		.
2015		IDE		mainAlias
2015		DEL		.
2015		IDE		hasMetadata
2015		DEL		)
2015		DEL		{
2016		PRE		const
2016		IDE		broadcastResult
2016		REL		=
2016		IDE		new
2016		IDE		BroadcasterResult
2016		DEL		(
2016		DEL		)
2016		DEL		;
2017		IDE		queryRunner
2017		DEL		.
2017		IDE		broadcaster
2017		DEL		.
2017		IDE		broadcastLoadEventsForAll
2017		DEL		(
2017		IDE		broadcastResult
2017		DEL		,
2017		IDE		this
2017		DEL		.
2017		IDE		expressionMap
2017		DEL		.
2017		IDE		mainAlias
2017		DEL		.
2017		IDE		metadata
2017		DEL		,
2017		IDE		entities
2017		DEL		)
2017		DEL		;
2018		PRE		if
2018		DEL		(
2018		IDE		broadcastResult
2018		DEL		.
2018		IDE		promises
2018		DEL		.
2018		IDE		length
2018		REL		>
2018		NRO		0
2018		DEL		)
2018		IDE		await
2018		IDE		Promise
2018		DEL		.
2018		IDE		all
2018		DEL		(
2018		IDE		broadcastResult
2018		DEL		.
2018		IDE		promises
2018		DEL		)
2018		DEL		;
2019		DEL		}
2020		DEL		}
2022		PRE		return
2022		DEL		{
2023		IDE		raw
2023		IDE		rawResults
2023		DEL		,
2024		IDE		entities
2024		IDE		entities
2024		DEL		,
2025		DEL		}
2025		DEL		;
2026		DEL		}
2028		IDE		protected
2028		IDE		createOrderByCombinedWithSelectExpression
2028		DEL		(
2028		IDE		parentAlias
2028		PRE		string
2028		DEL		)
2028		DEL		[
2028		PRE		string
2028		DEL		,
2028		IDE		OrderByCondition
2028		DEL		]
2028		DEL		{
2031		PRE		const
2031		IDE		orderBys
2031		REL		=
2031		IDE		this
2031		DEL		.
2031		IDE		expressionMap
2031		DEL		.
2031		IDE		allOrderBys
2031		DEL		;
2032		PRE		const
2032		IDE		selectString
2032		REL		=
2032		IDE		Object
2032		DEL		.
2032		IDE		keys
2032		DEL		(
2032		IDE		orderBys
2032		DEL		)
2033		DEL		.
2033		IDE		map
2033		DEL		(
2033		IDE		orderCriteria
2033		REL		=
2033		REL		>
2033		DEL		{
2034		PRE		if
2034		DEL		(
2034		IDE		orderCriteria
2034		DEL		.
2034		IDE		indexOf
2034		DEL		(
2034		CAD		"."
2034		DEL		)
2034		REL		!=
2034		REL		=
2034		ART		-
2034		NRO		1
2034		DEL		)
2034		DEL		{
2035		PRE		const
2035		IDE		criteriaParts
2035		REL		=
2035		IDE		orderCriteria
2035		DEL		.
2035		IDE		split
2035		DEL		(
2035		CAD		"."
2035		DEL		)
2035		DEL		;
2036		PRE		const
2036		IDE		aliasName
2036		REL		=
2036		IDE		criteriaParts
2036		DEL		[
2036		NRO		0
2036		DEL		]
2036		DEL		;
2037		PRE		const
2037		IDE		propertyPath
2037		REL		=
2037		IDE		criteriaParts
2037		DEL		.
2037		IDE		slice
2037		DEL		(
2037		NRO		1
2037		DEL		)
2037		DEL		.
2037		IDE		join
2037		DEL		(
2037		CAD		"."
2037		DEL		)
2037		DEL		;
2038		PRE		const
2038		IDE		alias
2038		REL		=
2038		IDE		this
2038		DEL		.
2038		IDE		expressionMap
2038		DEL		.
2038		IDE		findAliasByName
2038		DEL		(
2038		IDE		aliasName
2038		DEL		)
2038		DEL		;
2039		PRE		const
2039		IDE		column
2039		REL		=
2039		IDE		alias
2039		DEL		.
2039		IDE		metadata
2039		DEL		.
2039		IDE		findColumnWithPropertyPath
2039		DEL		(
2039		IDE		propertyPath
2039		DEL		)
2039		DEL		;
2040		PRE		return
2040		IDE		this
2040		DEL		.
2040		IDE		escape
2040		DEL		(
2040		IDE		parentAlias
2040		DEL		)
2040		ART		+
2040		CAD		"."
2040		ART		+
2040		IDE		this
2040		DEL		.
2040		IDE		escape
2040		DEL		(
2040		IDE		DriverUtils
2040		DEL		.
2040		IDE		buildColumnAlias
2040		DEL		(
2040		IDE		this
2040		DEL		.
2040		IDE		connection
2040		DEL		.
2040		IDE		driver
2040		DEL		,
2040		IDE		aliasName
2040		DEL		,
2040		IDE		column
2040		LOG		!
2040		DEL		.
2040		IDE		databaseName
2040		DEL		)
2040		DEL		)
2040		DEL		;
2041		DEL		}
2041		PRE		else
2041		DEL		{
2042		PRE		if
2042		DEL		(
2042		IDE		this
2042		DEL		.
2042		IDE		expressionMap
2042		DEL		.
2042		IDE		selects
2042		DEL		.
2042		IDE		find
2042		DEL		(
2042		IDE		select
2042		REL		=
2042		REL		>
2042		IDE		select
2042		DEL		.
2042		IDE		selection
2042		REL		==
2042		REL		=
2042		IDE		orderCriteria
2042		IDE		select
2042		DEL		.
2042		IDE		aliasName
2042		REL		==
2042		REL		=
2042		IDE		orderCriteria
2042		DEL		)
2042		DEL		)
2043		PRE		return
2043		IDE		this
2043		DEL		.
2043		IDE		escape
2043		DEL		(
2043		IDE		parentAlias
2043		DEL		)
2043		ART		+
2043		CAD		"."
2043		ART		+
2043		IDE		orderCriteria
2043		DEL		;
2045		PRE		return
2045		CAD		""
2045		DEL		;
2046		DEL		}
2047		DEL		}
2047		DEL		)
2048		DEL		.
2048		IDE		join
2048		DEL		(
2048		CAD		", "
2048		DEL		)
2048		DEL		;
2050		PRE		const
2050		IDE		orderByObject
2050		IDE		OrderByCondition
2050		REL		=
2050		DEL		{
2050		DEL		}
2050		DEL		;
2051		IDE		Object
2051		DEL		.
2051		IDE		keys
2051		DEL		(
2051		IDE		orderBys
2051		DEL		)
2051		DEL		.
2051		IDE		forEach
2051		DEL		(
2051		IDE		orderCriteria
2051		REL		=
2051		REL		>
2051		DEL		{
2052		PRE		if
2052		DEL		(
2052		IDE		orderCriteria
2052		DEL		.
2052		IDE		indexOf
2052		DEL		(
2052		CAD		"."
2052		DEL		)
2052		REL		!=
2052		REL		=
2052		ART		-
2052		NRO		1
2052		DEL		)
2052		DEL		{
2053		PRE		const
2053		IDE		criteriaParts
2053		REL		=
2053		IDE		orderCriteria
2053		DEL		.
2053		IDE		split
2053		DEL		(
2053		CAD		"."
2053		DEL		)
2053		DEL		;
2054		PRE		const
2054		IDE		aliasName
2054		REL		=
2054		IDE		criteriaParts
2054		DEL		[
2054		NRO		0
2054		DEL		]
2054		DEL		;
2055		PRE		const
2055		IDE		propertyPath
2055		REL		=
2055		IDE		criteriaParts
2055		DEL		.
2055		IDE		slice
2055		DEL		(
2055		NRO		1
2055		DEL		)
2055		DEL		.
2055		IDE		join
2055		DEL		(
2055		CAD		"."
2055		DEL		)
2055		DEL		;
2056		PRE		const
2056		IDE		alias
2056		REL		=
2056		IDE		this
2056		DEL		.
2056		IDE		expressionMap
2056		DEL		.
2056		IDE		findAliasByName
2056		DEL		(
2056		IDE		aliasName
2056		DEL		)
2056		DEL		;
2057		PRE		const
2057		IDE		column
2057		REL		=
2057		IDE		alias
2057		DEL		.
2057		IDE		metadata
2057		DEL		.
2057		IDE		findColumnWithPropertyPath
2057		DEL		(
2057		IDE		propertyPath
2057		DEL		)
2057		DEL		;
2058		IDE		orderByObject
2058		DEL		[
2058		IDE		this
2058		DEL		.
2058		IDE		escape
2058		DEL		(
2058		IDE		parentAlias
2058		DEL		)
2058		ART		+
2058		CAD		"."
2058		ART		+
2058		IDE		this
2058		DEL		.
2058		IDE		escape
2058		DEL		(
2058		IDE		DriverUtils
2058		DEL		.
2058		IDE		buildColumnAlias
2058		DEL		(
2058		IDE		this
2058		DEL		.
2058		IDE		connection
2058		DEL		.
2058		IDE		driver
2058		DEL		,
2058		IDE		aliasName
2058		DEL		,
2058		IDE		column
2058		LOG		!
2058		DEL		.
2058		IDE		databaseName
2058		DEL		)
2058		DEL		)
2058		DEL		]
2058		REL		=
2058		IDE		orderBys
2058		DEL		[
2058		IDE		orderCriteria
2058		DEL		]
2058		DEL		;
2059		DEL		}
2059		PRE		else
2059		DEL		{
2060		PRE		if
2060		DEL		(
2060		IDE		this
2060		DEL		.
2060		IDE		expressionMap
2060		DEL		.
2060		IDE		selects
2060		DEL		.
2060		IDE		find
2060		DEL		(
2060		IDE		select
2060		REL		=
2060		REL		>
2060		IDE		select
2060		DEL		.
2060		IDE		selection
2060		REL		==
2060		REL		=
2060		IDE		orderCriteria
2060		IDE		select
2060		DEL		.
2060		IDE		aliasName
2060		REL		==
2060		REL		=
2060		IDE		orderCriteria
2060		DEL		)
2060		DEL		)
2060		DEL		{
2061		IDE		orderByObject
2061		DEL		[
2061		IDE		this
2061		DEL		.
2061		IDE		escape
2061		DEL		(
2061		IDE		parentAlias
2061		DEL		)
2061		ART		+
2061		CAD		"."
2061		ART		+
2061		IDE		orderCriteria
2061		DEL		]
2061		REL		=
2061		IDE		orderBys
2061		DEL		[
2061		IDE		orderCriteria
2061		DEL		]
2061		DEL		;
2062		DEL		}
2062		PRE		else
2062		DEL		{
2063		IDE		orderByObject
2063		DEL		[
2063		IDE		orderCriteria
2063		DEL		]
2063		REL		=
2063		IDE		orderBys
2063		DEL		[
2063		IDE		orderCriteria
2063		DEL		]
2063		DEL		;
2064		DEL		}
2065		DEL		}
2066		DEL		}
2066		DEL		)
2066		DEL		;
2068		PRE		return
2068		DEL		[
2068		IDE		selectString
2068		DEL		,
2068		IDE		orderByObject
2068		DEL		]
2068		DEL		;
2069		DEL		}
2074		IDE		protected
2074		IDE		async
2074		IDE		loadRawResults
2074		DEL		(
2074		IDE		queryRunner
2074		IDE		QueryRunner
2074		DEL		)
2074		DEL		{
2075		PRE		const
2075		DEL		[
2075		IDE		sql
2075		DEL		,
2075		IDE		parameters
2075		DEL		]
2075		REL		=
2075		IDE		this
2075		DEL		.
2075		IDE		getQueryAndParameters
2075		DEL		(
2075		DEL		)
2075		DEL		;
2076		PRE		const
2076		IDE		queryId
2076		REL		=
2076		IDE		sql
2076		ART		+
2076		CAD		" -- PARAMETERS "
2076		ART		+
2076		IDE		JSON
2076		DEL		.
2076		IDE		stringify
2076		DEL		(
2076		IDE		parameters
2076		DEL		)
2076		DEL		;
2077		PRE		const
2077		IDE		cacheOptions
2077		REL		=
2077		IDE		typeof
2077		IDE		this
2077		DEL		.
2077		IDE		connection
2077		DEL		.
2077		IDE		options
2077		DEL		.
2077		IDE		cache
2077		REL		==
2077		REL		=
2077		CAD		"object"
2077		IDE		this
2077		DEL		.
2077		IDE		connection
2077		DEL		.
2077		IDE		options
2077		DEL		.
2077		IDE		cache
2077		DEL		{
2077		DEL		}
2077		DEL		;
2078		IDE		let
2078		IDE		savedQueryResultCacheOptions
2078		IDE		QueryResultCacheOptionsundefined
2078		REL		=
2078		IDE		undefined
2078		DEL		;
2079		PRE		if
2079		DEL		(
2079		IDE		this
2079		DEL		.
2079		IDE		connection
2079		DEL		.
2079		IDE		queryResultCache
2079		LOG		&&
2079		DEL		(
2079		IDE		this
2079		DEL		.
2079		IDE		expressionMap
2079		DEL		.
2079		IDE		cache
2079		IDE		cacheOptions
2079		DEL		.
2079		IDE		alwaysEnabled
2079		DEL		)
2079		DEL		)
2079		DEL		{
2080		IDE		savedQueryResultCacheOptions
2080		REL		=
2080		IDE		await
2080		IDE		this
2080		DEL		.
2080		IDE		connection
2080		DEL		.
2080		IDE		queryResultCache
2080		DEL		.
2080		IDE		getFromCache
2080		DEL		(
2080		DEL		{
2081		IDE		identifier
2081		IDE		this
2081		DEL		.
2081		IDE		expressionMap
2081		DEL		.
2081		IDE		cacheId
2081		DEL		,
2082		IDE		query
2082		IDE		queryId
2082		DEL		,
2083		IDE		duration
2083		IDE		this
2083		DEL		.
2083		IDE		expressionMap
2083		DEL		.
2083		IDE		cacheDuration
2083		IDE		cacheOptions
2083		DEL		.
2083		IDE		duration
2083		NRO		1000
2084		DEL		}
2084		DEL		,
2084		IDE		queryRunner
2084		DEL		)
2084		DEL		;
2085		PRE		if
2085		DEL		(
2085		IDE		savedQueryResultCacheOptions
2085		LOG		&&
2085		LOG		!
2085		IDE		this
2085		DEL		.
2085		IDE		connection
2085		DEL		.
2085		IDE		queryResultCache
2085		DEL		.
2085		IDE		isExpired
2085		DEL		(
2085		IDE		savedQueryResultCacheOptions
2085		DEL		)
2085		DEL		)
2086		PRE		return
2086		IDE		JSON
2086		DEL		.
2086		IDE		parse
2086		DEL		(
2086		IDE		savedQueryResultCacheOptions
2086		DEL		.
2086		IDE		result
2086		DEL		)
2086		DEL		;
2087		DEL		}
2089		PRE		const
2089		IDE		results
2089		REL		=
2089		IDE		await
2089		IDE		queryRunner
2089		DEL		.
2089		IDE		query
2089		DEL		(
2089		IDE		sql
2089		DEL		,
2089		IDE		parameters
2089		DEL		)
2089		DEL		;
2091		PRE		if
2091		DEL		(
2091		IDE		this
2091		DEL		.
2091		IDE		connection
2091		DEL		.
2091		IDE		queryResultCache
2091		LOG		&&
2091		DEL		(
2091		IDE		this
2091		DEL		.
2091		IDE		expressionMap
2091		DEL		.
2091		IDE		cache
2091		IDE		cacheOptions
2091		DEL		.
2091		IDE		alwaysEnabled
2091		DEL		)
2091		DEL		)
2091		DEL		{
2092		IDE		await
2092		IDE		this
2092		DEL		.
2092		IDE		connection
2092		DEL		.
2092		IDE		queryResultCache
2092		DEL		.
2092		IDE		storeInCache
2092		DEL		(
2092		DEL		{
2093		IDE		identifier
2093		IDE		this
2093		DEL		.
2093		IDE		expressionMap
2093		DEL		.
2093		IDE		cacheId
2093		DEL		,
2094		IDE		query
2094		IDE		queryId
2094		DEL		,
2095		IDE		time
2095		IDE		new
2095		IDE		Date
2095		DEL		(
2095		DEL		)
2095		DEL		.
2095		IDE		getTime
2095		DEL		(
2095		DEL		)
2095		DEL		,
2096		IDE		duration
2096		IDE		this
2096		DEL		.
2096		IDE		expressionMap
2096		DEL		.
2096		IDE		cacheDuration
2096		IDE		cacheOptions
2096		DEL		.
2096		IDE		duration
2096		NRO		1000
2096		DEL		,
2097		IDE		result
2097		IDE		JSON
2097		DEL		.
2097		IDE		stringify
2097		DEL		(
2097		IDE		results
2097		DEL		)
2098		DEL		}
2098		DEL		,
2098		IDE		savedQueryResultCacheOptions
2098		DEL		,
2098		IDE		queryRunner
2098		DEL		)
2098		DEL		;
2099		DEL		}
2101		PRE		return
2101		IDE		results
2101		DEL		;
2102		DEL		}
2107		IDE		protected
2107		IDE		mergeExpressionMap
2107		DEL		(
2107		IDE		expressionMap
2107		IDE		Partial
2107		REL		<
2107		IDE		QueryExpressionMap
2107		REL		>
2107		DEL		)
2107		IDE		this
2107		DEL		{
2108		IDE		ObjectUtils
2108		DEL		.
2108		IDE		assign
2108		DEL		(
2108		IDE		this
2108		DEL		.
2108		IDE		expressionMap
2108		DEL		,
2108		IDE		expressionMap
2108		DEL		)
2108		DEL		;
2109		PRE		return
2109		IDE		this
2109		DEL		;
2110		DEL		}
2115		IDE		protected
2115		IDE		normalizeNumber
2115		DEL		(
2115		IDE		num
2115		IDE		any
2115		DEL		)
2115		DEL		{
2116		PRE		if
2116		DEL		(
2116		IDE		typeof
2116		IDE		num
2116		REL		==
2116		REL		=
2116		CAD		"number"
2116		IDE		num
2116		REL		==
2116		REL		=
2116		IDE		undefined
2116		IDE		num
2116		REL		==
2116		REL		=
2116		IDE		null
2116		DEL		)
2117		PRE		return
2117		IDE		num
2117		DEL		;
2119		PRE		return
2119		IDE		Number
2119		DEL		(
2119		IDE		num
2119		DEL		)
2119		DEL		;
2120		DEL		}
2125		IDE		protected
2125		IDE		obtainQueryRunner
2125		DEL		(
2125		DEL		)
2125		DEL		{
2126		PRE		return
2126		IDE		this
2126		DEL		.
2126		IDE		queryRunner
2126		IDE		this
2126		DEL		.
2126		IDE		connection
2126		DEL		.
2126		IDE		createQueryRunner
2126		DEL		(
2126		CAD		"slave"
2126		DEL		)
2126		DEL		;
2127		DEL		}
2129		DEL		}

List of errors

54		SIB			:
77		SIB			:
88		SIB			:
94		SIB			:
94		SIB			:
94		SIB			?
94		SIB			:
94		SIB			:
100		SIB			:
100		SIB			?
100		SIB			:
100		SIB			:
106		SIB			:
106		SIB			:
112		SIB			?
112		SIB			:
112		OpMF		|
112		OpMF		|
112		SIB			:
112		SIB			?
112		SIB			:
112		SIB			:
115		SIB			:
120		SIB			:
120		SIB			:
123		SIB			:
123		SIB			:
132		SIB			:
132		SIB			:
132		SIB			?
132		SIB			:
132		SIB			:
137		SIB			:
137		SIB			?
137		SIB			:
137		SIB			:
142		SIB			:
142		SIB			:
147		SIB			:
147		OpMF		|
147		OpMF		|
147		SIB			:
147		SIB			?
147		SIB			:
147		SIB			:
152		SIB			:
157		SIB			:
157		SIB			:
160		SIB			:
160		SIB			:
169		SIB			:
169		SIB			:
177		SIB			:
177		SIB			:
187		SIB			:
187		SIB			:
187		SIB			:
187		SIB			:
194		SIB			:
194		SIB			:
194		SIB			:
201		SIB			:
201		OpMF		|
201		SIB			:
201		SIB			:
201		SIB			:
211		SIB			:
211		SIB			:
211		SIB			:
211		SIB			:
217		SIB			:
217		SIB			:
217		SIB			:
223		SIB			:
223		OpMF		|
223		SIB			:
223		SIB			:
223		SIB			:
236		SIB			:
236		SIB			:
236		SIB			:
236		SIB			?
236		SIB			:
236		SIB			?
236		SIB			:
236		SIB			:
244		SIB			:
244		SIB			:
244		SIB			?
244		SIB			:
244		SIB			?
244		SIB			:
244		SIB			:
251		SIB			:
251		OpMF		|
251		SIB			:
251		SIB			?
251		SIB			:
251		SIB			?
251		SIB			:
251		SIB			:
258		SIB			:
258		SIB			:
258		SIB			?
258		SIB			:
258		SIB			?
258		SIB			:
258		SIB			:
265		SIB			:
265		OpMF		|
265		OpMF		|
265		SIB			:
265		SIB			:
265		SIB			:
265		SIB			?
265		SIB			:
265		SIB			:
275		SIB			:
275		SIB			:
275		SIB			:
275		SIB			?
275		SIB			:
275		SIB			?
275		SIB			:
275		SIB			:
283		SIB			:
283		SIB			:
283		SIB			?
283		SIB			:
283		SIB			?
283		SIB			:
283		SIB			:
290		SIB			:
290		OpMF		|
290		SIB			:
290		SIB			?
290		SIB			:
290		SIB			?
290		SIB			:
290		SIB			:
297		SIB			:
297		SIB			:
297		SIB			?
297		SIB			:
297		SIB			?
297		SIB			:
297		SIB			:
304		SIB			:
304		OpMF		|
304		OpMF		|
304		SIB			:
304		SIB			:
304		SIB			:
304		SIB			?
304		SIB			:
304		SIB			:
314		SIB			:
314		SIB			:
314		SIB			:
314		SIB			?
314		SIB			:
314		SIB			?
314		SIB			:
314		SIB			:
322		SIB			:
322		SIB			:
322		SIB			?
322		SIB			:
322		SIB			?
322		SIB			:
322		SIB			:
329		SIB			:
329		OpMF		|
329		SIB			:
329		SIB			?
329		SIB			:
329		SIB			?
329		SIB			:
329		SIB			:
336		SIB			:
336		SIB			:
336		SIB			?
336		SIB			:
336		SIB			?
336		SIB			:
336		SIB			:
343		SIB			:
343		OpMF		|
343		OpMF		|
343		SIB			:
343		SIB			:
343		SIB			:
343		SIB			?
343		SIB			:
343		SIB			:
354		SIB			:
354		SIB			:
354		SIB			:
354		SIB			?
354		SIB			:
354		SIB			?
354		SIB			:
354		SIB			:
362		SIB			:
362		SIB			:
362		SIB			?
362		SIB			:
362		SIB			?
362		SIB			:
362		SIB			:
369		SIB			:
369		OpMF		|
369		SIB			:
369		SIB			:
369		SIB			?
369		SIB			:
369		SIB			:
376		SIB			:
376		SIB			:
376		SIB			?
376		SIB			:
376		SIB			?
376		SIB			:
376		SIB			:
383		SIB			:
383		OpMF		|
383		OpMF		|
383		SIB			:
383		SIB			:
383		SIB			:
383		SIB			?
383		SIB			:
383		SIB			:
397		SIB			:
397		SIB			:
397		SIB			:
397		SIB			:
397		SIB			?
397		SIB			:
397		SIB			?
397		SIB			:
397		SIB			:
407		SIB			:
407		SIB			:
407		SIB			:
407		SIB			?
407		SIB			:
407		SIB			?
407		SIB			:
407		SIB			:
416		SIB			:
416		SIB			:
416		OpMF		|
416		SIB			:
416		SIB			:
416		SIB			?
416		SIB			:
416		SIB			:
425		SIB			:
425		SIB			:
425		SIB			:
425		SIB			:
425		SIB			?
425		SIB			:
425		SIB			:
434		SIB			:
434		SIB			:
434		OpMF		|
434		OpMF		|
434		SIB			:
434		SIB			:
434		SIB			:
434		SIB			?
434		SIB			:
434		SIB			:
448		SIB			:
448		SIB			:
448		SIB			:
448		SIB			:
448		SIB			?
448		SIB			:
448		SIB			?
448		SIB			:
448		SIB			:
458		SIB			:
458		SIB			:
458		SIB			:
458		SIB			?
458		SIB			:
458		SIB			?
458		SIB			:
458		SIB			:
467		SIB			:
467		SIB			:
467		OpMF		|
467		SIB			:
467		SIB			:
467		SIB			?
467		SIB			:
467		SIB			:
476		SIB			:
476		SIB			:
476		SIB			:
476		SIB			:
476		SIB			?
476		SIB			:
476		SIB			:
485		SIB			:
485		SIB			:
485		OpMF		|
485		OpMF		|
485		SIB			:
485		SIB			:
485		SIB			:
485		SIB			?
485		SIB			:
485		SIB			:
499		SIB			:
499		SIB			:
499		SIB			:
499		SIB			:
499		SIB			?
499		SIB			:
499		SIB			?
499		SIB			:
499		SIB			:
509		SIB			:
509		SIB			:
509		SIB			:
509		SIB			?
509		SIB			:
509		SIB			?
509		SIB			:
509		SIB			:
518		SIB			:
518		SIB			:
518		OpMF		|
518		SIB			:
518		SIB			:
518		SIB			?
518		SIB			:
518		SIB			:
527		SIB			:
527		SIB			:
527		SIB			:
527		SIB			:
527		SIB			?
527		SIB			:
527		SIB			:
536		SIB			:
536		SIB			:
536		OpMF		|
536		OpMF		|
536		SIB			:
536		SIB			:
536		SIB			:
536		SIB			?
536		SIB			:
536		SIB			:
550		SIB			:
550		SIB			:
550		SIB			:
550		SIB			:
550		SIB			?
550		SIB			:
550		SIB			?
550		SIB			:
550		SIB			:
560		SIB			:
560		SIB			:
560		SIB			:
560		SIB			?
560		SIB			:
560		SIB			?
560		SIB			:
560		SIB			:
569		SIB			:
569		SIB			:
569		OpMF		|
569		SIB			:
569		SIB			:
569		SIB			?
569		SIB			:
569		SIB			:
578		SIB			:
578		SIB			:
578		SIB			:
578		SIB			:
578		SIB			?
578		SIB			:
578		SIB			:
587		SIB			:
587		SIB			:
587		OpMF		|
587		OpMF		|
587		SIB			:
587		SIB			:
587		SIB			:
587		SIB			?
587		SIB			:
587		SIB			:
620		SIB			:
620		SIB			:
620		SIB			?
620		SIB			:
620		SIB			?
620		SIB			:
620		SIB			:
626		SIB			:
626		SIB			:
626		SIB			:
626		SIB			:
626		SIB			:
626		SIB			:
632		SIB			:
633		SIB			:
634		SIB			?
634		SIB			:
634		OpMF		|
634		SIB			?
634		SIB			:
635		SIB			?
635		SIB			:
635		SIB			:
635		SIB			:
650		SIB			:
651		SIB			:
652		SIB			:
662		SIB			:
662		SIB			:
662		SIB			?
662		SIB			:
662		SIB			?
662		SIB			:
662		SIB			:
662		SIB			:
671		SIB			:
672		SIB			:
676		SIB			:
677		SIB			:
678		SIB			:
689		SIB			?
689		SIB			:
689		SIB			?
689		SIB			:
689		SIB			?
689		SIB			:
689		SIB			:
709		SIB			:
709		OpMF		|
709		OpMF		|
709		SIB			:
709		OpMF		|
709		OpMF		|
709		SIB			?
709		SIB			:
709		SIB			:
713		SIB			:
713		SIB			:
723		SIB			:
723		OpMF		|
723		OpMF		|
723		SIB			:
723		SIB			?
723		SIB			:
723		SIB			:
724		SIB			:
724		SIB			:
733		SIB			:
733		OpMF		|
733		OpMF		|
733		SIB			:
733		SIB			?
733		SIB			:
733		SIB			:
734		SIB			:
734		SIB			:
747		SIB			:
747		OpMF		|
747		SIB			:
759		SIB			:
759		OpMF		|
759		SIB			:
771		SIB			:
771		OpMF		|
771		SIB			:
781		SIB			:
781		SIB			?
781		SIB			:
781		SIB			:
782		SIB			:
782		SIB			:
791		SIB			:
791		SIB			?
791		SIB			:
791		SIB			:
792		SIB			:
792		SIB			:
801		SIB			:
801		SIB			?
801		SIB			:
801		SIB			:
802		SIB			:
802		SIB			:
812		SIB			:
819		SIB			:
819		SIB			:
826		SIB			?
826		SIB			:
826		SIB			:
838		SIB			:
838		SIB			:
850		SIB			:
857		SIB			:
857		SIB			?
857		SIB			:
857		OpMF		|
857		SIB			?
857		SIB			:
857		OpMF		|
857		SIB			:
864		SIB			:
864		SIB			:
871		SIB			?
871		SIB			:
871		OpMF		|
871		SIB			:
871		OpMF		|
871		SIB			?
871		SIB			:
871		OpMF		|
871		SIB			:
873		SIB			`
873		SIB			`
875		SIB			`
875		SIB			`
882		SIB			:
884		SIB			:
896		SIB			:
896		SIB			:
896		OpMF		|
896		SIB			?
896		SIB			:
896		OpMF		|
896		SIB			:
898		SIB			`
898		SIB			`
900		SIB			`
900		SIB			`
916		SIB			?
916		SIB			:
916		SIB			:
919		SIB			`
919		SIB			`
930		SIB			?
930		SIB			:
930		SIB			:
933		SIB			`
933		SIB			`
941		SIB			?
941		SIB			:
941		SIB			:
944		SIB			`
944		SIB			`
952		SIB			?
952		SIB			:
952		SIB			:
955		SIB			`
955		SIB			`
963		SIB			:
963		SIB			:
963		OpMF		|
963		SIB			:
968		SIB			:
968		OpMF		|
968		OpMF		|
968		OpMF		|
968		OpMF		|
968		OpMF		|
968		SIB			?
968		SIB			:
968		SIB			?
968		SIB			:
968		SIB			:
973		SIB			:
973		OpMF		|
973		OpMF		|
973		OpMF		|
973		OpMF		|
973		OpMF		|
973		OpMF		|
973		SIB			?
973		SIB			:
973		OpMF		|
973		SIB			?
973		SIB			:
973		SIB			:
983		SIB			:
991		SIB			:
998		SIB			:
1004		SIB			:
1042		SIB			:
1042		SIB			:
1042		SIB			:
1044		SIB			:
1082		SIB			:
1082		OpMF		|
1107		SIB			:
1120		SIB			:
1132		SIB			:
1137		SIB			:
1176		SIB			:
1181		SIB			:
1194		SIB			:
1222		SIB			:
1226		SIB			:
1265		SIB			:
1265		SIB			:
1271		SIB			:
1271		SIB			:
1276		SIB			:
1276		SIB			?
1276		SIB			:
1276		SIB			:
1281		SIB			:
1281		OpMF		|
1281		OpMF		|
1281		SIB			?
1281		SIB			:
1281		SIB			:
1305		SIB			:
1305		SIB			:
1314		SIB			:
1314		OpMF		|
1315		SIB			:
1315		OpMF		|
1315		OpMF		|
1315		SIB			:
1316		SIB			:
1317		SIB			?
1317		SIB			:
1318		SIB			?
1318		SIB			:
1319		SIB			?
1319		SIB			:
1320		SIB			?
1320		SIB			:
1320		SIB			:
1335		SIB			`
1335		SIB			$
1335		SIB			$
1335		SIB			`
1336		SIB			?
1336		SIB			`
1336		SIB			$
1336		SIB			`
1336		SIB			:
1336		SIB			`
1336		SIB			$
1336		SIB			`
1340		SIB			:
1341		SIB			:
1342		SIB			:
1346		SIB			:
1347		SIB			:
1348		SIB			:
1353		SIB			:
1355		SIB			:
1364		SIB			:
1365		SIB			:
1366		SIB			:
1366		SIB			?
1366		SIB			:
1367		SIB			:
1367		SIB			?
1367		SIB			:
1382		SIB			:
1383		SIB			:
1400		SIB			:
1410		SIB			:
1410		SIB			:
1414		SIB			:
1416		SIB			:
1419		SIB			:
1422		SIB			:
1425		SIB			:
1442		SIB			?
1442		SIB			:
1450		SIB			:
1460		SIB			`
1460		SIB			$
1460		SIB			`
1471		SIB			:
1485		SIB			?
1485		SIB			:
1491		SIB			?
1491		SIB			:
1493		SIB			?
1493		SIB			:
1590		SIB			:
1593		SIB			:
1593		OpMF		|
1594		SIB			:
1594		OpMF		|
1660		SIB			:
1676		SIB			:
1692		SIB			:
1706		SIB			:
1716		SIB			:
1727		SIB			:
1733		SIB			:
1745		SIB			:
1746		SIB			?
1746		SIB			:
1747		SIB			:
1748		SIB			?
1748		SIB			:
1749		SIB			:
1758		SIB			:
1758		SIB			:
1758		SIB			:
1761		SIB			:
1775		SIB			?
1775		SIB			:
1784		SIB			?
1784		SIB			:
1785		SIB			`
1785		SIB			$
1785		SIB			$
1785		SIB			`
1791		SIB			`
1791		SIB			$
1791		SIB			$
1791		SIB			:
1791		SIB			:
1791		SIB			`
1793		SIB			`
1793		SIB			$
1793		SIB			:
1793		SIB			:
1793		SIB			`
1796		SIB			`
1796		SIB			$
1796		SIB			`
1799		SIB			:
1800		SIB			:
1800		SIB			?
1800		SIB			:
1802		SIB			:
1802		SIB			?
1802		SIB			:
1802		SIB			?
1802		SIB			:
1807		SIB			:
1807		SIB			:
1807		SIB			:
1840		SIB			`
1840		SIB			$
1840		SIB			$
1840		SIB			`
1848		SIB			`
1848		SIB			$
1848		SIB			$
1848		SIB			`
1859		SIB			`
1859		SIB			$
1859		SIB			$
1859		SIB			`
1864		SIB			`
1864		SIB			$
1864		SIB			`
1867		SIB			`
1867		SIB			$
1867		SIB			`
1878		SIB			`
1878		SIB			`
1879		SIB			`
1879		SIB			$
1879		SIB			$
1879		SIB			`
1883		SIB			:
1883		SIB			:
1906		SIB			:
1906		SIB			:
1906		SIB			:
1906		SIB			:
1909		SIB			`
1909		SIB			`
1927		SIB			:
1927		SIB			:
1953		SIB			`
1953		SIB			$
1953		SIB			$
1953		SIB			`
1957		SIB			`
1957		SIB			$
1957		SIB			`
1959		SIB			`
1959		SIB			$
1959		SIB			`
1963		SIB			?
1963		SIB			:
1970		SIB			:
1974		SIB			`
1974		SIB			$
1974		SIB			_
1974		SIB			$
1974		SIB			`
1975		SIB			`
1975		SIB			$
1975		SIB			_
1975		SIB			$
1975		SIB			`
1976		SIB			`
1976		SIB			$
1976		SIB			$
1976		SIB			:
1976		SIB			$
1976		SIB			`
1987		SIB			:
1990		SIB			`
1990		SIB			$
1990		SIB			$
1990		SIB			$
1990		SIB			`
1997		SIB			:
2023		SIB			:
2024		SIB			:
2028		SIB			:
2028		SIB			:
2050		SIB			:
2074		SIB			:
2077		SIB			?
2077		SIB			:
2078		SIB			:
2078		OpMF		|
2081		SIB			:
2082		SIB			:
2083		SIB			:
2093		SIB			:
2094		SIB			:
2095		SIB			:
2096		SIB			:
2097		SIB			:
2107		SIB			:
2107		SIB			:
2115		SIB			:
